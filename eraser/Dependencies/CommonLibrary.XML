<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonLibrary</name>
    </assembly>
    <members>
        <member name="T:ComLib.Samples.Example_Validation">
            <summary>
            Example for the ValidationSupport namespace.
            </summary>
        </member>
        <member name="T:ComLib.Application.App">
            <summary>
            <para>
            A template driven base class for any application. This provides out-of the box functionality containing:
            1. Environment selection.
            2. Argument parsing
            3. Configuration file loading ( with inheritance )
            4. Logging
            5. Email notification on completion
            6. Error handling
            7. 0/1 Exit codes on completion
            </para>
            </summary>
        </member>
        <member name="T:ComLib.Application.IApp">
            <summary>
            Interface for any console/batch application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.ShowOptions">
            <summary>
            The the command line options.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Accept(System.String[])">
            <summary>
            Determine if the string[] arguments (command line arguments) can be accepted.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.IApp.AcceptArgs(System.String[])">
            <summary>
            Determine if the string[] arguments (command line arguments) can be accepted.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.IApp.AcceptArgs(System.String[],System.String,System.String)">
            <summary>
            Determine if the string[] arguments (command line arguments) can be accepted.
            </summary>
            <param name="args">e.g. -env:Prod -batchsize:100</param>
            <param name="prefix">-</param>
            <param name="separator">:</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.IApp.Init">
            <summary>
            Initialize the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Init(System.Object)">
            <summary>
            Initialize with some contextual data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.IApp.InitComplete">
            <summary>
            Perform some post initialization processing.
            and before execution begins.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Execute">
            <summary>
            Execute the application without any arguments.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Execute(System.Object)">
            <summary>
            Execute the application with context data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.IApp.ExecuteComplete">
            <summary>
            Used for performing some post execution processing before
            shutting down the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.ShutDown">
            <summary>
            Shutdown the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Notify">
            <summary>
            Send an email after the application execution completed.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Notify(System.Collections.IDictionary)">
            <summary>
            Send a notification message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ComLib.Application.IApp.DisplayStart">
            <summary>
            Display the start of the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.DisplayEnd">
            <summary>
            Display the end of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Conf">
            <summary>
            The configuration for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Log">
            <summary>
            The logger for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Emailer">
            <summary>
            The emailer for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Result">
            <summary>
            The result of the execution.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Settings">
            <summary>
            Application configurable settings.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.StartTime">
            <summary>
            Get the starttime of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Name">
            <summary>
            Application name from either the settings or this.GetType().
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Description">
            <summary>
            Get the application description.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Version">
            <summary>
            Get the version of this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Options">
            <summary>
            Get the definition of command line options that
            are acceptable for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.OptionsExamples">
            <summary>
            Get a list of examples that show how to launch this application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Run(ComLib.Application.IApp,System.String[])">
            <summary>
            Runs the application provided.
            </summary>
            <param name="app">The application to run.</param>
            <param name="args">Command line arguments.</param>
        </member>
        <member name="M:ComLib.Application.App.Run(ComLib.Application.IApp,System.String[],System.String)">
            <summary>
            Runs the application provided.
            </summary>
            <param name="app">The application to run.</param>
            <param name="args">Command line arguments.</param>
            <param name="decorations">Decorations around the application. e.g. "diagnostics,statusupdates"</param>
        </member>
        <member name="M:ComLib.Application.App.Run(ComLib.Application.IApp,System.String[],System.Boolean,System.String)">
            <summary>
            Runs the application provided.
            </summary>
            <param name="app">The application to run.</param>
            <param name="args">Command line arguments.</param>
            <param name="requireConfigFiles">Whether or not to throw error if the config files are not available.</param>
            <param name="decorations">Decorations around the application. e.g. "diagnostics,statusupdates"</param>
        </member>
        <member name="M:ComLib.Application.App.#ctor">
             <summary>
             <para>
             Default construction. Populates the arguments schema with some basic arguments to support this template.
             This includes the following:
                _args.Schema.AddNamed(bool)("pause", false, false, "Pause the application to attach debugger.", "true", "true|false", false, false, "common", true);            
                _args.Schema.AddNamed(string)("env", false, "dev", "Environment to run in.", "dev", "dev | qa | uat | prod", false, false, "common", false);
                _args.Schema.AddNamed(string)("config", false, "dev", "Configuration file to use. If not supplied, default to env selected", "dev.config", "dev.config | qa.config", false, false, "common", false);
                _args.Schema.AddNamed(string)("log", false, @"%name%-%yyyy%-%MM%-%dd%-%env%-%user%.log", "Log file name", "myapp.log", @"myapp.log | %name%-%yyyy%-%MM%-%dd%-%env%-%user%.log", false, false, "common", true);
                _args.Schema.AddNamed(bool)("email", false, false, "Whether or not to send an email on completion.", "true", "true|false", false, false, "common", true);
                _args.Schema.AddNamed(bool)("emailOnlyOnFailure", false, false, "Whether or not to send an email only if application fails.", "true", "true|false", false, false, "common", true);
            </para>
             </summary>
        </member>
        <member name="M:ComLib.Application.App.ShowOptions">
            <summary>
            Show the command line options.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.AcceptArgs(System.String[])">
            <summary>
            Determine if the arguments can be accepted.
            </summary>
            <param name="args"></param>
            <returns>True if success. False otherwise.</returns>        
        </member>
        <member name="M:ComLib.Application.App.AcceptArgs(System.String[],System.String,System.String)">
            <summary>
            Determine if the arguments can be accepted.
            </summary>
            <param name="rawArgs">Arguments from commandline.</param>
            <param name="prefix">-</param>
            <param name="separator">:</param>
            <returns>True if success. False otherwise.</returns>        
        </member>
        <member name="M:ComLib.Application.App.Accept(System.String[])">
            <summary>
            Determine if the arguments can be accepted.
            </summary>
            <param name="args"></param>
            <returns>True if success. False otherwise.</returns>        
        </member>
        <member name="M:ComLib.Application.App.Init">
            <summary>
            Initialize the application.
            </summary>        
        </member>
        <member name="M:ComLib.Application.App.Init(System.Object)">
            <summary>
            Initialize with contextual data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.App.InitComplete">
            <summary>
            On initialization complete and before execution begins.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Execute">
            <summary>
            Execute the application without any arguments.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Execute(System.Object)">
            <summary>
            Execute the application with context data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.App.ExecuteComplete">
            <summary>
            Used to perform some post execution processing before
            shutting down.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.ShutDown">
            <summary>
            Shutdown the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.DisplayStart">
            <summary>
            Display information at the start of the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.DisplayEnd">
            <summary>
            Display information at the end of the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Notify">
            <summary>
            Send an email notification.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Notify(System.Collections.IDictionary)">
            <summary>
            Send an email at the end of the completion of the application.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ComLib.Application.App.Display(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Display information about the application.
            </summary>
            <param name="isStart"></param>
            <param name="summaryInfo">The key/value pairs can be supplied
            if this is derived and the derived class wants to add additional
            summary information.</param>
        </member>
        <member name="M:ComLib.Application.App.BuildSummary(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Builds up a string representing the summary of the application.
            </summary>
            <param name="isStart"></param>
            <param name="summaryInfo"></param>
        </member>
        <member name="M:ComLib.Application.App.Dispose">
            <summary>
            Currently disposing.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Dispose(System.Boolean)">
            <summary>
            Overloaded dispose method indicating if dispose was 
            called explicitly.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ComLib.Application.App.Finalize">
            <summary>
            Finalization.
            </summary>
        </member>
        <member name="F:ComLib.Application.App._log">
            <summary>
            The logger for the app.
            </summary>
        </member>
        <member name="F:ComLib.Application.App._config">
            <summary>
            The configuration source.
            </summary>
        </member>
        <member name="F:ComLib.Application.App._emailer">
            <summary>
            The email service to send emails after completion.
            </summary>
        </member>
        <member name="F:ComLib.Application.App._result">
            <summary>
            The result of the execution.
            </summary>
        </member>
        <member name="F:ComLib.Application.App._args">
            <summary>
            Arguments supplied to the application.
            </summary>
        </member>
        <member name="F:ComLib.Application.App._startTime">
            <summary>
            The starttime of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Conf">
            <summary>
            The configuration for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Log">
            <summary>
            The instance of the logger to use for the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Emailer">
            <summary>
            The instance of the email service.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Result">
            <summary>
            The result of the execution.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.StartTime">
            <summary>
            Get the start time of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Name">
            <summary>
            Application name from either the settings or this.GetType().
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Description">
            <summary>
            Get the application description.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Version">
            <summary>
            Get the version of this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Options">
            <summary>
            Get list of command line options that are supported.
            By default only supports the --pause option.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.OptionsExamples">
            <summary>
            Get example of how to run this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Settings">
            <summary>
            Settings.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.IsArgumentRecieverApplicable">
            <summary>
            Determines whether or not the argument reciever is capable of recieving the arguments.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Validation.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Validation.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Validation.Print(System.String,System.Boolean)">
            <summary>
            Print the check that was done and it's result.
            </summary>
            <param name="checkName"></param>
            <param name="isValid"></param>
        </member>
        <member name="M:ComLib.Samples.Example_Validation.PrintErrors(ComLib.IErrors)">
            <summary>
            Print the errors.
            </summary>
            <param name="errors"></param>
        </member>
        <member name="T:ComLib.Samples.Example_Validation.MyCustomUserIdValidator">
            <summary>
            Example of a custom validator.
            </summary>
        </member>
        <member name="T:ComLib.ValidationSupport.Validator">
            <summary>
            Base class for any validator.
            </summary>
        </member>
        <member name="T:ComLib.IValidator">
            <summary>
            Interface for a validator that supports both stateful and non-stateful
            validation.
            </summary>
        </member>
        <member name="T:ComLib.IValidatorStateful">
            <summary>
            Interface for a class that can serve as a validator.
            This interface is stateful which means it stores the last validation result,
            the object being validated.
            </summary>
        </member>
        <member name="M:ComLib.IValidatorStateful.Validate">
            <summary>
            Performs validation on data provided during initialization/construction.
            </summary>
            <returns>Validation results.</returns>
        </member>
        <member name="M:ComLib.IValidatorStateful.Validate(ComLib.IValidationResults)">
            <summary>
            Validate using the results collection provided.
            </summary>
            <param name="results">Validation results.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="M:ComLib.IValidatorStateful.Clear">
            <summary>
            Clear the results.
            </summary>
        </member>
        <member name="P:ComLib.IValidatorStateful.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="P:ComLib.IValidatorStateful.Message">
            <summary>
            Message to use for a validation failure.
            </summary>
        </member>
        <member name="P:ComLib.IValidatorStateful.IsValid">
            <summary>
            method to determine if validation has passed
            or failed for the object(s) being validated.
            </summary>
            <returns>True if the validation is passed.</returns>
        </member>
        <member name="P:ComLib.IValidatorStateful.Results">
            <summary>
            The last validation results.
            </summary>
        </member>
        <member name="T:ComLib.IValidatorNonStateful">
            <summary>
            Interface for a validator that does not store any stateful instance data.
            This allows for the entire validation to be done in one method.
            </summary>
        </member>
        <member name="M:ComLib.IValidatorNonStateful.ValidateTarget(System.Object)">
            <summary>
            Validates <paramref name="target"/> and returns a new <see cref="T:ComLib.ValidationResults"/> with
            all the <see cref="T:ComLib.ValidationResults"/> entries that represent the validation failures.
            </summary>
            <param name="target">The object to validate.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:ComLib.IValidatorNonStateful.Validate(System.Object,ComLib.IValidationResults)">
            <summary>
            Validates <paramref name="target"/> and adds <see cref="T:ComLib.ValidationResults"/> entires 
            representing failures to the supplied <paramref name="results"/>.
            </summary>
            <param name="target">The object to validate.</param>
            <param name="results">The <see cref="T:ComLib.ValidationResults"/> where the validation failures
            should be collected.</param>
        </member>
        <member name="M:ComLib.IValidatorNonStateful.Validate(ComLib.ValidationEvent)">
            <summary>
            Validate using the supplied validation event that encapsulates both the target and results.
            </summary>
            <param name="validationEvent">Validation event.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="F:ComLib.ValidationSupport.Validator.Empty">
            <summary>
            Validator to use.
            </summary>
        </member>
        <member name="F:ComLib.ValidationSupport.Validator._message">
            <summary>
            Message to use as description for an error.
            </summary>
        </member>
        <member name="F:ComLib.ValidationSupport.Validator._target">
            <summary>
            The target object to validate
            </summary>
        </member>
        <member name="F:ComLib.ValidationSupport.Validator._lastValidationResults">
            <summary>
            The results of the validation.
            </summary>
        </member>
        <member name="F:ComLib.ValidationSupport.Validator._validatorLamda">
            <summary>
            A lamda to call for validation.
            </summary>
        </member>
        <member name="F:ComLib.ValidationSupport.Validator._initialErrorCount">
            <summary>
            The number of errors in the error collection before validation runs.
            </summary>
        </member>
        <member name="F:ComLib.ValidationSupport.Validator._creatValidationEvent">
            <summary>
            Create validation event flag.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.#ctor">
            <summary>
            Default construction
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.#ctor(System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Create using the lambda that does the actual validation.
            </summary>
            <param name="validator">Validator function.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Clear">
            <summary>
            Clears the validation results.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate">
            <summary>
            Validate data using data provided during initialization/construction.
            </summary>
            <returns>Validation results.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.ValidateTarget(System.Object)">
            <summary>
            Validate using the object provided.
            </summary>
            <param name="target">Validation target.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate(ComLib.IValidationResults)">
            <summary>
            Validate using the results collection provided.
            </summary>
            <param name="results">Validation results.</param>
            <returns>Validation results.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate(System.Object,ComLib.IValidationResults)">
            <summary>
            Validate using the object provided, and add errors to the results list provided.
            </summary>
            <param name="target">Validation target.</param>
            <param name="results">Validation results.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate(ComLib.ValidationEvent)">
            <summary>
            This Method will call the ValidateInternal method of this validator.
            </summary>
            <remarks>
            The reason that the ValidateInternal method is NOT called directly by the
            other Validate methods is because the CodeGenerator generates the Validation
            code inside of the ValidateInternal method.
            If a client wants to override the validation while sill leveraging the autogenerated
            validation code, it can be done by overrideing this method and calling the
            ValidateInternal method.
            This allows a lot of flexibility for codegeneration.
            </remarks>
            <param name="validationEvent">Validation event.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Implement this method.
            </summary>
            <param name="validationEvent">Validation event.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.AddResult(ComLib.IValidationResults,System.String,System.String)">
            <summary>
            Add a new result to the list of errors.
            </summary>
            <param name="results">Validation results.</param>
            <param name="key">Result key.</param>
            <param name="message">Result message.</param>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.Message">
            <summary>
            Message to use for the description of an error.
            </summary>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.IsValid">
            <summary>
            Simple true/false to indicate if validation passed.
            </summary>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.Results">
            <summary>
            The results of the last validation.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Validation.MyCustomUserIdValidator.#ctor(System.String)">
            <summary>
            Initialize the object to validate.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:ComLib.Samples.Example_Validation.MyCustomUserIdValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Do some custom validation on a user name(string).
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LamdaLogger">
            <summary>
            Logger using lamda method to call external logging code.
            This decouples code from using a specific ILogging interface via lamdas.
            </summary>
        </member>
        <member name="M:ComLib.LamdaLogger.#ctor">
            <summary>
            Initialize default loggers to console.
            </summary>
        </member>
        <member name="M:ComLib.LamdaLogger.Init(System.Action{System.Object,System.Exception,System.Object[]},System.Action{System.Object,System.Exception,System.Object[]},System.Action{System.Object,System.Exception,System.Object[]},System.Action{System.Object,System.Exception,System.Object[]})">
            <summary>
            Initialize the different level lamda loggers.
            </summary>
            <param name="criticalLogger">Critical logger.</param>
            <param name="errorLogger">Error logger.</param>
            <param name="infoLogger">Information logger.</param>
            <param name="debugLogger">Debug logger.</param>
        </member>
        <member name="M:ComLib.LamdaLogger.Critical(System.Object,System.Exception,System.Object[])">
            <summary>
            Log a critical error.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="M:ComLib.LamdaLogger.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Log an error.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="M:ComLib.LamdaLogger.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Log info.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="M:ComLib.LamdaLogger.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Log debug.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="T:ComLib.IMessages">
            <summary>
            Interface for storing messages by both list and key/value.
            </summary>
        </member>
        <member name="M:ComLib.IMessages.Add(System.String)">
            <summary>
            Add a message
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:ComLib.IMessages.Add(System.String,System.String)">
            <summary>
            Add a message by key/value pair.
            </summary>
            <param name="key">Key to message.</param>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:ComLib.IMessages.Clear">
            <summary>
            Clear all the messages.
            </summary>
        </member>
        <member name="M:ComLib.IMessages.CopyTo(ComLib.IMessages)">
            <summary>
            Copy all the messages to the instance supplied.
            </summary>
            <param name="messages">Messages to copy.</param>
        </member>
        <member name="M:ComLib.IMessages.Each(System.Action{System.String,System.String})">
            <summary>
            Iterate through all the key/value messages.
            </summary>
            <param name="callback">Callback to call for each key/value pair.</param>
        </member>
        <member name="M:ComLib.IMessages.EachFull(System.Action{System.String})">
            <summary>
            Iterate through all the messages.
            </summary>
            <param name="callback">Callback to call for each message.</param>
        </member>
        <member name="M:ComLib.IMessages.Message">
            <summary>
            Builds a single message of all the messages separated by newline.
            </summary>
            <returns>String with all messages.</returns>
        </member>
        <member name="M:ComLib.IMessages.Message(System.String)">
            <summary>
            Builds a single message of all the messages separated by separator supplied.
            </summary>
            <param name="separator">Separator to use.</param>
            <returns>String with all messages separated.</returns>
        </member>
        <member name="M:ComLib.IMessages.On(System.String)">
            <summary>
            Gets the message associated w/ the specified key.
            </summary>
            <param name="key">Key to message.</param>
            <returns>Message associated with key.</returns>
        </member>
        <member name="M:ComLib.IMessages.On">
            <summary>
            Get all the messages.
            </summary>
            <returns>List of messages.</returns>
        </member>
        <member name="P:ComLib.IMessages.Count">
            <summary>
            Get count of all the messages.
            </summary>
        </member>
        <member name="P:ComLib.IMessages.HasAny">
            <summary>
            Whether or not there are any messages in this instance.
            </summary>
        </member>
        <member name="P:ComLib.IMessages.MessageList">
            <summary>
            Internal list of non-key/value based messages.
            </summary>
        </member>
        <member name="P:ComLib.IMessages.MessageMap">
            <summary>
            Internal map of the key/value messages.
            </summary>
        </member>
        <member name="T:ComLib.IErrors">
            <summary>
            Interface for message storage for errors.
            </summary>
        </member>
        <member name="P:ComLib.IErrors.ErrorList">
            <summary>
            Get/set the list of messages.
            </summary>
        </member>
        <member name="P:ComLib.IErrors.ErrorMap">
            <summary>
            Get/set the list of mappings.
            </summary>
        </member>
        <member name="T:ComLib.Messages">
            <summary>
            Class to store messages by key/value and by a simple list of messages.
            </summary>
        </member>
        <member name="F:ComLib.Messages._messageMap">
            <summary>
            The internal map of key/value based messages.
            </summary>
        </member>
        <member name="F:ComLib.Messages._messageList">
            <summary>
            Internal list of messages.
            </summary>
        </member>
        <member name="M:ComLib.Messages.Add(System.String,System.String)">
            <summary>
            Adds an error associated with the key.
            </summary>
            <param name="key">The key.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:ComLib.Messages.Add(System.String)">
            <summary>
            Adds the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ComLib.Messages.Each(System.Action{System.String,System.String})">
            <summary>
            Iterates over the error map and calls the callback
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ComLib.Messages.EachFull(System.Action{System.String})">
            <summary>
            Iterates over the error map and error list and calls the callback.
            Errormap entries are combined.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ComLib.Messages.Message">
            <summary>
            Builds a full error message of error map and list using NewLine as a separator between errors.
            </summary>
            <returns>Full error message.</returns>
        </member>
        <member name="M:ComLib.Messages.Message(System.String)">
            <summary>
            Builds a complete error message using the supplied separator for each error.
            </summary>
            <param name="separator">Separator to use.</param>
            <returns>Full error message with lines separated.</returns>
        </member>
        <member name="M:ComLib.Messages.Clear">
            <summary>
            Clears all the errors.
            </summary>
        </member>
        <member name="M:ComLib.Messages.On(System.String)">
            <summary>
            Gets the error on the specified error key.
            </summary>
            <param name="key">The key.</param>
            <returns>Message corresponding to the key.</returns>
        </member>
        <member name="M:ComLib.Messages.On">
            <summary>
            Gets all the errors
            </summary>
            <returns>List of all errors.</returns>
        </member>
        <member name="M:ComLib.Messages.CopyTo(ComLib.IMessages)">
            <summary>
            Copies all messages from this instance over to the supplied instance.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="P:ComLib.Messages.Count">
            <summary>
            Gets the number of errors.
            </summary>
            <value>The number of errors.</value>
        </member>
        <member name="P:ComLib.Messages.HasAny">
            <summary>
            Gets a value indicating whether this instance has any errors.
            </summary>
            <value><c>true</c> if this instance has any errors; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Messages.MessageList">
            <summary>
            Gets or sets the error list.
            </summary>
            <value>The error list.</value>
        </member>
        <member name="P:ComLib.Messages.MessageMap">
            <summary>
            Gets or sets the error map.
            </summary>
            <value>The error map.</value>
        </member>
        <member name="T:ComLib.Errors">
            <summary>
            A message storage class for storing errors by both simple string and by key/value string pairs.
            </summary>
        </member>
        <member name="P:ComLib.Errors.ErrorList">
            <summary>
            Gets or sets the error list.
            </summary>
            <value>The error list.</value>
        </member>
        <member name="P:ComLib.Errors.ErrorMap">
            <summary>
            Gets or sets the error map.
            </summary>
            <value>The error map.</value>
        </member>
        <member name="T:ComLib.Converter">
            <summary>
            Converter class for basic types.
            </summary>
        </member>
        <member name="M:ComLib.Converter.ConvertObj``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T">Type of object to convert.</typeparam>
            <param name="input">Object to convert.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:ComLib.Converter.ConvertTo``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T">Type of object whose type is to be converted.</typeparam>
            <param name="input">Object whose type is to be converted.</param>
            <returns>Type of converted object.</returns>
        </member>
        <member name="M:ComLib.Converter.ConvertTo(System.Type,System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <param name="type">Type of object whose type is to be converted.</param>
            <param name="input">Object whose type is to be converted.</param>
            <returns>Type of converted object.</returns>
        </member>
        <member name="M:ComLib.Converter.CanConvertTo``1(System.String)">
            <summary>
            Checks whether or not the object can be converted to a type.
            </summary>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the object can be converted to a type.</returns>
        </member>
        <member name="M:ComLib.Converter.CanConvertTo(System.Type,System.String)">
            <summary>
            Checks whether or not the object can be converted to a type.
            </summary>
            <param name="type">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the object can be converted to a type.</returns>
        </member>
        <member name="M:ComLib.Converter.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Check to see if can convert to appropriate type
            </summary>
            <param name="propInfo">Information of property to check.</param>
            <param name="val">Object to convert to.</param>
            <returns>True if the object can be converted to the property type.</returns>
        </member>
        <member name="M:ComLib.Converter.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Checks whether or not the string can be converted to a propert type.
            </summary>
            <param name="propInfo">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the string can be converted.</returns>
        </member>
        <member name="M:ComLib.Converter.ConvertToSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Convert the val from string type to the same time as the property.
            </summary>
            <param name="propInfo">Property representing the type to convert to</param>
            <param name="val">val to convert</param>
            <returns>converted value with the same time as the property</returns>
        </member>
        <member name="M:ComLib.Converter.IsSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Determine if the type of the property and the val are the same type.
            </summary>
            <param name="propInfo">Property info to check.</param>
            <param name="val">Value to check against property info.</param>
            <returns>True if the property and the value are of the same type.</returns>
        </member>
        <member name="T:ComLib.ScannerSettings">
            <summary>
            Settings for the token reader class.
            </summary>
        </member>
        <member name="F:ComLib.ScannerSettings.EscapeChar">
            <summary>
            Char used to escape.
            </summary>
        </member>
        <member name="F:ComLib.ScannerSettings.Tokens">
            <summary>
            Tokens
            </summary>
        </member>
        <member name="F:ComLib.ScannerSettings.WhiteSpaceTokens">
            <summary>
            White space tokens.
            </summary>
        </member>
        <member name="T:ComLib.ScanTokenResult">
            <summary>
            The result of a scan for a specific token
            </summary>
        </member>
        <member name="M:ComLib.ScanTokenResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="success"></param>
            <param name="text"></param>
        </member>
        <member name="F:ComLib.ScanTokenResult.Success">
            <summary>
            Whether or not the token was properly present
            </summary>
        </member>
        <member name="F:ComLib.ScanTokenResult.Text">
            <summary>
            The text of the token.
            </summary>
        </member>
        <member name="F:ComLib.ScanTokenResult.Lines">
            <summary>
            Number of lines parsed.
            </summary>
        </member>
        <member name="T:ComLib.Scanner">
            <summary>
            This class implements a token reader.
            </summary>
        </member>
        <member name="M:ComLib.Scanner.#ctor">
            <summary>
            Initialize this instance with defaults.
            </summary>
        </member>
        <member name="M:ComLib.Scanner.#ctor(System.String)">
            <summary>
            Initialize with text to parse.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ComLib.Scanner.#ctor(System.String,System.Char[])">
            <summary>
            Initialize with text to parse.
            </summary>
            <param name="text">The text to scan</param>
            <param name="reservedChars">Reserved chars</param>
        </member>
        <member name="M:ComLib.Scanner.#ctor(System.String,System.Char,System.Char[],System.Char[])">
            <summary>
            Initialize this instance with supplied parameters.
            </summary>
            <param name="text">Text to use.</param>
            <param name="escapeChar">Escape character.</param>
            <param name="tokenChars">Special characters</param>
            <param name="whiteSpaceTokens">Array with whitespace tokens.</param>
        </member>
        <member name="M:ComLib.Scanner.Init(System.String,ComLib.ScannerSettings)">
            <summary>
            Initialize using settings.
            </summary>
            <param name="text">Text to use.</param>
            <param name="settings">Instance with token reader settings.</param>
        </member>
        <member name="M:ComLib.Scanner.Init(System.String,System.Char,System.Char[],System.Char[])">
            <summary>
            Initialize using the supplied parameters.
            </summary>
            <param name="text">Text to read.</param>
            <param name="escapeChar">Escape character.</param>
            <param name="tokens">Array with tokens.</param>
            <param name="whiteSpaceTokens">Array with whitespace tokens.</param>
        </member>
        <member name="M:ComLib.Scanner.RegisterWhiteSpace(System.Collections.Generic.IDictionary{System.Char,System.Char})">
            <summary>
            Store the white space chars.
            </summary>
            <param name="whitespaceChars">Dictionary with whitespace characters.</param>
        </member>
        <member name="M:ComLib.Scanner.Reset">
            <summary>
            Reset reader for parsing again.
            </summary>
        </member>
        <member name="M:ComLib.Scanner.PeekChar">
            <summary>
            Returns the char at current position + 1.
            </summary>
            <returns>Next char or string.empty if end of text.</returns>
        </member>
        <member name="M:ComLib.Scanner.PeekChars(System.Int32)">
            <summary>
            Returns the chars starting at current position + 1 and
            including the <paramref name="count"/> number of characters.
            </summary>
            <param name="count">Number of characters.</param>
            <returns>Range of chars as string or string.empty if end of text.</returns>
        </member>
        <member name="M:ComLib.Scanner.PeekChar(System.Int32)">
            <summary>
            Returns the nth char from the current char index
            </summary>
            <param name="countFromCurrentCharIndex">Number of characters from the current char index</param>
            <returns>Single char as string</returns>
        </member>
        <member name="M:ComLib.Scanner.PeekLine">
            <summary>
            Peeks at the string all the way until the end of line.
            </summary>
            <returns>Current line.</returns>
        </member>
        <member name="M:ComLib.Scanner.ConsumeChar">
            <summary>
            Advance and consume the current current char without storing 
            the char in the additional buffer for undo.
            </summary>
        </member>
        <member name="M:ComLib.Scanner.ConsumeChars(System.Int32)">
            <summary>
            Consume the next <paramref name="count"/> chars without
            storing them in the additional buffer for undo.
            </summary>
            <param name="count">Number of characters to consume.</param>
        </member>
        <member name="M:ComLib.Scanner.ConsumeWhiteSpace">
            <summary>
            Consume the whitespace without reading anything.
            </summary>
        </member>
        <member name="M:ComLib.Scanner.ConsumeWhiteSpace(System.Boolean)">
            <summary>
            Consume all white space.
            This works by checking the next char against
            the chars in the dictionary of chars supplied during initialization.
            </summary>
            <param name="readFirst">True to read a character
            before consuming the whitespace.</param>
        </member>
        <member name="M:ComLib.Scanner.ConsumeWhiteSpace(System.Boolean,System.Boolean)">
            <summary>
            Consume all white space.
            This works by checking the next char against
            the chars in the dictionary of chars supplied during initialization.
            </summary>
            <param name="readFirst">True to read a character
            before consuming the whitepsace.</param>
            <param name="setPosAfterWhiteSpace">True to move position to after whitespace</param>
        </member>
        <member name="M:ComLib.Scanner.ConsumeNewLine">
            <summary>
            Consume new line.
            </summary>
        </member>
        <member name="M:ComLib.Scanner.ConsumeToNewLine(System.Boolean)">
            <summary>
            Read text up to the eol.
            </summary>
            <returns>String read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ConsumeUntil(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Consume until the chars found.
            </summary>
            <param name="pattern">The pattern to consume chars to.</param>
            <param name="includePatternInConsumption">Wether or not to consume the pattern as well.</param>
            <param name="movePastEndOfPattern">Whether or not to move to the ending position of the pattern</param>
            <param name="moveToStartOfPattern">Whether or not to move to the starting position of the pattern</param>
        </member>
        <member name="M:ComLib.Scanner.ConsumeNewLines">
            <summary>
            Consume New Lines.
            </summary>
        </member>
        <member name="M:ComLib.Scanner.MoveChars(System.Int32)">
            <summary>
            Moves forward by count chars.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ComLib.Scanner.ReadBackChar">
            <summary>
            Read back the last char and reset
            </summary>
        </member>
        <member name="M:ComLib.Scanner.ReadBackChar(System.Int32)">
            <summary>
            Unwinds the reader by <paramref name="count"/> chars.
            </summary>
            <param name="count">Number of characters to read.</param>
        </member>
        <member name="M:ComLib.Scanner.ReadChar">
            <summary>
            Read the next char.
            </summary>
            <returns>Character read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadChars(System.Int32)">
            <summary>
            Read the next <paramref name="count"/> number of chars.
            </summary>
            <param name="count">Number of characters to read.</param>
            <returns>Characters read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadToEol">
            <summary>
            Read text up to the eol.
            </summary>
            <returns>String read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadTokenUntil(System.Char[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            ReadToken until one of the endchars is found
            </summary>
            <param name="endChars">List of possible end chars which halts reading further.</param>
            <param name="includeEndChar">True to include end character.</param>
            <param name="advanceFirst">True to advance before reading.</param>
            <param name="readPastEndChar">True to read past the end character.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scanner.ReadToken(System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Read a token.
            </summary>
            <param name="endChar">Ending character.</param>
            <param name="escapeChar">Escape character.</param>
            <param name="includeEndChar">True to include end character.</param>
            <param name="advanceFirst">True to advance before reading.</param>
            <param name="expectEndChar">True to expect an end charachter.</param>
            <param name="readPastEndChar">True to read past the end character.</param>
            <returns>Contens of token read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadString(System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Read token until endchar
            </summary>
            <param name="quoteChar">char representing quote ' or "</param>
            <param name="escapeChar">Escape character for quote within string.</param>
            <param name="advanceFirst">True to advance position first before reading string.</param>
            <param name="setPosAfterToken">True to move position to end quote, otherwise past end quote.</param>
            <returns>Contents of token read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadWord(System.Boolean,System.Boolean)">
            <summary>
            Reads a word which must not have space in it and must have space/tab before and after
            </summary>
            <param name="advanceFirst">Whether or not to advance position first</param>
            <param name="setPosAfterToken">True to move position to end space, otherwise past end space.</param>
            <returns>Contents of token read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadId(System.Boolean,System.Boolean)">
            <summary>
            Reads an identifier where legal chars for the identifier are [$ . _ a-z A-Z 0-9]
            </summary>
            <param name="advanceFirst"></param>
            <param name="setPosAfterToken">True to move position to after id, otherwise 2 chars past</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scanner.ReadNumber(System.Boolean,System.Boolean)">
            <summary>
            Reads a number +/-?[0-9]*.?[0-9]*
            </summary>
            <param name="advanceFirst">Whether or not to advance position first</param>
            <param name="setPosAfterToken">True to move position to end space, otherwise past end space.</param>
            <returns>Contents of token read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadLine(System.Boolean,System.Boolean)">
            <summary>
            Reads entire line from curr position
            </summary>
            <param name="advanceFirst">Whether or not to advance curr position first </param>
            <param name="setPosAfterToken">Whether or not to move curr position to starting of new line or after</param>
            <returns>String read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadUntilChars(System.Boolean,System.Char,System.Char,System.Boolean)">
            <summary>
            Reads until the 2 chars are reached.
            </summary>
            <param name="advanceFirst">Whether or not to advance curr position first </param>
            <param name="first">The first char expected</param>
            <param name="second">The second char expected</param>
            <param name="setPosAfterToken">Whether or not to advance to position after chars</param>
            <returns>String read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadLinesUntilChars(System.Boolean,System.Char,System.Char,System.Boolean)">
            <summary>
            Reads until the 2 chars are reached.
            </summary>
            <param name="advanceFirst">Whether or not to advance curr position first </param>
            <param name="first">The first char expected</param>
            <param name="second">The second char expected</param>
            <param name="moveToEndChar">Whether or not to advance to last end char ( second char ) or move past it</param>
            <returns>String read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadTokenUntil(System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Read token until endchar
            </summary>
            <param name="endChar">Ending character.</param>
            <param name="escapeChar">Escape character.</param>
            <param name="advanceFirst">True to advance before reading.</param>
            <param name="expectEndChar">True to expect an end charachter.</param>
            <param name="includeEndChar">True to include an end character.</param>
            <param name="moveToEndChar">True to move to the end character.</param>
            <param name="readPastEndChar">True to read past the end character.</param>
            <returns>Contents of token read.</returns>
        </member>
        <member name="M:ComLib.Scanner.Expect(System.Char)">
            <summary>
            Determines whether the current character is the expected one.
            </summary>
            <param name="charToExpect">Character to expect.</param>
            <returns>True if the current character is the expected one.</returns>
        </member>
        <member name="M:ComLib.Scanner.CurrentCharIndex">
            <summary>
            Current position in text.
            </summary>
            <returns>Current character index.</returns>
        </member>
        <member name="M:ComLib.Scanner.IsToken">
            <summary>
            Determine if current char is token.
            </summary>
            <returns>True if the current char is a token.</returns>
        </member>
        <member name="M:ComLib.Scanner.IsToken(System.String,System.Boolean)">
            <summary>
            Whether or not the current sequence of chars matches the token supplied.
            </summary>
            <param name="token"></param>
            <param name="ignoreCase">Whether or not to check against case.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scanner.IsEscape">
            <summary>
            Determine if current char is escape char.
            </summary>
            <returns>True if the current char is an escape char.</returns>
        </member>
        <member name="M:ComLib.Scanner.IsEnd">
            <summary>
            Determine if the end of the text input has been reached.
            </summary>
            <returns>True if the end of the stream has been reached.</returns>
        </member>
        <member name="M:ComLib.Scanner.IsAtEnd">
            <summary>
            Determine if at last char.
            </summary>
            <returns>True if the last character is the current character.</returns>
        </member>
        <member name="M:ComLib.Scanner.IsEol">
            <summary>
            Determine if current char is EOL.
            </summary>
            <returns>True if the current character is an eol.</returns>
        </member>
        <member name="M:ComLib.Scanner.IsWhiteSpace(System.Collections.IDictionary)">
            <summary>
            Determine if current char is whitespace.
            </summary>
            <param name="whitespaceChars">Dictionary with whitespace chars.</param>
            <returns>True if the current character is a whitespace.</returns>
        </member>
        <member name="M:ComLib.Scanner.IsWhiteSpace">
            <summary>
            Determine if current char is whitespace.
            </summary>
            <returns>True if the current character is a whitespace.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadChars(System.Func{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Reads a word which must not have space in it and must have space/tab before and after
            </summary>
            <param name="continueReadCheck">Callback function to determine whether or not to continue reading</param>
            <param name="advanceFirst">Whether or not to advance position first</param>
            <param name="setPosAfterToken">True to move position to end space, otherwise past end space.</param>
            <returns>Contents of token read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ReadChars(System.Collections.Generic.IDictionary{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Reads a word which must not have space in it and must have space/tab before and after
            </summary>
            <param name="validChars">Dictionary to check against valid chars.</param>
            <param name="advanceFirst">Whether or not to advance position first</param>
            <param name="setPosAfterToken">True to move position to end space, otherwise past end space.</param>
            <returns>Contents of token read.</returns>
        </member>
        <member name="M:ComLib.Scanner.ToDictionary``1(System.Collections.Generic.IList{``0})">
            <summary>
            Check if all of the items in the collection satisfied by the condition.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
            <param name="items">List of items.</param>
            <returns>Dictionary of items.</returns>
        </member>
        <member name="P:ComLib.Scanner.Position">
            <summary>
            The current position.
            </summary>
        </member>
        <member name="P:ComLib.Scanner.CurrentChar">
            <summary>
            Current char.
            </summary>
            <returns>Current character.</returns>
        </member>
        <member name="P:ComLib.Scanner.PreviousChar">
            <summary>
            Get the previous char that was read in.
            </summary>
        </member>
        <member name="P:ComLib.Scanner.PreviousCharAny">
            <summary>
            Get the previous char that is part of the input and which may be an escape char.
            </summary>
        </member>
        <member name="T:ComLib.Lang.IdToken">
            <summary>
            Operator as token
            </summary>
        </member>
        <member name="T:ComLib.Lang.Token">
            <summary>
            Token class
            </summary>
        </member>
        <member name="P:ComLib.Lang.Token.LineNumber">
            <summary>
            Line number of the token
            </summary>
        </member>
        <member name="P:ComLib.Lang.Token.CharPosition">
            <summary>
            Char position of the token
            </summary>
        </member>
        <member name="P:ComLib.Lang.Token.Text">
            <summary>
            Text of the token
            </summary>
        </member>
        <member name="P:ComLib.Lang.Token.Value">
            <summary>
            Value of the token.
            </summary>
        </member>
        <member name="P:ComLib.Lang.Token.IsKeyWord">
            <summary>
            Whether or not this ia keyword in the lang
            </summary>
        </member>
        <member name="M:ComLib.Lang.IdToken.#ctor(System.String)">
            <summary>
            Initialize
            </summary>
            <param name="op"></param>
        </member>
        <member name="T:ComLib.Lang.BlockStatement">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="T:ComLib.Lang.Statement">
            <summary>
            Base class for statements.
            </summary>
        </member>
        <member name="M:ComLib.Lang.Statement.Execute">
            <summary>
            Executes the statement.
            </summary>
        </member>
        <member name="F:ComLib.Lang.BlockStatement._statements">
            <summary>
            List of statements
            </summary>
        </member>
        <member name="P:ComLib.Lang.BlockStatement.Statements">
            <summary>
            Public access to statments.
            </summary>
        </member>
        <member name="T:ComLib.Lang.ConditionalBlockStatement">
            <summary>
            Conditional based block statement used in ifs/elses/while
            </summary>
        </member>
        <member name="M:ComLib.Lang.ConditionalBlockStatement.#ctor(ComLib.Lang.Expression,System.Collections.Generic.List{ComLib.Lang.Statement})">
            <summary>
            Initialize
            </summary>
            <param name="condition"></param>
            <param name="statements"></param>
        </member>
        <member name="F:ComLib.Lang.ConditionalBlockStatement.Condition">
            <summary>
            The condition to check.
            </summary>
        </member>
        <member name="T:ComLib.Lang.FunctionCallExpression">
            <summary>
            Function call expression data.
            </summary>
        </member>
        <member name="T:ComLib.Lang.Expression">
            <summary>
            Base class for Expressions
            </summary>
        </member>
        <member name="M:ComLib.Lang.Expression.Evaluate">
            <summary>
            Evaluate
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Expression.EvaluateAs``1">
            <summary>
            Evaluate and return as datatype T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:ComLib.Lang.FunctionCallExpression.Name">
            <summary>
            Name of the function.
            </summary>
        </member>
        <member name="F:ComLib.Lang.FunctionCallExpression.ParamList">
            <summary>
            List of arguments.
            </summary>
        </member>
        <member name="F:ComLib.Lang.FunctionCallExpression.ParamMap">
            <summary>
            Arguments to the function.
            </summary>
        </member>
        <member name="M:ComLib.Lang.FunctionCallExpression.Evaluate">
            <summary>
            Evauate and run the function
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.IConfigSource">
            <summary>
            Configuration source interface for loading/viewing/saving settings.
            </summary>
        </member>
        <member name="T:ComLib.IConfigSection">
            <summary> 
            Base class for config settings. 
            This stores settings in 
            1. At the root level ( similiar to AppSettings ). 
            2. At a section level ( similar to GetSection("SectionName") ); 
            </summary> 
            <remarks> 
            The following properties are associated with 
            storing settings at the root level. 
            1. Count 
            </remarks> 
        </member>
        <member name="M:ComLib.IConfigSection.Get``1(System.String)">
            <summary>
            Get typed value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.GetDefault``1(System.String,``0)">
            <summary>
            Get key value if preset, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.Get(System.String,System.String)">
            <summary>
            Get the section's key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.Get``1(System.String,System.String)">
            <summary>
            Get the section's key's specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get section/key value if preset, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.GetSection(System.String)">
            <summary>
            Get the section with the name specified.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.GetSection(System.String,System.Int32)">
            <summary>
            Get sectionlist with the specified name.
            </summary>
            <param name="sectionName"></param>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.Contains(System.String,System.String)">
            <summary>
            Checks whether or not the key exists in the section.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IConfigSection.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add to value to the section/key combination.
            </summary>
            <param name="sectionName">"ApplicationSettings"</param>
            <param name="key">PageSize</param>
            <param name="val">15</param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.IConfigSection.Add(System.String,System.String,System.Object)">
            <summary>
            Add section key/value item.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.IConfigSection.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add to value to the section/key combination.
            </summary>
            <param name="key">PageSize</param>
            <param name="val">15</param>
            <param name="overWrite"></param>
        </member>
        <member name="P:ComLib.IConfigSection.Name">
            <summary>
            The name of the this config section.
            </summary>
        </member>
        <member name="P:ComLib.IConfigSection.Item(System.String,System.String)">
            <summary>
            Get the section key value using the indexer.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.IConfigSection.Sections">
            <summary>
            Get the names of the sections.
            </summary>
        </member>
        <member name="T:ComLib.IConfigSourceBase">
            <summary>
            Base interface for a configuration source.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceBase.Init">
            <summary>
            Called after construction
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceBase.Load">
            <summary>
            Load the config settings from the underlying datasource.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceBase.Save">
            <summary>
            Save the config settings to the underlying datasource.
            </summary>
        </member>
        <member name="E:ComLib.IConfigSourceBase.OnConfigSourceChanged">
            <summary>
            Event handler when the configuration store changes.
            </summary>
        </member>
        <member name="P:ComLib.IConfigSourceBase.SourcePath">
            <summary>
            Name of the source.
            This cane be the file path.
            </summary>
        </member>
        <member name="T:ComLib.IConfigSourceDynamic">
            <summary>
            Base interface for a configuration source
            with dynamic events.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.Load(System.Object)">
            <summary>
            Load the config settings from the underlying datasource via full life-cycle.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.Save(System.Object)">
            <summary>
            Save the config settings to the underlying datasource via full life-cycle.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.OnBeforeLoad">
            <summary>
            Called before loading.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.OnLoad(System.Object)">
            <summary>
            Called to load the config values.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.OnAfterLoad">
            <summary>
            Called after loading.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.OnBeforeSave">
            <summary>
            Called before saving.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.OnSave(System.Object)">
            <summary>
            Called to save the values.
            </summary>
        </member>
        <member name="M:ComLib.IConfigSourceDynamic.OnAfterSave">
            <summary>
            Called after saving.
            </summary>
        </member>
        <member name="T:ComLib.ValidationSupport.ValidatorFluent">
            <summary>
            This class implements a fluent-style validator.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
            <param name="typeToCheck">Type to check.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.#ctor(System.Type,ComLib.IValidationResults)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="typeToCheck">Type to check.</param>
            <param name="errors">Validation results.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.#ctor(System.Type,System.Boolean,ComLib.IValidationResults)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="typeToCheck">Type to check.</param>
            <param name="appendTypeToError">True to append the type to an error.</param>
            <param name="errors">Validation results.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Check(System.Object)">
            <summary>
            Set the validation target object.
            </summary>
            <param name="target">The target object.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Check(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Set the validation expression.
            </summary>
            <param name="exp">Validation expression.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Check(System.String,System.Object)">
            <summary>
            Sets the property name and the target object.
            </summary>
            <param name="propName">Property name.</param>
            <param name="target">Target object.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.If(System.Boolean)">
            <summary>
            Sets a check condition.
            </summary>
            <param name="isOkToCheckNext">Check condition.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Is(System.Object)">
            <summary>
            Validates against a specified value.
            </summary>
            <param name="val">Value to validate against.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsNot(System.Object)">
            <summary>
            Determines if the validation is different than the specified value.
            </summary>
            <param name="val">Specified value.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsNull">
            <summary>
            Determines if the value is null.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsNotNull">
            <summary>
            Determines if the value is not null.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.In``1(System.Object[])">
            <summary>
            Determines if the value is in a list of values.
            </summary>
            <typeparam name="T">Type of values in list.</typeparam>
            <param name="vals">List of values.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.NotIn``1(System.Object[])">
            <summary>
            Determines if the value is not in a list of values.
            </summary>
            <typeparam name="T">Type of values in list.</typeparam>
            <param name="vals">List of values.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Matches(System.String)">
            <summary>
            Determines if a regular expression produces a match.
            </summary>
            <param name="regex">Regular expression.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsBetween(System.Int32,System.Int32)">
            <summary>
            Determines if a value is between a minimum and a maximum.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Contains(System.String)">
            <summary>
            Determines if a value contains a specified string.
            </summary>
            <param name="val">Specified string.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.NotContain(System.String)">
            <summary>
            Determines if a value does not contain a specified string.
            </summary>
            <param name="val">Specified string.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Min(System.Int32)">
            <summary>
            Determines if a value is equal or above a specified minimum.
            </summary>
            <param name="min">Specified minimum.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.Max(System.Int32)">
            <summary>
            Determines if a value is equal or below a specified maximum.
            </summary>
            <param name="max">Specified maximum.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsTrue">
            <summary>
            Determines if a value is true.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsFalse">
            <summary>
            Determines if a value is false.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsAfterToday">
            <summary>
            Determines if a day is after today.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsBeforeToday">
            <summary>
            Determines if a day is before today.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsAfter(System.DateTime)">
            <summary>
            Determines if a day is after a specified date.
            </summary>
            <param name="date">Specified date.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsBefore(System.DateTime)">
            <summary>
            Determines if a day is before a specified date.
            </summary>
            <param name="date">Specified date.</param>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsValidEmail">
            <summary>
            Determines if a value is a valid e-mail.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsValidPhoneUS">
            <summary>
            Determines if a value is a valid US phone.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsValidUrl">
            <summary>
            Determines if a value is a valid URL.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.IsValidZip">
            <summary>
            Determines if a value is a valid zip code.
            </summary>
            <returns>The current instance of this class.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorFluent.End">
            <summary>
            Returns the current instance of this class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.ValidationSupport.ValidatorFluent.HasErrors">
            <summary>
            True if there are errors.
            </summary>
        </member>
        <member name="P:ComLib.ValidationSupport.ValidatorFluent.Errors">
            <summary>
            Get/set the validation results.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.UserIdentity">
            <summary>
            Custom Identity class
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserIdentity.#ctor">
            <summary>
            Create new instance using default initialization,
            authenticated = false, username = string.Empty
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserIdentity.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Create new instance using supplied values.
            </summary>
            <param name="id"></param>
            <param name="userName"></param>
            <param name="authenticationType"></param>
            <param name="isAuthenticated"></param>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.AuthenticationType">
            <summary>
            Get the authentication type.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.IsAuthenticated">
            <summary>
            Indicates if user is authenticated.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.Name">
            <summary>
            Return the username.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.UserId">
            <summary>
            Get the user id.
            </summary>
        </member>
        <member name="T:ComLib.Locale.ILocalizationResourceProvider">
            <summary>
            Simple interface for a localized resource manager.
            </summary>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String)">
            <summary>
            Get the localized string given the key name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String,System.String)">
            <summary>
            Get the localized string given the key name, if it doesn't exist, use the default value.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get the localized string given the key name and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Get the localized string given the key name and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <param name="defaultName"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Locale.ILocalizationResourceProvider.Item(System.String)">
            <summary>
            Get / set the localized resource string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.IRepositoryQueryable">
            <summary>
            Repository that is Queryable withOUT CRUD/persistance methods.
            This allows some basic functionality across any table, regardless
            of the entities it stores.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IRepositoryConfigurable">
            <summary>
            Interface that holds the configuration of a repository.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IRepositoryConfigurable.Database">
            <summary>
            Gets or sets the db helper.
            </summary>
            <value>The helper.</value>
        </member>
        <member name="P:ComLib.Entities.IRepositoryConfigurable.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:ComLib.Entities.IRepositoryConfigurable.ConnectionString">
            <summary>
            Gets the connection STR.
            </summary>
            <value>The connection STR.</value>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.AddNamedFilter(System.String,ComLib.Data.IQuery)">
            <summary>
            Add named filter.
            e.g. "Published last week" => Criteria.Where("CreateDate").Between(1.Week.Ago, DateTime.Now)
            </summary>
            <param name="filterName">Name of filter.</param>
            <param name="criteria">Filter criteria.</param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Sum(System.String)">
            <summary>
            Gets the sum of values in the column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Sum of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Sum(System.String,ComLib.Data.IQuery)">
            <summary>
            Gets the sum of the values in the column using criteria supplied.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="criteria">Criteria for inclusion.</param>
            <returns>Sum of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Sum(System.String,System.String)">
            <summary>
            Gets the sum of the values in the column using the named filter
            </summary>
            <param name="columnName">Column name.</param>
            <param name="namedFilter">Criteria for inclusion.</param>
            <returns>Sum of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Min(System.String)">
            <summary>
            Gets the minimum of the values in the column
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Min of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Min(System.String,ComLib.Data.IQuery)">
            <summary>
            Gets the minimum of the values in the column using criteria
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="criteria">The criteria to filter on first</param>
            <returns>Min of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Min(System.String,System.String)">
            <summary>
            Gets the minimum of the values in the column using the named filter.
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="namedFilter">The name of the filter</param>
            <returns>Min of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Max(System.String)">
            <summary>
            Gets the maximum of the values in the column
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Max of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Max(System.String,ComLib.Data.IQuery)">
            <summary>
            Gets the maximum of the values in the column using the criteria.
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="criteria">The criteria to filter on first</param>
            <returns>Max of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Max(System.String,System.String)">
            <summary>
            Gets the maximum of the values in the column using the named filter.
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="namedFilter">The name of the filter</param>
            <returns>Max of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Avg(System.String)">
            <summary>
            Gets the avergage of the values in the column
            </summary>
            <param name="columnName">The name of the column</param>
            <returns>Average of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Avg(System.String,ComLib.Data.IQuery)">
            <summary>
            Gets the average of the values in the column using the criteria
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="criteria">The criteria to filter on first</param>
            <returns>Average of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Avg(System.String,System.String)">
            <summary>
            Gets the average of the values in the column using the named filter.
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="namedFilter">The name of the filter</param>
            <returns>Average of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Count">
            <summary>
            Gets the total items of records in this repository
            </summary>
            <returns>Number of values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Count(ComLib.Data.IQuery)">
            <summary>
            Gets the number of items matching the criteria
            </summary>
            <param name="criteria">The criteria to apply to get count</param>
            <returns>Number of matching values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Count(System.String)">
            <summary>
            Gets the number of items using the named filter
            </summary>
            <param name="namedFilter">The name of the filter</param>
            <returns>Number of matching values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.CountBySql(System.String)">
            <summary>
            Gets the number of items using the sql text supplied as the search criteria.
            </summary>
            <param name="sql">The sql to use as the filter</param>
            <returns>Number of matching values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Distinct``1(System.String)">
            <summary>
            Get the distinct values in the column supplied.
            </summary>
            <typeparam name="TVal">Type of value to use.</typeparam>
            <param name="columnName">Column name.</param>
            <returns>List with distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Distinct``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Get the distinct values in the oclumn using the criteria
            </summary>
            <typeparam name="TVal">Type of value to use.</typeparam>
            <param name="columnName">Column name.</param>
            <param name="criteria">Criteria for inclusion.</param>
            <returns>List with distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Distinct``1(System.String,System.String)">
            <summary>
            Get the distinct values in the column using the named filter for search criteria.
            </summary>
            <typeparam name="TVal">Type of value to use.</typeparam>
            <param name="columnName">Column name.</param>
            <param name="namedFilter">Criteria for inclusion.</param>
            <returns>List with distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Group``1(System.String)">
            <summary>
            Get the stored key/value pairs.
            </summary>
            <typeparam name="TGroup">Type of group to use.</typeparam>
            <param name="columnName">Column name.</param>
            <returns>List with key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Group``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Get the stored key/value pairs after applying matching criteria.
            </summary>
            <typeparam name="TGroup">Type of group to use.</typeparam>
            <param name="columnName">Column name.</param>
            <param name="criteria">Criteria for inclusion.</param>
            <returns>List with key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Group``1(System.String,System.String)">
            <summary>
            Get the stored key/value pairs after applying matching criteria.
            </summary>
            <typeparam name="TGroup">Type of group to use.</typeparam>
            <param name="columnName">Column name.</param>
            <param name="namedFilter">Criteria for inclusion.</param>
            <returns>List with key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Group(ComLib.Data.IQuery,System.String[])">
            <summary>
            Get a datatable with stored values based on criteria.
            </summary>
            <param name="criteria">Criteria for inclusion.</param>
            <param name="columnNames">Array with column names to include.</param>
            <returns>Datatable with matching values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.GroupNamedFilter(System.String,System.String[])">
            <summary>
            Get a datatable with stored values based on criteria.
            </summary>
            <param name="namedFilter">Criteria for inclusion.</param>
            <param name="columnNames">Array with column names to include.</param>
            <returns>Datatable with matching values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Any(System.String)">
            <summary>
            Checks whether there are any records that the named filter
            </summary>
            <param name="filtername">Criteria for inclusion.</param>
            <returns>True if there are records matching the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Any(ComLib.Data.IQuery)">
            <summary>
            Chekcs where there are any records that match the criteria filter.
            </summary>
            <param name="criteria">Criteria for inclusion.</param>
            <returns>True if there are records matching the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.AnyBySql(System.String)">
            <summary>
            Get datatable using the sql supplied.
            </summary>
            <param name="sql"></param>
            <returns>True if there are any records matching the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTable">
            <summary>
            Get Table containing all the records.
            </summary>
            <returns>Table with all records.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTable(ComLib.Data.IQuery)">
            <summary>
            Get datatable using the IQuery filter
            </summary>
            <param name="criteria">Criteria for inclusion.</param>
            <returns>Table with all matching records.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTable(System.String)">
            <summary>
            Get datatable using the filtername.
            </summary>
            <param name="filterName">Criteria for inclusion.</param>
            <returns>Table with all matching records.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTableBySql(System.String)">
            <summary>
            Get datatable using the sql filter.
            </summary>
            <param name="sql">SQL filter.</param>
            <returns>Table with all matching records.</returns>
        </member>
        <member name="P:ComLib.Entities.IRepositoryQueryable.TableName">
            <summary>
            The name of the table associated w/ this repository.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IRepositoryQueryable.ParamPrefix">
            <summary>
            Prefix to use for parameterized queries.
            e.g. @ for sql server.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IRepositoryQueryable.NamedFilters">
            <summary>
            Dictionary of named filters/criteria.
            Useful when doing Count("ActiveUsers");
            Or Avg("Rating", "PopularPosts")
            </summary>
        </member>
        <member name="T:ComLib.Reflection.AssemblyUtils">
            <summary>
            Assembly related reflection utils.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.AssemblyUtils.GetInternalFileContent(System.String,System.String)">
            <summary>
            Get the internal template content from the commonlibrary assembly.
            </summary>
            <param name="assemblyFolderPath">"CommonLibrary.Notifications.Templates."</param>
            <param name="fileName">"welcome.html"</param>
            <returns>String with internal template content.</returns>
        </member>
        <member name="T:ComLib.Notifications.INotificationService">
            <summary>
            Notification service
            </summary>
        </member>
        <member name="P:ComLib.Notifications.INotificationService.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.INotificationService.AccountService">
            <summary>
            The account services.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.INotificationService.MessageService">
            <summary>
            Messageing services.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.INotificationAccountService">
            <summary>
            Notification services for account based messages.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.WelcomeNewUser(ComLib.Notifications.NotificationContext)">
            <summary>
            Send welcome email to new user.
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.WelcomeNewUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send welcome email to new user.
            </summary>
            <param name="to">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="firstname">First name of user.</param>
            <param name="username">Username of user.</param>
            <param name="password">Password of user.</param>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.RemindUserPassword(ComLib.Notifications.NotificationContext)">
            <summary>
            Send message to remind user of password.
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.RemindUserPassword(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send remind account/password email to user.
            </summary>
            <param name="to">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="firstname">First name of user.</param>
            <param name="username">Username of user.</param>
            <param name="password">Password of user.</param>
        </member>
        <member name="P:ComLib.Notifications.INotificationAccountService.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.INotificationMessagingService">
            <summary>
            Notification services for other non-account related messaging.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriend(ComLib.Notifications.NotificationContext)">
            <summary>
            Send the website url to a friend.
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriend(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the website url to a friend. 
            </summary>
            <param name="toEmail">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="friendName">Friend's name.</param>
            <param name="fromName">From name.</param>
            <param name="messageFromFriend">Message text.</param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriendPost(ComLib.Notifications.NotificationContext)">
            <summary>
            Send a post to a friend.
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriendPost(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send a post to a friend.
            </summary>
            <param name="toEmail">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="toFirstname">Name of recipient.</param>
            <param name="fromName">Name of sender.</param>
            <param name="messageToFriend">Message text.</param>
            <param name="postTitle">Title of post.</param>
            <param name="postUrl">Title of url.</param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SubmitFeedBack(ComLib.Notifications.NotificationContext)">
            <summary>
            User feedback.
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="P:ComLib.Notifications.INotificationMessagingService.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="T:ComLib.Models.ModelContainer">
            <summary>
            Collection of models.
            </summary>
        </member>
        <member name="T:ComLib.Collections.GenericListBase`1">
            <summary>
            Class to serve as a base class for generic lists.
            This is because the Generic list <see cref="T:System.Collections.Generic.List`1"/>
            is not meant to be extendable."/&gt;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ComLib.Collections.GenericListBase`1._items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.#ctor">
            <summary>
            Creates a new instance of this class
            with an empty list.
            </summary>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.IndexOf(`0)">
            <summary>
            Index of
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Insert(System.Int32,`0)">
            <summary>
            Insert.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Add(`0[])">
            <summary>
            Add a list of models that should be shown in the dashboard on the sidebar.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Add(`0)">
            <summary>
            Add
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Contains(`0)">
            <summary>
            Determines whether an item is
            present in the current list.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>True if item already exists.</returns>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy to array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Remove(`0)">
            <summary>
            Removes the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.GetEnumerator">
            <summary>
            Returns an enumerator to the list.
            </summary>
            <returns>List enumerator.</returns>
        </member>
        <member name="P:ComLib.Collections.GenericListBase`1.Item(System.Int32)">
            <summary>
            Accessor.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.GenericListBase`1.Count">
            <summary>
            Count of items.
            </summary>
        </member>
        <member name="P:ComLib.Collections.GenericListBase`1.IsReadOnly">
            <summary>
            Determine if is read only
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContainer.#ctor">
            <summary>
            Initalize 
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Add(ComLib.Models.Model)">
            <summary>
            Add a single model to collection.
            </summary>
            <param name="model">The model to add.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Add(System.Collections.Generic.IList{ComLib.Models.Model})">
            <summary>
            Add a collection of models.
            </summary>
            <param name="models">List of models to add.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Clear">
            <summary>
            Clear all the values.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Contains(System.String)">
            <summary>
            Determines if the model specified by modelname exists.
            </summary>
            <param name="modelName">The name of the model to check for.</param>
            <returns>True if the model exists.</returns>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Remove(System.String)">
            <summary>
            Remove the model from the container with the specified name.
            </summary>
            <param name="modelName">The name of the model to remove.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Remove(ComLib.Models.Model)">
            <summary>
            Remove the model.
            </summary>
            <param name="model">The instance of the model to remove.</param>
            <returns>True if the model was successfully removed.</returns>
        </member>
        <member name="M:ComLib.Models.ModelContainer.RemoveAt(System.Int32)">
            <summary>
            Remove model at the specified index.
            </summary>
            <param name="index">The index of the model to remove.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.Predicate{ComLib.Models.Model},System.Action{ComLib.Models.Model})">
            <summary>
            Iterates over the models and calls the action lamda if the predicate is true.
            </summary>
            <param name="condition">The predicate to determine if the action is to be called.</param>
            <param name="action">Action to be called.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.String,System.Predicate{ComLib.Models.Model},System.Action{ComLib.Models.Model})">
            <summary>
            Iterates over the models and calls the action lamda if the predicate is true.
            </summary>
            <param name="modelfilter">String with model filter.</param>
            <param name="condition">A predicate to determine if the action is to be called.</param>
            <param name="action">The action to be called.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.Predicate{ComLib.Models.Model},System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model,ComLib.Models.Include},System.Action{ComLib.Models.Model,ComLib.Models.Composition},System.Action{ComLib.Models.Model,ComLib.Models.Relation},System.Action{ComLib.Models.Model,ComLib.Models.Relation})">
            <summary>
            Iterates over the models and calls the action lamda if the predicate is true.
            </summary>
            <param name="condition">The predicate that deterimes if the action is to be called.</param>
            <param name="currentModel">The model to iterate over</param>
            <param name="inheritanceAction">The callback for the inheritance chain for this model.</param>
            <param name="includeAction">The call back for the included models</param>
            <param name="compositionAction">The call back for the composite models.</param>
            <param name="oneToOneRelationCallback">The call back for one to one relations on the model.</param>
            <param name="oneToManyRelationCallback">The call back for the one to many relations on the model.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.String,System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model,ComLib.Models.Include},System.Action{ComLib.Models.Model,ComLib.Models.Composition},System.Action{ComLib.Models.Model,ComLib.Models.Relation},System.Action{ComLib.Models.Model,ComLib.Models.Relation})">
            <summary>
            Iterate over all the properties, includes, compositions of the model.
            </summary>
            <param name="modelName">The model to iterate over</param>
            <param name="inheritanceAction">The callback for the inheritance chain for this model.</param>
            <param name="includeAction">The call back for the included models</param>
            <param name="compositionAction">The call back for the composite models.</param>
            <param name="oneToOneRelationCallback">The call back for one to one relations on the model.</param>
            <param name="oneToManyRelationCallback">The call back for the one to many relations on the model.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.InheritanceFor(System.String)">
            <summary>
            Gets the Inheritance chain for the specified model name.
            </summary>
            <param name="modelName">The model name.</param>
            <returns>A list with the inheritance chain.</returns>
        </member>
        <member name="M:ComLib.Models.ModelContainer.InitInheritanceChain">
            <summary>
            Initialize by storing all the model chain inheritance paths for each model.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.ModelMap">
            <summary>
            Map of all the models.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.AllModels">
            <summary>
            Used to assign a collection of properties at once.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.Settings">
            <summary>
            Settings for the model builder
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.ExtendedSettings">
            <summary>
            Additional settings to make it easy to add new settings dynamically.
            Also allows for inheritance.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.Item(System.Int32)">
            <summary>
            Get / set by index.
            </summary>
            <param name="index">The index to model.</param>
            <returns>Model designated by the index.</returns>
        </member>
        <member name="P:ComLib.Models.ModelContainer.Item(System.String)">
            <summary>
            Get / set by name.
            </summary>
            <param name="name">The model name.</param>
            <returns>Model designated by name.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.CityLookUp">
            <summary>
            Class to provide fast lookup for cities.
            The base class provides lookup by 
            1. City id.
            2. City name.
            
            This class extends the lookup by also being able to lookup
            a city by country id.
            </summary>
            <remarks>
            Instead of storing another set of indexes for cityname, countryId
            This only stores the cityname, countryId
            for duplicate city names.
            </remarks>
        </member>
        <member name="T:ComLib.LocationSupport.LocationLookUpWithCountry`1">
            <summary>
            Class to provide fast lookup for location components (cities and states)
            that have a country id.
            The base class provides lookup by 
            1. id.
            2. name.
            3. name and countryid.
            
            This class extends the lookup by also being able to lookup
            a city by country id.
            </summary>
            <remarks>
            Instead of storing another set of indexes for cityname, countryId
            This only stores the cityname, countryId
            for duplicate city names.
            </remarks>
        </member>
        <member name="T:ComLib.Entities.LookupMulti`1">
            <summary>
            Used to lookup items by both an int and string.
            This is useful when looking up item by Id and Name for example.
            This is the case for some entities such as City/Country.
            
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="F:ComLib.Entities.LookupMulti`1._itemsById1">
            <summary>
            Lookup by ids
            </summary>
        </member>
        <member name="F:ComLib.Entities.LookupMulti`1._itemsById2">
            <summary>
            Lookup by names.
            </summary>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,System.Int32},System.Func{`0,System.String})">
            <summary>
            Initialize w/ lamdas for getting the ids, names.
            </summary>
            <param name="items">List of items to add.</param>
            <param name="idGetter">Retriever for numeric id.</param>
            <param name="strIdGetter">Retriever for string id.</param>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,System.Boolean},System.Func{`0,System.Int32},System.Func{`0,System.String})">
            <summary>
            Initialzie using lamdas for getting the ids and names.
            </summary>
            <param name="items">List of items to add.</param>
            <param name="predicate">Function to determine if item should be added.</param>
            <param name="idGetter">Retriever for numeric id.</param>
            <param name="strIdGetter">Retriever for string id.</param>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.#ctor(System.Collections.Generic.IDictionary{System.Int32,`0},System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Initialize with supplied data.
            </summary>
            <param name="itemsById">Map of ids to items</param>
            <param name="itemsByName">Map of names to items</param>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.ContainsKey(System.Int32)">
            <summary>
            Contains the key.
            </summary>
            <param name="id">Key of item.</param>
            <returns>True if item with key exists.</returns>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.ContainsKey(System.String)">
            <summary>
            Flag to indicate if the key is there.
            </summary>
            <param name="id">Key of item.</param>
            <returns>True if item with key exists.</returns>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.Init(System.Collections.Generic.IList{`0},System.Func{`0,System.Boolean},System.Func{`0,System.Int32},System.Func{`0,System.String},System.Action{`0,System.Int32,System.String})">
            <summary>
            Initialize the lookups by using the 2 id values associated w/ the property names supplied.
            </summary>
            <param name="items">The items to store.</param>
            <param name="predicate">The condition to check to see if it's ok to add a specific item.</param>
            <param name="id1Getter">The lamda to get the int id.</param>
            <param name="strId2Getter">The lamda to get the strin id.</param>
            <param name="callback">Callback to notify calle that item has been added.</param>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Lookup1">
            <summary>
            Get the first lookup.
            </summary>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Lookup2">
            <summary>
            Get the second lookup
            </summary>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Item(System.Int32)">
            <summary>
            Returns the location item given the id.
            </summary>
            <param name="id">Index of item.</param>
            <returns>Item with supplied index.</returns>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Item(System.String)">
            <summary>
            Returns the location item given the full name ("New York") or abbr ( "NY" ).
            </summary>
            <param name="id">Id of item.</param>
            <returns>Corresponding item.</returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpWithCountry`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructor
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpWithCountry`1.Init(System.Collections.Generic.IList{`0},System.Func{`0,System.Boolean},System.Func{`0,System.Int32},System.Func{`0,System.String},System.Action{`0,System.Int32,System.String})">
            <summary>
            Initialize the lookup by :
            1. searching by id
            2. searching by name
            3. searching by name and countryid.
            </summary>
            <param name="items"></param>
            <param name="predicate"></param>
            <param name="id1Getter"></param>
            <param name="strId2Getter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpWithCountry`1.FindByCountry(System.String,System.Int32)">
            <summary>
            Finds the city based on the country id.
            This is because there can be two countries with the same city name.
            e.g. City, Country
                 1. GeorgeTown, USA
                 2. GeorgeTown, Guyana
            </summary>
            <param name="name"></param>
            <param name="countryId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpWithCountry`1.BuildKey(System.String,System.Int32)">
            <summary>
            Creates a key string for a name and an id.
            </summary>
            <param name="name">Name-part of key.</param>
            <param name="id">Id-part of key.</param>
            <returns>String representation of key for supplied information.</returns>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpWithCountry`1.Item(System.String)">
            <summary>
            Allow lookup by both the full state name and it's abbreviation.
            eg. New York or "NY"
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.CityLookUp.#ctor(System.Collections.Generic.IList{ComLib.LocationSupport.City})">
            <summary>
            Constructor
            </summary>
            <param name="cities"></param>
        </member>
        <member name="T:ComLib.LocationSupport.StateLookUp">
            <summary>
            Class to lookup the states
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.StateLookUp.#ctor(System.Collections.Generic.IList{ComLib.LocationSupport.State})">
            <summary>
            Constructor
            </summary>
            <param name="allStates"></param>
        </member>
        <member name="T:ComLib.LocationSupport.CountryLookUp">
            <summary>
            Lookup countries by name or id.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CountryLookUp.#ctor(System.Collections.Generic.IList{ComLib.LocationSupport.Country})">
            <summary>
            Initialize the lookup
            </summary>
            <param name="countries"></param>
        </member>
        <member name="T:ComLib.IO.LicenseArgs">
            <summary>
            Stores command line arguments for LicenseApplier
            </summary>
        </member>
        <member name="T:ComLib.IO.FileCleanArgs">
            <summary>
            Arguments for cleaning directories/files.
            </summary>
        </member>
        <member name="P:ComLib.IO.FileCleanArgs.Recurse">
            <summary>
            Get/set directory recurse flag.
            </summary>
        </member>
        <member name="P:ComLib.IO.FileCleanArgs.Pattern">
            <summary>
            Get/set the file matching pattern.
            </summary>
        </member>
        <member name="P:ComLib.IO.FileCleanArgs.FileType">
            <summary>
            Get/set the type of entities to handle.
            </summary>
        </member>
        <member name="P:ComLib.IO.FileCleanArgs.DryRun">
            <summary>
            Get/set whether execution will happen.
            </summary>
        </member>
        <member name="P:ComLib.IO.FileCleanArgs.RootDir">
            <summary>
            Get/set the root directory.
            </summary>
        </member>
        <member name="P:ComLib.IO.FileCleanArgs.OutputFile">
            <summary>
            Get/set the output file.
            </summary>
        </member>
        <member name="P:ComLib.IO.LicenseArgs.LicenseFile">
            <summary>
            Path to the license file
            </summary>
        </member>
        <member name="P:ComLib.IO.LicenseArgs.CheckLicenseFirst">
            <summary>
            Whether or not the check files for existing license
            </summary>
        </member>
        <member name="T:ComLib.IO.LicenseApplier">
            <summary>
            Applies a license by prepending it to each *.cs file.
            </summary>
        </member>
        <member name="T:ComLib.IO.FileAppBase">
            <summary>
            Abstract class for file-based applications.
            </summary>
        </member>
        <member name="F:ComLib.IO.FileAppBase._rootDirectory">
            <summary>
            Root directory.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileAppBase.InitializeDir(System.String)">
            <summary>
            Initialize the starting/root directory for this command.
            </summary>
            <param name="rootDir"></param>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.#ctor">
            <summary>
            File Cleaner.
            </summary>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.Execute(System.Object)">
            <summary>
            Execute cleaning of files/directories.
            Doesn't actually delete anything but generates a file
            containing the commands.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.HandleDirectory(System.IO.DirectoryInfo)">
            <summary>
            Handle the directory.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.HandleFile(System.IO.FileInfo)">
            <summary>
            Handle the file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:ComLib.Information.IInformationService">
            <summary>
            Information Service
            </summary>
        </member>
        <member name="T:ComLib.IExtensionService`2">
            <summary>
            Interface to be implemented by an extension Service for dynamically loading types from an assembly(s).
            <typeparam name="TAttrib">Type of discovery attribute associated with this instance.</typeparam>
            <typeparam name="TExtension">Type of extension associated with this instance.</typeparam>
            </summary>
        </member>
        <member name="M:ComLib.IExtensionService`2.Load(System.String)">
            <summary>
            Load all the information tasks available.
            </summary>
            <param name="assembliesDelimited">List of assemblies to look into.</param>
        </member>
        <member name="M:ComLib.IExtensionService`2.Create(System.String)">
            <summary>
            Create the instance of the extension.
            </summary>
            <param name="name">Name of the extension.</param>
            <returns>Instance of the extension.</returns>
        </member>
        <member name="M:ComLib.IExtensionService`2.Register(`0)">
            <summary>
            Register the attribute.
            </summary>
            <param name="attrib">Attribute to register.</param>
        </member>
        <member name="M:ComLib.IExtensionService`2.Register(System.String,ComLib.ExtensionMetaData)">
            <summary>
            Register the id.
            </summary>
            <param name="id">Extension id.</param>
            <param name="metadata">Extension metadata.</param>
        </member>
        <member name="M:ComLib.IExtensionService`2.Register(System.Collections.Generic.IList{`0})">
            <summary>
            Register the attributes.
            </summary>
            <param name="attributes">List of attributes to register.</param>
        </member>
        <member name="M:ComLib.IExtensionService`2.Register(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Type,`0}})">
            <summary>
            Register the attributes.
            </summary>
            <param name="pairs">List of attributes to register.</param>
        </member>
        <member name="P:ComLib.IExtensionService`2.Lookup">
            <summary>
            Lookup all the availably dynamically loaded extensions
            </summary>
        </member>
        <member name="M:ComLib.Information.IInformationService.GetInfoTask(System.String,System.Boolean,System.Func{System.String,System.Boolean})">
            <summary>
            Gets the information task after validating that the user has access to it.
            </summary>
            <param name="name"></param>
            <param name="authenticate"></param>
            <param name="authenticator"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManager">
            <summary>
            Exception manager.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.#cctor">
            <summary>
            Initialize the defaults.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Init(ComLib.Exceptions.IErrorManager)">
            <summary>
            Initialize the provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.InitLocalizedManager(System.String,System.Boolean,ComLib.Exceptions.ILocalizedExceptionManager)">
            <summary>
            Initialize the provider.
            </summary>
            <param name="name"></param>
            <param name="isDefault"></param>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Register(System.String,System.Boolean,ComLib.Exceptions.IErrorManager)">
            <summary>
            Register an named exception handler.
            </summary>
            <param name="name"></param>
            <param name="isDefault"></param>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="handler">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="handler"></param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="handler"></param>
            <param name="errors">The error results.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="handler"></param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.InternalHandle(System.Object,System.Exception,System.String,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="handler"></param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception)">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Converts all the <paramref name="args"/>
            to a string to put into the error.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="T:ComLib.Entities.ActionContext`1">
            <summary>
            The action context to pass to ModelService to perform any action on the model.
            This is used to for encapsulation to avoid changing the method signature
            of a ModelService if additional arguments need to be passed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.ActionContext">
            <summary>
            The action context to pass to ModelService to perform any action on the model.
            This is used to for encapsulation to avoid changing the method signature
            of a ModelService if additional arguments need to be passed.
            </summary>
        </member>
        <member name="T:ComLib.IActionContext">
            <summary>
            Interface for action context.
            </summary>
            <remarks>This interface is NOT generic in order to
            use reflection for the EntityManager to be able to easily 
            create an instance where it does NOT know the type of entity.</remarks>
        </member>
        <member name="P:ComLib.IActionContext.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ComLib.IActionContext.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <remarks>This is NOT genericly type. See class remarks.</remarks>
            <value>The item.</value>
        </member>
        <member name="P:ComLib.IActionContext.Items">
            <summary>
            List of models to perform action on.
            </summary>
        </member>
        <member name="P:ComLib.IActionContext.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="P:ComLib.IActionContext.CombineMessageErrors">
            <summary>
            Gets or sets a value indicating whether [combine message errors].
            </summary>
            <value>
            	<c>true</c> if [combine message errors]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.IActionContext.UserName">
            <summary>
            The name of the user used for authentication.
            </summary>
        </member>
        <member name="P:ComLib.IActionContext.Args">
            <summary>
            Additional arguments to supply to context.
            </summary>
        </member>
        <member name="F:ComLib.ActionContext._item">
            <summary>
            The item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="F:ComLib.ActionContext._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:ComLib.ActionContext._args">
            <summary>
            Dictionary with arguments.
            </summary>
        </member>
        <member name="F:ComLib.ActionContext._combineMessagesErrors">
            <summary>
            Combines the messages and errors into a single line.
            </summary>
        </member>
        <member name="M:ComLib.ActionContext.#ctor">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Object)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="item">Item to use.</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.ActionContext"/> class.
            </summary>
            <param name="entity">Item to use.</param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.ActionContext"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Object,ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="item">Item to use.</param>
            <param name="errors">Error collection</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(ComLib.IValidationResults,System.Int32)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="id">Item id.</param>
        </member>
        <member name="P:ComLib.ActionContext.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ComLib.ActionContext.Item">
            <summary>
            Get/set the item.
            </summary>
        </member>
        <member name="P:ComLib.ActionContext.Items">
            <summary>
            Get/set the items.
            </summary>
        </member>
        <member name="P:ComLib.ActionContext.Args">
            <summary>
            Get/set the arguments.
            </summary>
        </member>
        <member name="P:ComLib.ActionContext.UserName">
            <summary>
            The name of user used for authentication purposes.
            </summary>
        </member>
        <member name="P:ComLib.ActionContext.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="P:ComLib.ActionContext.CombineMessageErrors">
            <summary>
            Get/set whether to combine message errors.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(`0)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Entities.ActionContext`1"/> class.
            </summary>
            <param name="entity"></param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Entities.ActionContext`1"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(`0,ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="item"></param>
            <param name="errors">Error collection</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(ComLib.IValidationResults,System.Int32)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="id"></param>
        </member>
        <member name="P:ComLib.Entities.ActionContext`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:ComLib.Entities.ActionContext`1.Items">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceMulti">
            <summary>
            Config source multi - list of multiple config sources.
            Need to hit make this thread safe.
            </summary>
        </member>
        <member name="T:ComLib.ConfigSection">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:ComLib.ConfigSection.#ctor">
            <summary> 
            Allow default constructor. 
            </summary> 
        </member>
        <member name="M:ComLib.ConfigSection.#ctor(System.String)">
            <summary>
            Initialize the config section w/ the name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ComLib.ConfigSection.Get``1(System.String)">
            <summary>
            Get typed root setting by string key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ConfigSection.GetDefault``1(System.String,``0)">
            <summary>
            Validate and return the default value if the key is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ConfigSection.Get(System.String,System.String)">
            <summary>
            Get section key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ConfigSection.Get``1(System.String,System.String)">
            <summary>
            Get typed section key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ConfigSection.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get section/key value if present, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ConfigSection.GetSection(System.String)">
            <summary> 
            Get a section. 
            </summary> 
            <param name="sectionName"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.ConfigSection.GetSection(System.String,System.Int32)">
            <summary> 
            Get a section associated with the specified key at the specified index.
            </summary> 
            <param name="sectionName"></param>
            <param name="ndx"></param>
            <returns></returns> 
        </member>
        <member name="M:ComLib.ConfigSection.Contains(System.String,System.String)">
            <summary>
            Checks whether or not the key exists in the section.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ConfigSection.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add the key value to the section specified.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.ConfigSection.Add(System.String,System.String,System.Object)">
            <summary>
            Add the key value to the section specified.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.ConfigSection.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add key value with option of overwriting value of existing key
            or adding to a list of values associated w/ the same key.
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="P:ComLib.ConfigSection.Name">
            <summary>
            Name of config section.
            </summary>
        </member>
        <member name="P:ComLib.ConfigSection.Item(System.String,System.String)">
            <summary> 
            Get / set the value using both the section name and key. 
            e.g. "globalsettings", "pageSize"
            </summary> 
            <param name="sectionName"></param> 
            <param name="key"></param> 
            <returns></returns> 
        </member>
        <member name="P:ComLib.ConfigSection.Sections">
            <summary>
            The names of all the sections.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.#ctor(System.Collections.Generic.IList{ComLib.IConfigSource})">
            <summary>
            Config source list.
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.configSource_OnConfigSourceChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for on config source changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Init">
            <summary>
            Initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Load">
            <summary>
            Load settings.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Save">
            <summary>
            Save the sources.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Merge">
            <summary>
            Merge all the config sources.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Merge(ComLib.IConfigSection,ComLib.IConfigSection)">
            <summary>
            Merge with config source specified.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="E:ComLib.Configuration.ConfigSourceMulti.OnConfigSourceChanged">
            <summary>
            Notifies subscribers when any configsource was changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceMulti.SourcePath">
            <summary>
            Get the source paths.
            e.g. c:\app\prod.config,c:\app\dev.config
            </summary>
        </member>
        <member name="T:ComLib.Automation.JsLiteToken">
            <summary>
            Constants used when making callbacks while interpreting code
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.FuncCall">
            <summary>
            FuncCall indicator.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.ForLoop">
            <summary>
            For loop indicator
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.Var">
            <summary>
            Variable declaration indicator.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.CommentLineSingle">
            <summary>
            Comment indicator.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.CommentLineMultiple">
            <summary>
            Multi-line comment.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.CommentLineMultipleEnd">
            <summary>
            Multi-line comment.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.If">
            <summary>
            If statement.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.EmptyLine">
            <summary>
            Empty line.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteToken.Other">
            <summary>
            Other line
            </summary>
        </member>
        <member name="T:ComLib.Automation.JsLiteArgs">
            <summary>
            Arguments used in callback methods
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteArgs.TokenType">
            <summary>
            The current token type.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteArgs.Name">
            <summary>
            Name of function called or statement type "var" | "for" | "helloworld" func
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteArgs.LineNumber">
            <summary>
            Current line number being handled.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteArgs.Context">
            <summary>
            Context data
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteArgs.ParamList">
            <summary>
            List of parameters to func call.
            </summary>
        </member>
        <member name="F:ComLib.Automation.JsLiteArgs.ParamMap">
            <summary>
            List of named parameters to func call.
            </summary>
        </member>
        <member name="T:ComLib.Automation.JsLite">
            <summary>
            Very, Very light version of Javascript - JSLite. Non-Lexical parser.
            Features include:
            1. var declarations
            2. if conditions
            3. while loops
            4. for loops
            5. func calls
            </summary>
        </member>
        <member name="M:ComLib.Automation.JsLite.#ctor(ComLib.Automation.Scope,System.Func{ComLib.Automation.JsLiteArgs,System.Boolean})">
            <summary>
            Initialize interpreter with scope.
            </summary>
            <param name="scope">Scope of the script.</param>
            <param name="callback">Callback to handle various statements.</param>
        </member>
        <member name="M:ComLib.Automation.JsLite.Interpret(System.String)">
            <summary>
            Interprets the script.
            </summary>
        </member>
        <member name="M:ComLib.Automation.JsLite.ProcessVariable">
            <summary>
            Process a variable.
            </summary>
        </member>
        <member name="M:ComLib.Automation.JsLite.ProcessFuncCall">
            <summary>
            Process a function call.
            </summary>
        </member>
        <member name="M:ComLib.Automation.JsLite.ProcessForLoop">
            <summary>
            Process a variable.
            </summary>
        </member>
        <member name="M:ComLib.Automation.JsLite.ProcessMultiLineComment(System.Int32)">
            <summary>
            Skips over the multi-line index.
            </summary>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.Interpreter">
            <summary>
            Very, Very light version of Javascript - JSLite. Non-Lexical parser.
            Features include:
            1. var declarations
            2. if conditions
            3. while loops
            4. for loops
            5. func calls
            </summary>
        </member>
        <member name="M:ComLib.Automation.Interpreter.#ctor(ComLib.Automation.Scope)">
            <summary>
            Initialize interpreter with scope.
            </summary>
            <param name="scope">Scope of the script.</param>
        </member>
        <member name="M:ComLib.Automation.Interpreter.IsForLoop(System.String)">
            <summary>
            Whether or not the line supplied is a for loop.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Interpreter.TokenizeVariable(System.String,System.String)">
            <summary>
            Parse variable into tuple of key/value pair.
            </summary>
            <param name="line"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Interpreter.TokenizeForLoop(System.String,System.Int32)">
            <summary>
            Tokenizes the for loop into a forloop expression;
            </summary>
            <param name="line">The text line representing the loop</param>
            <param name="lineNumber">The line number of the for loop</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Interpreter.TokenizeFunctionCall(System.String,System.Int32)">
            <summary>
            Tokenizes a function call
            </summary>
            <param name="line">Text representing the function call.</param>
            <param name="linenumber">Current line number</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.Interpreter.FunctionCallExpression">
            <summary>
            Function call expression data.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.FunctionCallExpression.Name">
            <summary>
            Name of the function.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.FunctionCallExpression.ParamList">
            <summary>
            List of arguments.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.FunctionCallExpression.ParamMap">
            <summary>
            Arguments to the function.
            </summary>
        </member>
        <member name="T:ComLib.Automation.Interpreter.VariableExpression">
            <summary>
            Variable expression data
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.VariableExpression.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.VariableExpression.DataType">
            <summary>
            Datatype of the variable.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.VariableExpression.Value">
            <summary>
            Value of the variable.
            </summary>
        </member>
        <member name="T:ComLib.Automation.Interpreter.ForLoopExpression">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.ForLoopExpression.Variable">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.ForLoopExpression.StartExpression">
            <summary>
            Expression representing the start value.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.ForLoopExpression.CheckOp">
            <summary>
            Operator for condition check in loop ndx >= 4
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.ForLoopExpression.CheckExpression">
            <summary>
            Expression representing the bound value ndx > = 4 
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.ForLoopExpression.IncrementOp">
            <summary>
            The operator to increment by ++ or +=
            </summary>
        </member>
        <member name="F:ComLib.Automation.Interpreter.ForLoopExpression.IncrementExpression">
            <summary>
            The expression if not ++ but += then the number after +=
            </summary>
        </member>
        <member name="T:ComLib.Automation.CommandContext">
            <summary>
            Contextual information supplied to a command to execute
            </summary>
        </member>
        <member name="F:ComLib.Automation.CommandContext.Name">
            <summary>
            Name of the command. This can be either in format "Name" or "Name"."Function". 
            This corresponds to basically either the name parameter of the CommandAttribute on the class or 
            the Name.Function to support 1 command handling multiple methods calls.
            e.g. The following commands/methods calls
            1. Blog.Delete(1);
            2. Blog.Create({title: "testing", content: "blog content"});
            
            Can all be handled by 1 command called "Blog" where that CommandAttribute has "IsMultiMethodEnabled" set to true.
            </summary>
        </member>
        <member name="F:ComLib.Automation.CommandContext.IsMethodCall">
            <summary>
            Whether or not the command is a method call as in Class.Method rather than a function call.
            </summary>
        </member>
        <member name="F:ComLib.Automation.CommandContext.ParamList">
            <summary>
            The parameter list to the command.
            </summary>
        </member>
        <member name="F:ComLib.Automation.CommandContext.ParamMap">
            <summary>
            Named parameters to the command
            </summary>
        </member>
        <member name="F:ComLib.Automation.CommandContext.Meta">
            <summary>
            The attribute metadata
            </summary>
        </member>
        <member name="T:ComLib.Account.UserValidator">
            <summary>
            Validator for User
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityValidator">
            <summary>
            Validator a domain object.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityValidator">
            <summary>
            Reuse the existing interface for the IValidator, but modify it 
            slightly to incorporate the entityaction being performed.
            This allows for a singleton validator using the it's non-stateful
            method.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityValidator.Validate(System.Object,ComLib.IValidationResults,ComLib.Entities.EntityAction)">
            <summary>
            Validates <paramref name="target"/> for the <paramref name="action"/> specified
            and adds <see cref="T:ComLib.IValidationResults"/> entires representing
            failures to the supplied <paramref name="results"/>.
            </summary>
            <param name="target">The object to validate.</param>
            <param name="results"></param>
            <param name="action"></param>
        </member>
        <member name="F:ComLib.Entities.EntityValidator.Empty">
            <summary>
            Static instance of an empty validator.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityValidator.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityValidator.#ctor(System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Initializes an instance of this class
            by using a specified validator function.
            </summary>
            <param name="validator">Validation function.</param>
        </member>
        <member name="M:ComLib.Entities.EntityValidator.Validate(System.Object,ComLib.IValidationResults,ComLib.Entities.EntityAction)">
            <summary>
            Validate using the object and the entityaction.
            </summary>
            <param name="target">object to validate.</param>
            <param name="results">results to add validation errors to.</param>
            <param name="action">entity action being done.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityValidator.GetEntityAction(ComLib.ValidationEvent)">
            <summary>
            Get the entity action from the validation event's context.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="validationEvent">The event containing the object to validate.</param>
            <returns>True if the validation is successful.</returns>
        </member>
        <member name="T:ComLib.Account.User">
            <summary>
            User entity.
            </summary>
            <summary>
            User entity extensions.
            1. Setup the password encryption 
            2. Handle lowering the case for username, email etc.
            </summary>
        </member>
        <member name="T:ComLib.Entities.ActiveRecordBaseEntity`1">
            <summary>
            Provides Domain Object and Active record support.
            1. Crud methods
            2. Find methods
            3. Domain Object methods - validation.
            </summary>
            <remarks>
            If .NET supported multiple inheritance, this class would extend from
            both DomainObject, and ActiveRecord, however the IActiveRecord interface
            has to be implemented in this class.
            1. Possible alternatives are extension methods 
            2. delegation.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.Entity`1">
            <summary>
            Generic based Entity class with supporting parameterless CRUD methods. 
            Create,update,save,delete.
            </summary>
            <typeparam name="T">The type of the Entity.</typeparam>
        </member>
        <member name="T:ComLib.Entities.Entity">
            <summary>
            Persistant entity that is auditable and can be validated.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityPersistantAudtiable`1">
            <summary>
            Persistant entity that is auditable.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="T:ComLib.Entities.EntityPersistant`1">
            <summary>
            Base class for entities than can be persisted.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="T:ComLib.Entities.IEntityPersistant`1">
            <summary>
            Persistant entity 
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityPersistant`1.IsPersistant">
            <summary>
            Determines whether this instance is persistant.
            </summary>
            <returns>
            	<c>true</c> if this instance is persistant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ComLib.Entities.IEntityPersistant`1.Id">
            <summary>
            Get the id of a persistant entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityPersistant`1.IsPersistant">
            <summary>
            Determines whether this instance is persistant.
            </summary>
            <returns>
            	<c>true</c> if this instance is persistant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ComLib.Entities.EntityPersistant`1.Id">
            <summary>
            Get the id of a persistant entity.
            </summary>
            <value></value>
        </member>
        <member name="T:ComLib.Entities.IEntityAuditable">
            <summary>
            Auditable entity.
            This interface is meant to provide auditing features to
            any entity/domain object.
            When changing the data model, at times it important to know.
            1. who made a change.
            2. when the change was made.
            3. who created it.
            4. what version it is.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.CreateDate">
            <summary>
            Date the entity was created.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.CreateUser">
            <summary>
            User who first created this entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.UpdateDate">
            <summary>
            Date the entitye was updated.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.UpdateUser">
            <summary>
            User who last updated the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.UpdateComment">
            <summary>
            Comment used for updates.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.CreateDate">
            <summary>
            Create datetime.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.CreateUser">
            <summary>
            User who first created this entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.UpdateDate">
            <summary>
            Update date time
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.UpdateUser">
            <summary>
            User updating the value
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.UpdateComment">
            <summary>
            Comment to describe any updates to entity.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntity">
            <summary>
            Entity interface.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityCallbacks">
            <summary>
            Callbacks for the persistance lifecycle.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnBeforeValidate(System.Object)">
            <summary>
            Callback before validation runs
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnBeforeValidateCreate(System.Object)">
            <summary>
            Callback before validation for creating entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnBeforeValidateUpdate(System.Object)">
            <summary>
            Callback before validation for updating entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnBeforeCreate(System.Object)">
            <summary>
            Callback before creating entity
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnBeforeUpdate(System.Object)">
            <summary>
            Callback before updating entity
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnBeforeSave(System.Object)">
            <summary>
            Callback before saving entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnBeforeDelete(System.Object)">
            <summary>
            Callback before deleting an entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterNew">
            <summary>
            Callback after entity has been created via it's constructor
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterValidate">
            <summary>
            Callback after entity has been validated
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterValidateCreate">
            <summary>
            Callback after validating entity when creating
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterValidateUpdate">
            <summary>
            Callback after validating entity when updating
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterCreate">
            <summary>
            Callback after creating entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterUpdate">
            <summary>
            Callback after updating entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterSave">
            <summary>
            Callback after saving entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityCallbacks.OnAfterDelete">
            <summary>
            Callback after deleting entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntity.Validate">
            <summary>
            Validate the entity and return collection of errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntity.Validate(ComLib.IValidationResults)">
            <summary>
            Validate the entity using the supplied result collection to collect errors.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntity.Validate(ComLib.IValidationResults,System.Boolean)">
            <summary>
            Validate this entity and collects/stores any validation errors
            into the results supplied and optionally copies the errors into the internal error state for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IEntity.IsValid">
            <summary>
            Determines if the entity is valid.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntity.Errors">
            <summary>
            The the last validation result that is available.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Entity._validationResults">
            <summary>
            The results after validation.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.Validate">
            <summary>
            Validate this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.Validate(ComLib.IValidationResults)">
            <summary>
            Validate this entity and collects/stores any validation errors
            into the results supplied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.Validate(ComLib.IValidationResults,System.Boolean)">
            <summary>
            Validate this entity and collects/stores any validation errors
            into the results supplied and optionally copies the errors into the internal error state for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.GetValidator">
            <summary>
            Gets the validator for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.GetValidatorInternal">
            <summary>
            This is here to facilitate code-generation so that this method can
            be overriden in the generated code. But that generated code
            can then be overriden by the user for customgenerated code by 
            over-riding the GetValidator().
            e.g. GetValidatorInternal() => codegenerator overrides.
                 GetValidator()         => user overrides in separate partial class
                                           to not use the code generation
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.Equals(System.Object)">
            <summary>
            Comapare this object with <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the two objects are equal, false otherwise</returns>
        </member>
        <member name="M:ComLib.Entities.Entity.GetHashCode">
            <summary>
            Gets the hashcode to uniquely represent the entity. Compliments the Equals method
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.op_Equality(ComLib.Entities.Entity,ComLib.Entities.Entity)">
            <summary>
            Check if 2 entities are the same.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.op_Inequality(ComLib.Entities.Entity,ComLib.Entities.Entity)">
            <summary>
            Checks if 2 entities are different.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeValidate(System.Object)">
            <summary>
            Called when [before validate].
            </summary>
            <param name="ctx">The context information.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeValidateCreate(System.Object)">
            <summary>
            Called when [before validate create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeValidateUpdate(System.Object)">
            <summary>
            Called when [before validate update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeCreate(System.Object)">
            <summary>
            Called when [before create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeUpdate(System.Object)">
            <summary>
            Called when [before update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeSave(System.Object)">
            <summary>
            Called when [before save].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeDelete(System.Object)">
            <summary>
            Called when [before delete].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterNew">
            <summary>
            Called after call to Class.New().
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterValidate">
            <summary>
            Called when [after validate].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterValidateCreate">
            <summary>
            Called when [after validate create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterValidateUpdate">
            <summary>
            Called when [after validate update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterCreate">
            <summary>
            Called when [after create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterUpdate">
            <summary>
            Called when [after update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterSave">
            <summary>
            Called when [after save].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterDelete">
            <summary>
            Called when [after delete].
            </summary>
        </member>
        <member name="P:ComLib.Entities.Entity.Settings">
            <summary>
            Settings specific for the entity.
            e.g. MaxLengthOfTitle = 10 etc.
            </summary>
        </member>
        <member name="P:ComLib.Entities.Entity.IsValid">
            <summary>
            Validates this object.
            Only difference compared to Validate() is this more convenient.
            and yeilds a bool instead of the actual validation results.
            </summary>
        </member>
        <member name="P:ComLib.Entities.Entity.Errors">
            <summary>
            Validation errors.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity`1.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.GetAll">
            <summary>
            Gets all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.Update">
            <summary>
            Updates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.Save">
            <summary>
            Saves this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.DeleteAll">
            <summary>
            Deletes all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(ComLib.Entities.IEntityService{`0})">
            <summary>
            Initialize the behaviour of creating the service and repository.
            </summary>
            <param name="service">The entity service</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(ComLib.Entities.IEntityService{`0},System.Boolean)">
            <summary>
            Singleton service and repository with optional flag to indicate 
            whether or not to configure the repository.
            </summary>
            <param name="service"></param>
            <param name="configureRepository"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(ComLib.Entities.IRepository{`0},System.Boolean)">
            <summary>
            Singleton repository with optional flag to indicate
            whether or not to configure the repository.
            </summary>
            <param name="repository">The repository.</param>
            <param name="configureRepository">if set to <c>true</c> [configure repository].</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},ComLib.Entities.IEntitySettings,System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="settings"></param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId">The connId to use when configuring the repository.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},ComLib.Entities.IEntitySettings,System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="settings">The settings for the entity.</param>
            <param name="configureRepo">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator</param>
            <param name="settings">The settings for the entity.</param>
            <param name="configureRepo">Whether or not to configure the reposiory.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator"></param>
            <param name="settings"></param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator"></param>
            <param name="settings"></param>
            <param name="resources"></param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Create(`0)">
            <summary>
            Creates the entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Creates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entities"></param>
            <param name="checkFields"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Update(`0)">
            <summary>
            Updates the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Save(`0)">
            <summary>
            Saves the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Delete(`0)">
            <summary>
            Deletes the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.DeleteAll">
            <summary>
            Deletes all the entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Delete(System.Int32)">
            <summary>
            Delete the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Get(System.Int32)">
            <summary>
            Retrieve the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.GetAll">
            <summary>
            Retrieve all instances of model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.First(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter"></param>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using Criteria.
            </summary>
            <param name="criteria"></param>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">e.g. "UserNameLowered = 'kishore'"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(ComLib.Data.IQuery)">
            <summary>
            Get items by page using Criteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Count">
            <summary>
            The the total count of entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.DoEntityAction(`0,System.Action{ComLib.IActionContext,ComLib.Entities.IEntityService{`0}})">
            <summary>
            Performs the actual entity action specified by the delegate <paramref name="executor"/>
            </summary>
            <param name="entity"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.ActiveRecordBaseEntity`1.Repository">
            <summary>
            Get the repository associated w/ this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ComLib.Account.User._password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="F:ComLib.Account.User._username">
            <summary>
            User name.
            </summary>
        </member>
        <member name="F:ComLib.Account.User._usernameLowered">
            <summary>
            User name (lower case).
            </summary>
        </member>
        <member name="F:ComLib.Account.User._usernameFull">
            <summary>
            Full user name.
            </summary>
        </member>
        <member name="F:ComLib.Account.User._email">
            <summary>
            User e-mail.
            </summary>
        </member>
        <member name="F:ComLib.Account.User._emailLowered">
            <summary>
            User e-mail (lower case).
            </summary>
        </member>
        <member name="M:ComLib.Account.User.New">
            <summary>
            Creates a new instance of this class.
            </summary>
            <returns>New instance of User.</returns>
        </member>
        <member name="M:ComLib.Account.User.InitEncryptor(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Initalize the internal encryptor lamda method.
            </summary>
            <param name="encryptor">Encryption function.</param>
            <param name="decryptor">Decryption function.</param>
        </member>
        <member name="M:ComLib.Account.User.Encrypt(System.String)">
            <summary>
            Encrypts using the initialized lamda encryption method.
            If it is not initialize, uses the default method.
            </summary>
            <param name="plainText">Clear text.</param>
            <returns>Encrypted text.</returns>
        </member>
        <member name="M:ComLib.Account.User.Decrypt(System.String)">
            <summary>
            Encrypts using the initialized lamda encryption method.
            If it is not initialize, uses the default method.
            </summary>
            <param name="encrypted">Encrypted text.</param>
            <returns>Clear text.</returns>
        </member>
        <member name="M:ComLib.Account.User.VerifyUser(System.String,System.String)">
            <summary>
            Provide a static method for verifying a user is registered/exists.
            </summary>
            <param name="username">Name of user.</param>
            <param name="password">User password.</param>
            <returns>Verification result.</returns>
        </member>
        <member name="M:ComLib.Account.User.LogOn(System.String,System.String,System.Boolean)">
            <summary>
            Try logging in to server.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="password">User password.</param>
            <param name="rememberUser">True to remember the user.</param>
            <returns>Result of logon attempt.</returns>
        </member>
        <member name="M:ComLib.Account.User.Create(System.String,System.String,System.String)">
            <summary>
            Register the user.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="email">E-mail of user.</param>
            <param name="password">User of password.</param>
            <returns>Result of user registration.</returns>
        </member>
        <member name="M:ComLib.Account.User.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Register the user.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="email">E-mail of user.</param>
            <param name="password">User of password.</param>
            <param name="roles">Roles to assign to the user.</param>
            <returns>Result of user registration.</returns>
        </member>
        <member name="M:ComLib.Account.User.Create(System.String,System.String,System.String,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Register the user.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="email">E-mail of user.</param>
            <param name="password">User of password.</param>
            <param name="roles">Roles to assign to the user.</param>
            <param name="status">Status of membership creation.</param>
            <returns>Result of user registration.</returns>
        </member>
        <member name="M:ComLib.Account.User.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the current password.
            </summary>
            <param name="userName">username of the account for which the password is being changed.</param>
            <param name="currentPassword">Existing password on file.</param>
            <param name="newPassword">New password</param>
            <returns>Result of password change.</returns>
        </member>
        <member name="M:ComLib.Account.User.ChangeEmail(System.Int32,System.String)">
            <summary>
            Change the current email.
            </summary>
            <param name="userId">The user id.</param>
            <param name="newEmail">The new email.</param>
            <returns>Result of e-mail change.</returns>
        </member>
        <member name="M:ComLib.Account.User.LockOut(System.String,System.String)">
            <summary>
            Lock out the specified user.
            </summary>
            <param name="userName">User to lock out.</param>
            <param name="lockOutReason">Reason for locking out.</param>
        </member>
        <member name="M:ComLib.Account.User.UndoLockOut(System.String,System.String)">
            <summary>
            UndoLock out the specified user.
            </summary>
            <param name="userName">User to undo lock out for.</param>
            <param name="comment">Reason for re-activating</param>
        </member>
        <member name="M:ComLib.Account.User.Get(System.String)">
            <summary>
            Get the specified user by username.
            </summary>
            <param name="userName">User to get.</param>
            <returns>Instance of user corresponding to user name.</returns>
        </member>
        <member name="M:ComLib.Account.User.Approve(System.String)">
            <summary>
            Approve user.
            </summary>
            <param name="userName">User to approve.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:ComLib.Account.User.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ComLib.Account.User.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initialize using username.
            </summary>
            <param name="username">Name of user.</param>
            <param name="password">User password.</param>
            <param name="email">E-mail of user.</param>
            <param name="isPlainPassword">True if it's a clear text password.</param>
        </member>
        <member name="M:ComLib.Account.User.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initialize using username.
            </summary>
            <param name="username">Name of user.</param>
            <param name="password">User password.</param>
            <param name="email">E-mail of user.</param>
            <param name="isPlainPassword">True if it's a clear text password.</param>
            <param name="roles">Roles to assign to the user.</param>
        </member>
        <member name="M:ComLib.Account.User.GetValidatorInternal">
            <summary>
            Gets the validator.
            </summary>
            <returns>Validator used.</returns>
        </member>
        <member name="M:ComLib.Account.User.OnBeforeCreate(System.Object)">
            <summary>
            Called one before creating a user in the datastore.
            </summary>
            <param name="ctx">Context.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="P:ComLib.Account.User.Roles">
            <summary>
            Get / Set the roles. e.g. "publishers,admin"
            
            NOTE: The roles do not have to be stored here.
            They can be separately stored in a "Roles" table/class.
            This is here for convenience in cases where 
            a simple 1 table is sufficient to store user info and roles info.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.MobilePhone">
            <summary>
            Phone number of the user. 
            </summary>
        </member>
        <member name="P:ComLib.Account.User.SecurityQuestion">
            <summary>
            Get/Set SecurityQuestion
            </summary>
        </member>
        <member name="P:ComLib.Account.User.SecurityAnswer">
            <summary>
            Get/Set SecurityAnswer
            </summary>
        </member>
        <member name="P:ComLib.Account.User.IsApproved">
            <summary>
            Get/Set IsApproved
            </summary>
        </member>
        <member name="P:ComLib.Account.User.IsLockedOut">
            <summary>
            Get/Set IsLockedOut
            </summary>
        </member>
        <member name="P:ComLib.Account.User.Comment">
            <summary>
            Get/Set Comment
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LockOutReason">
            <summary>
            Get/Set LockOutReason
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastLoginDate">
            <summary>
            Get/Set LastLoginDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastPasswordChangedDate">
            <summary>
            Get/Set LastPasswordChangedDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastPasswordResetDate">
            <summary>
            Get/Set LastPasswordResetDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastLockOutDate">
            <summary>
            Get/Set LastLockOutDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.Password">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.PasswordPlain">
            <summary>
            Set password using plaintext which gets encrypted.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.UserName">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.UserNameLowered">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.Email">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.EmailLowered">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_HolidayCalendar">
            <summary>
            Example for the Calendars namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_HolidayCalendar.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_HolidayCalendar.GetSampleHolidays">
            <summary>
            Get sample united states holidays.
            
            This can be loaded from an XML file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.Example_AppTemplate">
            <summary>
            Example of ActiveRecord Initialization/Configuration.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_AppTemplate.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_AppTemplate.Accept(System.String[])">
            <summary>
            Validate arguments passed, if they are valid, accept them.
            </summary>
            <remarks>This is the first method called in the workflow,
            because the arguments supplied can determine how to initialize
            the application.</remarks>
            <param name="args">Command line arguments supplied.</param>
            <returns>True if args are valid, false otherwise.</returns>
        </member>
        <member name="M:ComLib.Samples.Example_AppTemplate.Init">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_AppTemplate.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_AppTemplate.ShutDown">
            <summary>
            Shutdown various services.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.OptionsExamples">
            <summary>
            List of command line launches examples of how to run this program.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_AppTemplate.StartupArgs">
            <summary>
            Sample object that should recieve the arguments.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.StartupArgs.Config">
            <summary>
            Configuration file
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.StartupArgs.LogFile">
            <summary>
            Log file name/path
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.StartupArgs.Envrionment">
            <summary>
            Environment to run in
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.StartupArgs.BusinessDate">
            <summary>
            The business date to run in
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.StartupArgs.ReadonlyMode">
            <summary>
            Whether or not to run in read-only mode
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.StartupArgs.CategoriesToDisplay">
            <summary>
            Number of categories to display
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_AppTemplate.StartupArgs.DefaultSettingsId">
            <summary>
            The default settings to load.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Database">
            <summary>
            Example for the Data namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Database.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Repository1_Querable">
            <summary>
            Example of IRepositoryQuerable - generic functionality on any table.
            The repository is not associated w/ any specific entity.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Repository1_Querable.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Repository1_Querable.Product.Cost">
            <summary>
            Cost of the product.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Repository1_Querable.Product.Make">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="T:ComLib.LexArgs">
            <summary>
            Lexical parser used to parsing text.
            e.g. Such as parsing arguments to a program.
            </summary>
            <example>
                IDictionary&lt;string, string&gt; args1 = LexArgs.Parse("-trace=4 -config=PROD -appid=Knowledgedrink");
                IDictionary&lt;string, string&gt; args2 = LexArgs.Parse(" backup \"comment's\" 'blogs'");
                IDictionary&lt;string, string&gt; args2 = LexArgs.Parse("appid=KnowledgeDrink --trace=4 --config=\"prod.config\"   BLOGS 'c: d: e:'");
            </example>
        </member>
        <member name="T:ComLib.LexBase">
            <summary>
            Base class for lexical parsing.
            </summary>
        </member>
        <member name="F:ComLib.LexBase._reader">
            <summary>
            Instance of token reader.
            </summary>
        </member>
        <member name="F:ComLib.LexBase._settings">
            <summary>
            Instance of parsing settings.
            </summary>
        </member>
        <member name="F:ComLib.LexBase._tokenList">
            <summary>
            List of tokens.
            </summary>
        </member>
        <member name="F:ComLib.LexBase._errors">
            <summary>
            List of errors.
            </summary>
        </member>
        <member name="F:ComLib.LexBase._whiteSpaceMap">
            <summary>
            Whitespace map.
            </summary>
        </member>
        <member name="M:ComLib.LexBase.Init(ComLib.LexSettings)">
            <summary>
            Initalize using custom settings.
            </summary>
            <param name="settings">Parsing settings to use.</param>
        </member>
        <member name="M:ComLib.LexBase.ParseText(System.String)">
            <summary>
            Parse text.
            </summary>
            <param name="line">Line of text to parse.</param>
            <returns>List with parse results.</returns>
        </member>
        <member name="M:ComLib.LexBase.ReadNonQuotedToken(System.Collections.Generic.IDictionary{System.Char,System.Char},System.Boolean)">
            <summary>
            Read a continuous set of characters until 
            end of text or separater is reached.
            </summary>
            <returns>Token extracted from the text stream.</returns>
        </member>
        <member name="M:ComLib.LexBase.ReadQuotedToken">
            <summary>
            Read a quoted set of characters.
            e.g. 'firstname' or "lastname".
            </summary>
            <returns>Token extracted from the stream.</returns>
        </member>
        <member name="M:ComLib.LexBase.Expect(System.Char)">
            <summary>
            Expect the current char to be the char specified.
            </summary>
            <param name="expectChar">Expected character.</param>
            <returns>True if the current char is the specified one.</returns>
        </member>
        <member name="M:ComLib.LexBase.AddError(System.String)">
            <summary>
            Add error to list of errors.
            </summary>
            <param name="error">Error string to add to errors.</param>
        </member>
        <member name="M:ComLib.LexBase.CheckAndThrowErrors">
            <summary>
            Check for errors and throw.
            </summary>
        </member>
        <member name="M:ComLib.LexBase.ExcludeNewLinesStored">
            <summary>
            Exclude new lines stored at the end as a result of the parser
            reading the \r\n at the end of line.
            </summary>
        </member>
        <member name="M:ComLib.LexBase.Reset(System.String)">
            <summary>
            Reset the state.
            </summary>
            <param name="line">Line to initialize token reader.</param>
        </member>
        <member name="M:ComLib.LexBase.ToDictionary``1(System.Collections.Generic.IList{``0})">
            <summary>
            Check if all of the items in the collection satisfied by the condition.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
            <param name="items">List of items.</param>
            <returns>Dictionary with items.</returns>
        </member>
        <member name="M:ComLib.LexBase.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Join string enumeration items.
            </summary>
            <param name="items">List with strings to join.</param>
            <param name="delimeter">Delimiter to use with join.</param>
            <returns>Joined string.</returns>
        </member>
        <member name="P:ComLib.LexBase.AllowNewLine">
            <summary>
            Get/set whether to allow a new line.
            </summary>
        </member>
        <member name="F:ComLib.LexArgs._defaultSettings">
            <summary>
            Default settings
            </summary>
        </member>
        <member name="M:ComLib.LexArgs.Parse(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>Dictionary with parsed results.</returns>
        </member>
        <member name="M:ComLib.LexArgs.ParseList(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>List with parsed results.</returns>
        </member>
        <member name="M:ComLib.LexArgs.Parse(System.String,ComLib.LexSettings)">
            <summary>
            Parse supplied text using supplied settings.
            </summary>
            <param name="line">List to parse.</param>
            <param name="settings">Parsing settings to use.</param>
            <returns>List with parse results.</returns>
        </member>
        <member name="M:ComLib.LexArgs.#ctor">
            <summary>
            Create using default settings.
            </summary>
        </member>
        <member name="M:ComLib.LexArgs.#ctor(ComLib.LexSettings)">
            <summary>
            Create with supplied settings.
            </summary>
            <param name="settings">Parsing settings to use.</param>
        </member>
        <member name="T:ComLib.Lang.LiteralToken">
            <summary>
            String, number, bool(true/false), null
            </summary>
        </member>
        <member name="M:ComLib.Lang.LiteralToken.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="text">The raw text value</param>
            <param name="value">The actual value of the literal</param>
            <param name="isKeyword">Whether this is a keyword</param>
        </member>
        <member name="M:ComLib.Lang.LiteralToken.IsLiteral(System.String)">
            <summary>
            Determines if the text supplied is a literal token
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.LiteralToken.ToLiteral(System.String)">
            <summary>
            Get the literal token from the string
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Lang.LiteralToken.Value">
            <summary>
            Value of the literal
            </summary>
        </member>
        <member name="T:ComLib.ReflectionHelper">
            <summary>
            This class provides basic reflection helper methods.
            </summary>
        </member>
        <member name="M:ComLib.ReflectionHelper.SetProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Set the property value using the string value.
            </summary>
            <param name="obj">Object whose property is to be set.</param>
            <param name="prop">Property name.</param>
            <param name="propVal">Value to set.</param>
        </member>
        <member name="M:ComLib.ReflectionHelper.GetPropertyValueSafely(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value safely, without throwing an exception.
            If an exception is caught, null is returned.
            </summary>
            <param name="obj">Object whose property is to be retrieved.</param>
            <param name="propInfo">Property name.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.ConfigSectionUtils">
            <summary>
            Config section utils for adding/removing from both a map and list.
            </summary>
        </member>
        <member name="M:ComLib.ConfigSectionUtils.Add(System.Collections.IDictionary,System.String,System.Object,System.Boolean)">
            <summary>
            Add item to map checking for duplicate keys.
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.ConfigSectionUtils.Add(System.Collections.IDictionary,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add key / value pair to the section specified.
            </summary>
            <param name="dictionary"></param>
            <param name="sectionName">E.g. "server"</param>
            <param name="key">"name"</param>
            <param name="val">"myserver01"</param>
            <param name="overWrite">true</param>
        </member>
        <member name="M:ComLib.ConfigSectionUtils.Get``1(System.Collections.IDictionary,System.String,System.Int32)">
            <summary>
            Get the entry at the specified index of the multivalue list 
            associated with the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key">"post"</param>
            <param name="ndx">1</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.ScriptsSupport.IScriptService">
            <summary>
            Information Service
            </summary>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.IScriptService.AddLocation(System.String,System.Boolean)">
            <summary>
            Add a scripts holder for the specified location.
            </summary>
            <param name="location">Script location.</param>
            <param name="useHttp">Use HTTP for script.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.IScriptService.For(System.String)">
            <summary>
            Get the scripts for the name.
            </summary>
            <param name="name">Script name.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.IScriptService.AddJavascript(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a javascript to the specified location.
            </summary>
            <param name="location">Location.</param>
            <param name="name">Script name.</param>
            <param name="url">Script URL.</param>
            <param name="dependsOn">Script dependency.</param>
            <param name="version">Script version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.IScriptService.AddCss(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a css to the specified location.
            </summary>
            <param name="location">Location.</param>
            <param name="name">CSS name.</param>
            <param name="url">CSS URL.</param>
            <param name="dependsOn">CSS dependency.</param>
            <param name="version">CSS version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.IScriptService.ToHtml(System.String)">
            <summary>
            Gets the current scripts as html tags.
            </summary>
            <param name="location">Location.</param>
            <returns>Current scripts as html tags.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.State">
            <summary>
            State 
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationCountryBase">
            <summary>
            Location data with the country id.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationBase">
            <summary>
            Location data base class for state, country, location short name.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.Name">
            <summary>
            Full / Formal name.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.Abbreviation">
            <summary>
            Short name or abbreviation
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.IsAlias">
            <summary>
            Gets or sets a value indicating whether this instance is alias.
            </summary>
            <value><c>true</c> if this instance is alias; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.AliasRefId">
            <summary>
            Gets or sets the alias ref id.
            </summary>
            <value>The alias ref id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.AliasRefName">
            <summary>
            Gets or sets the alias ref name.
            </summary>
            <remarks>This is used more when importing location data from files.</remarks>
            <value>The alias ref id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.RealId">
            <summary>
            Get the real id, if this is a country.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.IsActive">
            <summary>
            Indicates whether or not this entity is active
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationCountryBase.CountryId">
            <summary>
            Country Id
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationCountryBase.CountryName">
            <summary>
            Gets or sets the name of the country.
            </summary>
            <value>The name of the country.</value>
        </member>
        <member name="M:ComLib.LocationSupport.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.State"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.State.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.State"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="countryId">The country id.</param>
            <param name="countryName">Name of the country.</param>
            <param name="stateAbbr">The state abbr.</param>
        </member>
        <member name="T:ComLib.Entities.RepositoryFactory">
            <summary>
            Repository factory for building/initializing a entity specific repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Init(System.Action{System.String,ComLib.Entities.IRepositoryConfigurable})">
            <summary>
            Initialize the repository configurator.
            </summary>
            <param name="configurator">Instance of repository configurator to use.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Add(System.String)">
            <summary>
            Initialize the repository configurator using only the connection string.
            This results in using the RepositoryConfiguratorDefault and the default database provider "System.Data.SqlClient".
            </summary>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Add(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the repository configurator using only the connection provided.
            This results in using the RepositoryConfiguratorDefault.
            </summary>
            <param name="connection">Database connection info.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Add(System.String,ComLib.Data.ConnectionInfo)">
            <summary>
            Add connection associated w/ key.
            </summary>
            <param name="id">Connection key.</param>
            <param name="connectionInfo">Connection information.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Init">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Create``1(System.Func{ComLib.Entities.IRepository{``0}})">
            <summary>
            Initialize the repository.
            </summary>
            <typeparam name="T">Type of repository items.</typeparam>
            <param name="action">Action that creates a repository.</param>
            <returns>Created repository.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Configure(System.String,ComLib.Entities.IRepositoryConfigurable)">
            <summary>
            Initialize the repository.
            </summary>
            <param name="connectionId">Connection id.</param>
            <param name="repository">Repository to initialize.</param>
        </member>
        <member name="T:ComLib.Entities.RepositoryConfiguratorDefault">
            <summary>
            Default repository configurator to set the connection connection string and dbhelper.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.#ctor">
            <summary>
            Initialize the connection.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the connection.
            </summary>
            <param name="connection">Connection information.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.Add(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the connection.
            </summary>
            <param name="connection">Connection information.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.Add(System.String,ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the connection.
            </summary>
            <param name="id">Connection key.</param>
            <param name="connection">Connection information.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.Configure(System.String,ComLib.Entities.IRepositoryConfigurable)">
            <summary>
            Configure the repository with the connection and dbhelper.
            </summary>
            <param name="connectionId">Connection key.</param>
            <param name="repository">Repository to configure.</param>
        </member>
        <member name="P:ComLib.Entities.RepositoryConfiguratorDefault.DefaultConnection">
            <summary>
            The connection object.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationUtils">
            <summary>
            This class provides helper methods
            for the Notifications namespace.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationUtils.GetInternalNotificationTemplate(System.String)">
            <summary>
            Get the internal template content from the commonlibrary assembly.
            </summary>
            <param name="fileName">e.g. welcome.html</param>
            <returns>String with internal templace.</returns>
        </member>
        <member name="T:ComLib.Paging.Pager">
            <summary>
            Holds the paging data.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor to set properties.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="totalPages">Total number of pages.</param>
        </member>
        <member name="M:ComLib.Paging.Pager.#ctor(System.Int32,System.Int32,ComLib.Paging.PagerSettings)">
            <summary>
            Constructor to set properties.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="totalPages">Total number of pages.</param>
            <param name="settings">Settings for pager.</param>
        </member>
        <member name="M:ComLib.Paging.Pager.Init(ComLib.Paging.IPagerCalculator)">
            <summary>
            Initialize pager calculator.
            </summary>
            <param name="pager">Instance of pager calculator.</param>
        </member>
        <member name="M:ComLib.Paging.Pager.SetCurrentPage(System.Int32)">
            <summary>
            Set the current page and calculate the rest of the pages.
            </summary>
            <param name="currentPage">Current page to set.</param>
        </member>
        <member name="M:ComLib.Paging.Pager.SetCurrentPage(System.Int32,System.Int32)">
            <summary>
            Set the current page and calculate the rest of the pages.
            </summary>
            <param name="currentPage">Current page</param>
            <param name="totalPages">Total pages in pager</param>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveFirst">
            <summary>
            Move to the fist page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MovePrevious">
            <summary>
            Move to the previous page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveNext">
            <summary>
            Move to the next page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveLast">
            <summary>
            Move to the last page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveToPage(System.Int32)">
            <summary>
            Move to a specific page.
            </summary>
            <param name="selectedPage">Page to move to.</param>
        </member>
        <member name="M:ComLib.Paging.Pager.Calculate">
            <summary>
            Calcuate pages.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.Calculate(ComLib.Paging.Pager,ComLib.Paging.PagerSettings)">
            <summary>
            Calculate the starting page and ending page.
            </summary>
            <param name="pagerData">Pager data.</param>
            <param name="pagerSettings">Pager settings.</param>
        </member>
        <member name="M:ComLib.Paging.Pager.ToHtml(System.Func{System.Int32,System.String})">
            <summary>
            Builds the html for non-ajax based url based paging.
            </summary>
            <param name="urlBuilder">Function to build html.</param>
            <returns>Created html.</returns>
        </member>
        <member name="M:ComLib.Paging.Pager.ToHtml(System.Func{System.Int32,System.String},ComLib.Paging.PagerSettings)">
            <summary>
            Builds the html for non-ajax based url based paging.
            </summary>
            <param name="urlBuilder">Function to build html.</param>
            <param name="settings">Pager settings.</param>
            <returns>Created html.</returns>
        </member>
        <member name="M:ComLib.Paging.Pager.Get(System.Int32,System.Int32,ComLib.Paging.PagerSettings)">
            <summary>
            Get the pager data using current page and totalPages.
            </summary>
            <param name="currentPage">Current page.</param>
            <param name="totalPages">Total number of pages.</param>
            <param name="settings">Pager settings.</param>
        </member>
        <member name="M:ComLib.Paging.Pager.Clone">
            <summary>
            Clones the object.
            Good as long as properties are not objects.
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="P:ComLib.Paging.Pager.CurrentPage">
            <summary>
            Current page
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.TotalPages">
            <summary>
            Total pages available
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.FirstPage">
            <summary>
            Always 1.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.PreviousPage">
            <summary>
            What is the previous page number if applicable.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.StartingPage">
            <summary>
            Starting page.
            e.g.
            can be 1 as in                    1, 2, 3, 4, 5   next, last
            can be 6 as in   first, previous, 6, 7, 8, 9, 10  next, last
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.EndingPage">
            <summary>
            Starting page.
            e.g.
            can be 5 as in                     1, 2, 3, 4, 5   next, last
            can be 10 as in   first, previous, 6, 7, 8, 9, 10  next, last
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.NextPage">
            <summary>
            What is the next page number if applicable.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.LastPage">
            <summary>
            Last page number is always the Total pages.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.IsMultiplePages">
            <summary>
            Whether or not there are more than 1 page.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.Settings">
            <summary>
            Get the pager settings.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowFirst">
            <summary>
            Can show First page link?
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowPrevious">
            <summary>
            Can show previous link?
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowNext">
            <summary>
            Can show Next page link?
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowLast">
            <summary>
            Can show Last page link?
            </summary>
        </member>
        <member name="T:ComLib.Models.ModelUtils">
            <summary>
            This class provides utility methods for the <see cref="N:ComLib.Models"/> namespace.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelUtils.GetModelInheritancePath(ComLib.Models.ModelContainer,System.String,System.Boolean)">
            <summary>
            Get the inheritance path of a model as list of models.
            </summary>
            <param name="container">The model container.</param>
            <param name="modelName">The model name.</param>
            <param name="sortOnProperties">True to sort the list on properties.</param>
            <returns>Inheritance path.</returns>
        </member>
        <member name="M:ComLib.Models.ModelUtils.GetModelInheritancePath(ComLib.Models.ModelContainer,System.String)">
            <summary>
            Get the inheritance path of a model as list of models.
            </summary>
            <param name="container">The model container.</param>
            <param name="modelName">The model name.</param>
            <returns>Inheritance path.</returns>
        </member>
        <member name="M:ComLib.Models.ModelUtils.ConvertNestedToFlatInheritance(ComLib.Models.Model,ComLib.Models.ModelContainer)">
            <summary>
            Traverses the nodes inheritance path to build a single flat delimeted line of 
            inheritance paths.
            e.g. returns "Job,Post,EntityBase"
            </summary>
            <returns>Delimited line of inheritance paths.</returns>
        </member>
        <member name="M:ComLib.Models.ModelUtils.Sort(System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Sort the model chain.
            </summary>
            <param name="modelChain">The model chain to sort.</param>
        </member>
        <member name="T:ComLib.Models.ModelContext">
            <summary>
            This class holds contextual information pertaining to the generation process.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContext.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContext.#ctor(ComLib.Models.ModelContainer)">
            <summary>
            Initialize.
            </summary>
            <param name="container">Collection of models.</param>
        </member>
        <member name="M:ComLib.Models.ModelContext.Init">
            <summary>
            Initialize by storing all the model chain inheritance paths for each model.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContext.CanProcess(ComLib.Models.Model,System.Func{ComLib.Models.Model,System.Boolean})">
            <summary>
            Determines if a model can be processed.
            </summary>
            <param name="model">Mode to check.</param>
            <param name="predicate2">Checking function.</param>
            <returns>True if the model can be processed.</returns>
        </member>
        <member name="P:ComLib.Models.ModelContext.AllModels">
            <summary>
            Get / Set the container.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContext.IncludeModels">
            <summary>
            Names of models to be included in the processing.
            </summary>
        </member>
        <member name="T:ComLib.MapperSupport.MapperHelper">
            <summary>
            Helper mapper methods.
            </summary>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapTo``1(``0,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Reflection.PropertyInfo},System.Collections.IDictionary)">
            <summary>
            Map the properties in the data to the properties of the item T using the propMap supplied.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The object to set the properties on.</param>
            <param name="counterOrRefId">An counter to help associate errors in mapping w/ a specific item index or reference id.</param>
            <param name="propMap">Property map containing the names of the properties that can be mapped.</param>
            <param name="data">The source of the data to map.</param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapTo``1(``0,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Reflection.PropertyInfo},System.Collections.IDictionary,ComLib.IErrors)">
            <summary>
            Map the properties in the data to the properties of the item T using the propMap supplied.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="counterOrRefId">An counter to help associate errors in mapping w/ a specific item index or reference id.</param>
            <param name="item">The object to set the properties on.</param>
            <param name="propMap">Property map containing the names of the properties that can be mapped.</param>
            <param name="data">The source of the data to map.</param>
            <param name="errors">Error collection.</param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapTo(System.Object,System.Collections.IDictionary,System.String,ComLib.IErrors)">
            <summary>
            Maps all the keys/values in the data dictionary to the 
            </summary>
            <param name="obj">The object to map</param>
            <param name="data">The data to map to the object.</param>
            <param name="namefilter">Filter on the keys. e.g. "Location." will only map keys that contain "Location."</param>
            <param name="errors">Error list for collecting errors.</param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapFrom(System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Reflection.PropertyInfo}},System.Action{System.String,System.Object})">
            <summary>
            Maps prop/values from the object and passes the column/propertyname and it's value as an object back to the callback.
            The property name is delimited by "." for nested objects.
            </summary>
            <param name="obj"></param>
            <param name="excludeProps"></param>
            <param name="propMap">KeyValue list of propnames and their propinfo. NOTE: nested objects should have their key as "obj.property.property"</param>
            <param name="callback"></param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.GetProperty(System.Object,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="obj">The obj.</param>
            <param name="propName">Name of the prop. Can be nested like "Post.Address.City"</param>
            <returns>Returns the property and the object that the property belongs to.</returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.SetProperty(System.Reflection.PropertyInfo,System.Object,System.Int32,ComLib.IErrors,System.Object)">
            <summary>
            Set the property using the value provided.
            </summary>
            <param name="prop"></param>
            <param name="item"></param>
            <param name="counterOrRefId"></param>
            <param name="errors"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.GetProps(System.Type,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Reflection.PropertyInfo}})">
            <summary>
            Recurse into the type to get all the instance, public, settable properties of the types it's 
            nested objects that are properties.
            </summary>
            <param name="type"></param>
            <param name="objectName"></param>
            <param name="propNames"></param>
        </member>
        <member name="T:ComLib.Macros.IMacro">
            <summary>
            Interface for a macro
            </summary>
        </member>
        <member name="M:ComLib.Macros.IMacro.Process(ComLib.Macros.Tag)">
            <summary>
            Processes a tag.
            </summary>
            <param name="tag">Instance of tag to process.</param>
            <returns>Content for this tag.</returns>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManagerDefault">
            <summary>
            Localized error manager.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManagerBase">
            <summary>
            Localized error manager.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.IErrorManager">
            <summary>
            Interface for an exception manager.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="F:ComLib.Exceptions.ErrorManagerBase._name">
            <summary>
            Error manager name.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error"></param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.InternalHandle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Internal method for handling errors.
            </summary>
            <param name="error"></param>
            <param name="exception"></param>
            <param name="errors"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:ComLib.Exceptions.ErrorManagerBase.Name">
            <summary>
            The name of this exception manager.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityRegistrationConstants">
            <summary>
            This class contains entity registration constants.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixService">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportservice"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixValidator">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportvalidator"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixRepository">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportrepository"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixController">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportcontroller"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixSettings">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportsettings"
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityMassager">
            <summary>
            Interface for an entity data massager.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityMassager.Massage(System.Object,ComLib.Entities.EntityAction)">
            <summary>
            Massage
            </summary>
            <param name="entity"></param>
            <param name="action"></param>
        </member>
        <member name="T:ComLib.Entities.IEntityService">
            <summary>
            Non-Typed base interface for an EntityService
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityService.GetValidator">
            <summary>
            Get the validator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Create(ComLib.IActionContext)">
            <summary> 
            Creates the entity. 
            </summary> 
            <param name="ctx"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Entities.IEntityService.Update(ComLib.IActionContext)">
            <summary>
            Updates the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Save(ComLib.IActionContext)">
            <summary>
            Saves the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Delete(System.Int32)">
            <summary>
            Deletes the entity in the repository.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.DeleteAll">
            <summary>
            Delete all entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Delete(ComLib.IActionContext)">
            <summary>
            Deletes the entity from the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.GetRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Get recent items as a different type.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IEntityService.Validator">
            <summary> 
            The validator for the model. 
            </summary> 
        </member>
        <member name="P:ComLib.Entities.IEntityService.Settings">
            <summary>
            Configuration settings for the service.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityService.Resources">
            <summary>
            Localized resource manager.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityService`1">
            <summary>
            The model service handles all actions on the model.
            This includes CRUD operations which are delegated to the 
            ModelRespository after a ModelService performs any appropriate
            security checks among other things.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetSettings``1">
            <summary>
            Get the settings as a typed object.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Init">
            <summary>
            This method is useful for derived classes to implement 
            their own initialization behaviour.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Create(`0)">
            <summary> 
            Creates the entity. 
            </summary> 
            <param name="entity"></param>
            <returns></returns> 
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create multiple
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Update(`0)">
            <summary>
            Updates the entity in the repository.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates multiple entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Save(`0)">
            <summary>
            Saves the entity in the repository.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Delete(`0)">
            <summary>
            Deletes the entity in the repository.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Get(System.Int32)">
            <summary>
            Gets the entity in the repository.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Get(ComLib.IActionContext)">
            <summary> 
            Retrieves the entity from the repository.
            You can specify either the id or object.
            </summary> 
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetAll">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetAll(ComLib.IActionContext)">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetAllItems(ComLib.IActionContext)">
            <summary>
            Retrieve all items as a non-generic list.
            This is to allow retrieving all items across different types using reflection.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter"></param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using IQuery.
            </summary>
            <param name="criteria"></param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(System.String)">
            <summary>
            Get all items at once(without paging records) using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(ComLib.Data.IQuery)">
            <summary>
            Finds entities using the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.First(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.FindByUser(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page and by the user who created them.
            </summary>
            <param name="userName">Name of user who created the entities.</param>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get recent items by page.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:ComLib.Entities.IEntityService`1.Repository">
            <summary> 
            The resposity for the model. 
            </summary> 
        </member>
        <member name="T:ComLib.Entities.IEntitySettings">
            <summary>
            Interface for the models service settings that ares used to 
            configuration settings for the model service.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntitySettings.EnableAuthentication">
            <summary>
            Whether authentication is required to edit the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntitySettings.EnableValidation">
            <summary>
            Whether or not to validate the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntitySettings.EditRoles">
            <summary>
            Roles allowed to edit the entity.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityResources">
            <summary>
            Localization resource provider for entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityResources.EntityName">
            <summary>
            Get the name of the entity.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityRowMapper`1">
            <summary>
            Row mapper for a model to map database rows to model.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.IRowMapper`2">
            <summary>
            Base class for RowMapping.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:ComLib.Data.IRowMapper`2.MapRows(`0)">
            <summary>
            Maps all the rows in TSource to list objects of type T.
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IRowMapper`2.MapRow(`0,System.Int32)">
            <summary>
            Maps a specific row to an item of type TResult
            </summary>
            <param name="dataSource"></param>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IRowMapper`2.OnAfterRowsMapped(System.Collections.Generic.IList{`1})">
            <summary>
            Call back for on after rows have been mapped.
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:ComLib.Data.IRowMapper`2.IsCallbackEnabledForAfterRowsMapped">
            <summary>
            Whether or not the callback for after rows mapped is enabled.
            </summary>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderDb">
            <summary>
            This class generates sql files for a model.
            </summary>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderBase">
            <summary>
            Base class for code builders.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.CodeBuilderBase._indentLevel">
            <summary>
            Code ident level.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.GetIndent">
            <summary>
            Gets the indentation level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.IncrementIndent">
            <summary>
            Increments the indentation by 1 level of spaces ( 4 ).
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.IncrementIndent(System.Int32)">
            <summary>
            Increments the indentation by count number of spaces ( 4 )
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.DecrementIndent">
            <summary>
            Decrements the indentation by 1 level of spaces ( 4 )
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.DecrementIndent(System.Int32)">
            <summary>
            Decrements the indentation by count levels of spaces ( 4 ).
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.ICodeBuilder">
            <summary>
            Interface for a component that is part of a code-generator.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.ICodeBuilder.Process(ComLib.Models.ModelContext)">
            <summary>
            Executes a specific part of a code-generation process.
            </summary>    
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.#ctor">
            <summary>
            Default setup.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.#ctor(System.Boolean,ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="buildInstallScriptsOnly"></param>
            <param name="conn"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.Process(ComLib.Models.ModelContext)">
            <summary>
            Creates the models in the database.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateStoredProcs(ComLib.Models.ModelContext,ComLib.Models.Model,System.Boolean)">
            <summary>
            Create stored procedures
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="includeGo"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.ConvertModelChainToTable(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model},ComLib.Models.ModelContext)">
            <summary>
            Convert the model chain to database table.
            </summary>
            <param name="modelInheritanceChain">The list of models representing the inheritance chain, this includes the model
            being created. </param>
            <param name="modelToCreate">The model being created.</param>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateTablePrefix(ComLib.Models.Model)">
            <summary>
            Prefix to use for Table creation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateTableSuffix(ComLib.Models.Model)">
            <summary>
            Prefix to use for Table creation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.BuildColumnInfo(ComLib.Models.PropInfo)">
            <summary>
            Builds sql column ddl
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.BuildColumnInfoForKey(ComLib.Models.PropInfo)">
            <summary>
            Builds sql column identity ddl.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateInstallSqlFile(ComLib.Models.ModelContext,ComLib.Models.Model,System.String)">
            <summary>
            Create an install sql file specifically for creating the table for this model.
            The location of the file is obtained from the settings and the model name.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="sql"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.ExecuteSqlInDb(System.Collections.Generic.List{System.String},ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Create table in the database.
            </summary>
            <param name="sqls"></param>
            <param name="ctx"></param>
            <param name="currentModel"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderDomainDatabase">
            <summary>
            This class generates row mapping and
            basic code for a model.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildCreateParamsSql(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Builds the create params SQL.
            </summary>
            <param name="model">The model.</param>
            <param name="modelInheritanceChain">The model inheritance chain.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildUpdateParamsSql(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Builds the update params SQL.
            </summary>
            <param name="model">The model.</param>
            <param name="modelInheritanceChain">The model inheritance chain.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildDbParams(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Build the database parameters for Create/Update using parameterized sql.
            </summary>
            <param name="model"></param>
            <param name="modelInheritanceChain"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildRowMapper(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Build the entire row mapper.
            </summary>
            <param name="model"></param>
            <param name="modelInheritanceChain"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildRelationObjects(ComLib.Models.Model)">
            <summary>
            Builds fetch for relational model objects.
            </summary>
            <param name="model">Model to use.</param>
            <returns>Generated string.</returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildRelationObjectsDeletion(ComLib.Models.Model)">
            <summary>
            Builds deletion logic for related objects.
            </summary>
            <param name="model">Model to use.</param>
            <returns>Generated string.</returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildRowMapperProperties(System.String,ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.PropInfo})">
            <summary>
            Build row mapper.
            </summary>
            <param name="entityName"></param>
            <param name="model"></param>
            <param name="allProps"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.CodeGeneration.CodeBuilderDomainDatabase.Tab">
            <summary>
            The tabs to use.
            </summary>
        </member>
        <member name="P:ComLib.CodeGeneration.CodeBuilderDomainDatabase.Context">
            <summary>
            Get/set the model context.
            </summary>
        </member>
        <member name="T:ComLib.Categories.CategorySettings">
            <summary>
            Settings for the comments module.
            </summary>
        </member>
        <member name="M:ComLib.Categories.CategorySettings.#ctor">
            <summary>
            Initialize the settings.
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.AddCollapseExpand">
            <summary>
            Whether or not the show the add/collapse image for the parent categories.
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.ShowExpandCollapseAll">
            <summary>
            Whether or not the show the expand / collapse all links
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.SuggestCategoryShowLink">
            <summary>
            Whether or not the show the suggest category link
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.SuggestCategoryText">
            <summary>
            The text to display when showing suggest category.
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.SuggestCategoryUrl">
            <summary>
            Url for the suggest category link
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.LinkAction">
            <summary>
            Link action: Url , PostBack ,Javascript
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.NumberOfCategoriesToAutoExpand">
            <summary>
            Get/set the number of categories to auto expand.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.AuthBase">
            <summary>
            This is the base class from which all authentication implementations 
            must derive from (currently inherited by <see cref="T:ComLib.Authentication.AuthWeb"/> and
            <see cref="T:ComLib.Authentication.AuthWin"/>).
            </summary>
        </member>
        <member name="F:ComLib.Authentication.AuthBase._adminRoleName">
            <summary>
            Defines the role name for administrators.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsAuthenticated">
            <summary>
            Determine if the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsGuest">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsAdmin">
            <summary>
            Determine if currently logged in user is an administrator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsUser(System.String)">
            <summary>
            Determine if the logged in user is the same as the username supplied.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsUserOrAdmin(System.String)">
            <summary>
            Returns true if the logged in user is the same as the username supplied,
            or if the logged in user is an admin.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.UserId">
            <summary>
            The user id.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Notifications">
            <summary>
            Example for the Notifications namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Notifications.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_BootStrapper">
            <summary>
            Example for the BootStrapSupport namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_BootStrapper.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Upgrade">
            <summary>
            This class provides methods that can be used
            to check for and begin an upgrade process.
            </summary>
        </member>
        <member name="M:ComLib.Upgrade.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize w/ the current version.
            </summary>
            <param name="currentVersion">Current version.</param>
            <param name="catchErrors">Whether or not to catch errors and store them into the error collection.</param>
        </member>
        <member name="M:ComLib.Upgrade.ExecuteIf(System.String,System.String,System.Action{System.Object})">
            <summary>
            Excutes the upgrade callback if conditions match.
            </summary>
            <param name="comparison">Comparison operation ("=", "!=", etc).</param>
            <param name="version">New version string.</param>
            <param name="callback">Callback to execute.</param>
        </member>
        <member name="M:ComLib.Upgrade.ExecuteIf(System.String,System.String,System.String,System.Action{System.Object})">
            <summary>
            Excutes the upgrade callback if conditions match.
            </summary>
            <param name="comparison">Comparison operation ("=", "!=", etc).</param>
            <param name="name">A name for the upgrade.</param>
            <param name="version">New version string.</param>
            <param name="callback">Callback to execute.</param>
        </member>
        <member name="M:ComLib.Upgrade.ExecuteIf(System.String,System.String,System.String,System.String,System.Object,System.Action{System.Object})">
            <summary>
            Excutes the upgrade callback if conditions match.
            </summary>
            <param name="comparison">Comparison operation ("=", "!=", etc).</param>
            <param name="name">A name for the upgrade description.</param>
            <param name="description">A description for the upgrade.</param>
            <param name="args">Args to pass to callback.</param>
            <param name="version">New version.</param>
            <param name="callback">Callback to execute.</param>
        </member>
        <member name="M:ComLib.Upgrade.ToVersion(System.String)">
            <summary>
            Converts a string version to a Version object.
            </summary>
            <param name="versionText">Version text.</param>
            <returns>Instance of equivalent Version object.</returns>
        </member>
        <member name="P:ComLib.Upgrade.CurrentVersion">
            <summary>
            The current version.
            </summary>
        </member>
        <member name="T:ComLib.EnumerableExtensions">
            <summary>
            Extension methods for collections.
            </summary>
        </member>
        <member name="M:ComLib.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute action on each item in enumeration.
            </summary>
            <typeparam name="T">Type of item to use with the method.</typeparam>
            <param name="items">List of items.</param>
            <param name="action">Action to call for each item.</param>
        </member>
        <member name="M:ComLib.EnumerableExtensions.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Joins the specified items.
            </summary>
            <typeparam name="T">Type of item to use with the method.</typeparam>
            <param name="items">The items.</param>
            <param name="delimeter">The delimeter.</param>
            <returns>String with joined items.</returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.JoinDelimited``1(System.Collections.Generic.IList{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Join values using a delimeter.
            </summary>
            <typeparam name="T">Type of item to use with the method.</typeparam>
            <param name="items">The items.</param>
            <param name="delimeter">The delimeter.</param>
            <param name="appender">The function to call when appending info.</param>
            <returns>String with joined items.</returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.JoinDelimitedWithNewLine``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.String,System.Func{``0,System.String})">
            <summary>
            Join values using a delimeter.
            </summary>
            <typeparam name="T">Type of item to use with the method.</typeparam>
            <param name="items">The items.</param>
            <param name="delimeter">The delimeter.</param>
            <param name="newLineAfterCount">Number of lines after which a new line will be inserted.</param>
            <param name="newLineText">New line text to be inserted after each new line is inserted.</param>
            <param name="appender">The function to call when appending info.</param>
            <returns>String with joined items.</returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.AsDelimited``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts an enumerable collection to an delimited string.
            </summary>
            <typeparam name="T">Type of item to use with the method.</typeparam>
            <param name="items">The items.</param>
            <param name="delimeter">The delimeter.</param>
            <returns>Delimited string.</returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified enumerable collection is empty.
            Note: This method has the side effect of moving the position of
            the enumerator back to the starting position. Normally, this
            shouldn't effect anything unless you have a non-standard IEnumerable
            implementation.
            See also <a href="http://stackoverflow.com/questions/41319/checking-if-a-list-is-empty-with-linq"></a>.
            </summary>
            <typeparam name="T">Type of items to use.</typeparam>
            <param name="items">Enumerable to test</param>
            <returns>
            	<c>true</c> if the specified collection is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified enumerable collection is empty.
            Note: This method has the side effect of moving the position of
            the enumerator back to the starting position.
            </summary>
            <typeparam name="T">Type of items to use.</typeparam>
            <param name="items">Enumerable to test</param>
            <returns>
            	<c>true</c> if the specified collection is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.HasAnyNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check for any nulls.
            </summary>
            <typeparam name="T">Type of items to use.</typeparam>
            <param name="items">List of items.</param>
            <returns>True if a null is present in the list.</returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.IsTrueForAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check if any of the items in the collection satisfied by the condition.
            </summary>
            <typeparam name="T">Type of items to use.</typeparam>
            <param name="items">List of items to use.</param>
            <param name="executor">Function to call for each item.</param>
            <returns>True if the executor returned True for at least one item.</returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.IsTrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check if all of the items in the collection satisfied by the condition.
            </summary>
            <typeparam name="T">Type of items to use.</typeparam>
            <param name="items">List of items.</param>
            <param name="executor">Function to call for each item.</param>
            <returns>True if the executor returned true for all items.</returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.ToDictionary``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts a list of items to a dictionary with the items.
            </summary>
            <typeparam name="T">Type of items to use.</typeparam>
            <param name="items">List of items.</param>
            <returns>Converted list as dictionary.</returns>
        </member>
        <member name="T:ComLib.Attributes">
            <summary>
            Reflection utility class for attributes.
            </summary>
        </member>
        <member name="M:ComLib.Attributes.GetAssemblyInfoDescription(System.Type,System.String)">
            <summary>
            Get the description attribute from the assembly associated with <paramref name="type"/>.
            </summary>
            <param name="type">The type who's assembly's description should be obtained.</param>
            <param name="defaultVal">Default value to use if description is not available.</param>
            <returns>Assembly info description.</returns>
        </member>
        <member name="M:ComLib.Attributes.GetClassAttributes``1(System.Object)">
            <summary>
            Gets the attributes of the specified type applied to the class.
            </summary>
            <typeparam name="T">Type of attributes.</typeparam>
            <param name="obj">The obj.</param>
            <returns>List of attributes from the specified object.</returns>
        </member>
        <member name="M:ComLib.Attributes.GetClassAttributesFromAssembly``1(System.String,System.Action{System.Collections.Generic.KeyValuePair{System.Type,``0}})">
            <summary>
            Loads widgets from the assembly name supplied.
            </summary>
            <typeparam name="T">Type of attributes to return.</typeparam>
            <param name="assemblyName">The name of the assembly to load widgets from.</param>
            <param name="action">A callback for the datatype and widgetattribute.</param>
            <returns>List of key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Attributes.GetPropsWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <param name="obj">Object to search in.</param>
            <returns>Dictionary with property information.</returns>
        </member>
        <member name="M:ComLib.Attributes.GetPropsOnlyWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <param name="obj">Object to search in.</param>
            <returns>List with property information.</returns>
        </member>
        <member name="M:ComLib.Attributes.GetPropsWithAttributesList``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <param name="obj">Object to look in.</param>
            <returns>List with property information.</returns>
        </member>
        <member name="M:ComLib.Attributes.GetPropertiesWithAttributesOnTypes``1(System.Collections.Generic.IList{System.Type},System.Action{System.Type,System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,``0}})">
            <summary>
            Gets all the properties associated with the supplied types that have the attribute applied to them.
            </summary>
            <typeparam name="TPropAttrib">The type of the attribute that properties should have</typeparam>
            <param name="types">The list of types to search properties for.</param>
            <param name="action">Callback</param>
            <returns>List with property information.</returns>
        </member>
        <member name="T:ComLib.Lang.OperatorToken">
            <summary>
            Operator as token
            </summary>
        </member>
        <member name="M:ComLib.Lang.OperatorToken.#ctor(System.String)">
            <summary>
            Initialize
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:ComLib.Lang.OperatorToken.ToOp(System.String)">
            <summary>
            Get the operator as an enum
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.OperatorToken.ToToken(System.String)">
            <summary>
            Get the keyword token from the string
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.Helpers.WebFileHelper">
            <summary>
            Helper class for handling uploaded files.
            </summary>
        </member>
        <member name="M:ComLib.Web.Helpers.WebFileHelper.HasFiles(System.Web.HttpRequestBase)">
            <summary>
            Checks if any media files were uploaded by checking the size of each posted file.
            </summary>
            <param name="request">Http request.</param>
            <returns>True if media files were uploaded.</returns>
        </member>
        <member name="M:ComLib.Web.Helpers.WebFileHelper.ValidateMediaFiles(System.Web.HttpRequestBase,System.Int32,System.Int32,System.Action{System.String,System.String})">
            <summary>
            Checks if any media files were uploaded by checking the size of each posted file.
            </summary>
            <param name="request">Http request.</param>
            <param name="maxSizeInK">The maximum size of each file.</param>
            <param name="maxNumFiles">The maximum number of files allowed.</param>
            <param name="errorStorage">Callback for adding errors</param>
            <returns>True if media files were uploaded.</returns>
        </member>
        <member name="T:ComLib.EnumLookupExtensions">
            <summary>
            Enum lookup extensions.
            </summary>
        </member>
        <member name="M:ComLib.EnumLookupExtensions.GetValue(ComLib.EnumLookup,System.Type,System.String,ComLib.IValidationResults)">
            <summary>
            Parses a string after validating it and returns 
            the value of the enumeration it represents.
            </summary>
            <param name="lookup">Enumeration lookup.</param>
            <param name="enumType">Type of enumeration.</param>
            <param name="val">Value of string.</param>
            <param name="results">Validation results.</param>
            <returns>Enumeration value.</returns>
        </member>
        <member name="M:ComLib.EnumLookupExtensions.GetValue(ComLib.EnumLookup,System.Type,System.String,ComLib.IValidationResults,System.String)">
            Parses a string after validating it and returns 
            the value of the enumeration it represents.
            <param name="lookup">Enumeration lookup.</param>
            <param name="enumType">Type of enumeration.</param>
            <param name="val">Value of string.</param>
            <param name="results">Validation results.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Enumeration value.</returns>
        </member>
        <member name="T:ComLib.EnumLookup">
            <summary>
            Class to parse/lookup the value of enums.
            </summary>
        </member>
        <member name="F:ComLib.EnumLookup._enumMap">
            <summary>
             Stores the possible values for various Enum types.
            </summary>
        </member>
        <member name="M:ComLib.EnumLookup.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:ComLib.EnumLookup.Register(System.Type,System.String)">
            <summary>
            Register enum mappings.
            </summary>
            <param name="enumType">Type of enumeration.</param>
            <param name="aliasValuesDelimited">String with delimited values of enumeration.</param>
        </member>
        <member name="M:ComLib.EnumLookup.IsValid(System.Type,System.String)">
            <summary>
            Determines if the string based enum value is valid.
            </summary>
            <param name="enumType">Type of enumeration.</param>
            <param name="val">String based enum value.</param>
            <returns>True if the string represents a valid value.</returns>
        </member>
        <member name="M:ComLib.EnumLookup.GetValue(System.Type,System.String)">
            <summary>
            Get the enum Value.
            </summary>
            <param name="enumType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumLookup.GetValue(System.Type,System.String,System.String)">
            <summary>
            Get the enum Value
            </summary>
            <param name="enumType">Type of enumeration.</param>
            <param name="val">String with value.</param>
            <param name="defaultVal">Default value.</param>
            <returns>Enumeration with corresponding value.</returns>
        </member>
        <member name="M:ComLib.EnumLookup.SetupMappings(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Set the various mappings for an enum value.
            </summary>
            <param name="type">Type of enumeration.</param>
            <param name="enumValues">Dictionary with enumeration values.</param>
            <param name="aliasValuesDelimeted">Delimited string with alias values.</param>
        </member>
        <member name="T:ComLib.Locale.LocalizationResourceProviderDefault">
            <summary>
            Default localization manager.
            This should only be used as the default provider.
            </summary>
        </member>
        <member name="F:ComLib.Locale.LocalizationResourceProviderDefault._instance">
            <summary>
            Used as singleton.
            </summary>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String)">
            <summary>
            Get the resource string associated with the key.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get the resource string associated with the key and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Locale.LocalizationResourceProviderDefault.Instance">
            <summary>
            Get the singleton instance.
            </summary>
        </member>
        <member name="P:ComLib.Locale.LocalizationResourceProviderDefault.Item(System.String)">
            <summary>
            Get / set the resource string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdate">
            <summary>
            StatusUpdate entity.
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Computer">
            <summary>
            Get/Set Computer
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.ExecutionUser">
            <summary>
            Get/Set ExecutionUser
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BusinessDate">
            <summary>
            Get/Set BusinessDate
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BatchName">
            <summary>
            Get/Set BatchName
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BatchId">
            <summary>
            Get/Set BatchId
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BatchTime">
            <summary>
            Get/Set BatchTime
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Task">
            <summary>
            Get/Set Task
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Status">
            <summary>
            Get/Set Status
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.StartTime">
            <summary>
            Get/Set StartTime
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.EndTime">
            <summary>
            Get/Set EndTime
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Ref">
            <summary>
            Get/Set Ref
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Comment">
            <summary>
            Get/Set Comment
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositoryLinq2Sql`1">
            <summary>
            Repository pattern providing CRUD( Create / Retrieve / Update / Delete ) and other methods
            using Linq 2 Sql.
            
            NOTES:
            1. This is slightly Hybrid version of plain dynamic sql, Linq2Sql, and stored procs
            2. This requires a RowMapper and stored procedures if using the GetByFilter and GetRecent methods
            3. This uses dynamic sql for the Find methods
            4. Linq 2 Sql is used for Create, Update, Get, Delete methods.
            5. Linq 2 Sql itself is a limited solution with the following restrictions:
            
                -a. Can only be used for SQL Server
                -b. Only supports a 1-1 object to table mapping.
                -c. The Update( T entity ) method is a workaround to the inability to attach POCO's( detached entities ) to a different DataContext.
               
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.RepositoryBase`1">
            <summary>
            Repository base class.
            </summary>
            <typeparam name="T">Type of repository items.</typeparam>
        </member>
        <member name="T:ComLib.Entities.RepositoryQueryable">
            <summary>
            Repository base class.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryQueryable._connectionInfo">
            <summary>
            Connection information.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryQueryable._tableName">
            <summary>
            Database table name.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryQueryable._db">
            <summary>
            Database instance.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryQueryable._namedFilters">
            <summary>
            List of filters.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryQueryable._paramPrefix">
            <summary>
            Prefix used for sql parameters.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Count">
            <summary>
            Total number of records.
            </summary>
            <returns>Total number of records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Count(ComLib.Data.IQuery)">
            <summary>
            Total number of records with filter.
            </summary>
            <param name="criteria">Filter to apply before getting totalrecords.</param>
            <returns>Number of matched records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Count(System.String)">
            <summary>
            Total number of records with named filter.
            </summary>
            <param name="namedFilter">Filter to apply before getting totalrecords.</param>
            <returns>Number of matched records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.CountBySql(System.String)">
            <summary>
            Total number of records with sql expression.
            </summary>
            <param name="sql">Sql expression.</param>
            <returns>Number of matched records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Sum(System.String)">
            <summary>
            Sum("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Sum on</param>
            <returns>Sum of items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Sum(System.String,ComLib.Data.IQuery)">
            <summary>
            Sum("cost", filter).
            </summary>
            <param name="columnName">Name of column to use.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>Sum of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Sum(System.String,System.String)">
            <summary>
            Sum("cost", "Popular Products").
            </summary>
            <param name="columnName">Name of column to use.</param>
            <param name="namedFilter">Criteria to match.</param>
            <returns>Sum of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Min(System.String)">
            <summary>
            Min("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Min on</param>
            <returns>Min of items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Min(System.String,ComLib.Data.IQuery)">
            <summary>
            Min("cost", filter).
            </summary>
            <param name="columnName">Name of column.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>Min of items matching the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Min(System.String,System.String)">
            <summary>
            Min("cost", "Popular Products").
            </summary>
            <param name="columnName">Name of column.</param>
            <param name="namedFilter">Criteria to match.</param>
            <returns>Min of items matching the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Max(System.String)">
            <summary>
            Max("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Max on</param>
            <returns>Max of items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Max(System.String,ComLib.Data.IQuery)">
            <summary>
            Max("cost", filter).
            </summary>
            <param name="columnName">Name of column.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>Max of matched items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Max(System.String,System.String)">
            <summary>
            Max("cost", "Popular Products").
            </summary>
            <param name="columnName">Name of column.</param>
            <param name="namedFilter">Criteria to match.</param>
            <returns>Max of matched items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Avg(System.String)">
            <summary>
            Avg("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Avg on</param>
            <returns>Average of items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Avg(System.String,ComLib.Data.IQuery)">
            <summary>
            Avg("cost", filter).
            </summary>
            <param name="columnName">Name of column.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>Average of matched items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Avg(System.String,System.String)">
            <summary>
            Avg("cost", "Popular Products").
            </summary>
            <param name="columnName">Name of column.</param>
            <param name="namedFilter">Criteria to match.</param>
            <returns>Average of matched items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Distinct``1(System.String)">
            <summary>
            Get distinct values from the specified column.
            </summary>
            <typeparam name="TVal">Type of value to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <returns>List of distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Distinct``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Get distinct values from the specified column.
            </summary>
            <typeparam name="TVal">Type of value to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>List of distinct values matching the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Distinct``1(System.String,System.String)">
            <summary>
            Get distinct values from the specified column.
            </summary>
            <typeparam name="TVal">Type of value to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <param name="namedFilter">Criteria to match.</param>
            <returns>List of distinct values matching the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group``1(System.String)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup">Type of group to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <returns>List with key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group``1(System.String,ComLib.Data.IQuery)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup">Type of group to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>List with key/value pairs that match.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group``1(System.String,System.String)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup">Type of group to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <param name="namedFilter">Criteria to match.</param>
            <returns>List of key/value pairs that match.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.GroupNamedFilter(System.String,System.String[])">
            <summary>
            Get datatable using named filter and groupby on multiple columns.
            </summary>
            <param name="namedFilter">Criteria to match.</param>
            <param name="columnNames">Array with column names.</param>
            <returns>Data table with information of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group(ComLib.Data.IQuery,System.String[])">
            <summary>
            Get datatable using mutliple columns in group by and criteria/filter.
            </summary>
            <param name="criteria">Criteria to match.</param>
            <param name="columnNames">Array with column names.</param>
            <returns>Data table with information of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTable">
            <summary>
            Get Table containing all the records.
            </summary>
            <returns>Data table with information of all items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTable(ComLib.Data.IQuery)">
            <summary>
            Get datatable using the IQuery filter.
            </summary>
            <param name="criteria">Inclusion criteria.</param>
            <returns>Data table with information of matched items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTable(System.String)">
            <summary>
            Get datatable using the filtername.
            </summary>
            <param name="filterName">Inclusion criteria.</param>
            <returns>Data table with information of matched items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTableBySql(System.String)">
            <summary>
            Get datatable using the sql filter.
            </summary>
            <param name="sql">Sql to execute.</param>
            <returns>Resulting data table.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Any(System.String)">
            <summary>
            Checks whether there are any records that match the sql.
            </summary>
            <param name="filterName">Filter to apply.</param>
            <returns>True if at least one record matches the filter criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.AnyBySql(System.String)">
            <summary>
            Checks whether there are any records that match the sql.
            </summary>
            <param name="sql">Sql filter.</param>
            <returns>True if at least one record matches the filter criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Any(ComLib.Data.IQuery)">
            <summary>
            Chekcs where there are any records that match the criteria filter.
            </summary>
            <param name="criteria">Criteria to match.</param>
            <returns>True if at least one record matches the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.AddNamedFilter(System.String,ComLib.Data.IQuery)">
            <summary>
            Add named filter.
            e.g. "Published last week" => Criteria.Where("CreateDate").Between(1.Week.Ago, DateTime.Now)
            </summary>
            <param name="filterName">Filter to apply.</param>
            <param name="criteria">Criteria to match.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.InternalDistinct``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Retrieves distinct items after applying the supplied criteria.
            </summary>
            <typeparam name="TVal">Type of items to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>List with distinct items of records that match the criteria.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.InternalGroup``1(System.String,ComLib.Data.IQuery)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup">Type of grouping.</typeparam>
            <param name="columnName">Name of column.</param>
            <param name="criteria">Criteria to match.</param>
            <returns>List fo key/value pairs of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.GetNamedFilter(System.String,System.Boolean)">
            <summary>
            Returns a named filter by its name.
            </summary>
            <param name="filterName">Name of filter to search for.</param>
            <param name="throwIfNotFound">True to throw a <see cref="T:System.ArgumentException"/> if 
            the filter is not found.</param>
            <returns>Named filter.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ExecuteAggregate``1(System.String,System.String,ComLib.Data.IQuery)">
            <summary>
            Sum,Min,Max,Count,Avg execution method.
            </summary>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="funcName">sum | min | max | avg | count</param>
            <param name="columnName">name of the column to perform the function on.</param>
            <param name="criteria">Criteria for filters.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ExecuteAggregateWithFilter``1(System.String,System.String,System.String)">
            <summary>
            Sum,Min,Max,Count,Avg execution method.
            </summary>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="funcName">sum | min | max | avg | count</param>
            <param name="columnName">name of the column to perform the function on.</param>
            <param name="filter">Filter to apply in where clause.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.BuildSqlSelect(ComLib.Data.IQuery,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Builds a select SQL based on parameters.
            </summary>
            <param name="criteria">Criteria to apply to result.</param>
            <param name="cols">Delimited list of columns to include.</param>
            <param name="fromTable">Table to select from.</param>
            <param name="whereFilter">Sql Where filter.</param>
            <param name="groupByCols">Sql GroupBy expression.</param>
            <param name="useLimit">Rows to limit to.</param>
            <returns>Constructed SQL select statement.</returns>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.Database">
            <summary>
            The database db.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.Connection">
            <summary>
            The connection info object.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.ConnectionString">
            <summary>
            Connection info object.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.TableName">
            <summary>
            Get / Set the table name.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.ParamPrefix">
            <summary>
            Get/set the parameter prefix.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.NamedFilters">
            <summary>
            Dictionary of named filters/criteria.
            Useful when doing Count("ActiveUsers");
            Or Avg("Rating", "PopularPosts")
            </summary>
        </member>
        <member name="T:ComLib.Entities.IRepository`1">
            <summary>
            Interface for a Repository pattern to support CRUD and Find operations on some underlying datastore(sql database).
            </summary>
            <typeparam name="T">Type of entities.</typeparam>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Create(`0)">
            <summary>
            Create an entity.
            </summary>
            <param name="entity">Instance of entity.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create a list of entities.
            </summary>
            <param name="entities">List of entities.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Create(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entity conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entity">Entity to create.</param>
            <param name="checkFields">Matching filters.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Copy(`0)">
            <summary>
            Copies the entity and returns the copy.
            </summary>
            <param name="entity">Copy of entity.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Get(System.Object)">
            <summary>
            Retrieve the entity by it's key/id.
            </summary>
            <param name="id">Id to entity.</param>
            <returns>Matching entity.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.GetAll">
            <summary>
            Retrieve all the entities.
            </summary>
            <returns>List with all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.GetAllItems">
            <summary>
            Retrieve all the entities into a non-generic list.
            </summary>
            <returns>List with all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Update(`0)">
            <summary>
            Update the entity.
            </summary>
            <param name="entity">Entity to update.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Create a list of entities.
            </summary>
            <param name="entities">List of entities to create.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Delete(System.Object)">
            <summary>
            Delete the entitiy by it's key/id.
            </summary>
            <param name="id">Id of entity to delete.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Delete(`0)">
            <summary>
            Delete the entity.
            </summary>
            <param name="entity">Entity to delete.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression">Expression to use for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Delete(ComLib.Data.IQuery)">
            <summary>
            Delete by criteria.
            </summary>
            <param name="criteria">Criteria for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.DeleteByNamedFilter(System.String)">
            <summary>
            Delete by criteria.
            </summary>
            <param name="filterName">Criteria for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.DeleteAll">
            <summary>
            Delete all entities from the repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Save(`0)">
            <summary>
            Create or update an entity.
            </summary>
            <param name="entity">Entity to save/update.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Create or update all entities.
            </summary>
            <param name="entities">List of entities to create/update.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the Sum of the values in the column name represented by the supplied expression
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Sum of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the Min of the values in the column name represented by the supplied expression
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Sum of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the Max of the values in the column name represented by the supplied expression
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Max of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Avg(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the Avg of the values in the column name represented by the supplied expression.
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Average of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Distinct``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets a list of distinct values matched by the supplied expression.
            </summary>
            <typeparam name="TVal">Type of values to return.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List of distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Group``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets a list of key/value pairs matched by the supplied expression.
            </summary>
            <typeparam name="TGroup">Type of group to use.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List of key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Increment(System.String,System.Int32,System.Int32)">
            <summary>
            Increments an entity's field.
            </summary>
            <param name="fieldName">Field to increment.</param>
            <param name="by">Increment amount.</param>
            <param name="id">Id of entity.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Decrement(System.String,System.Int32,System.Int32)">
            <summary>
            Decrements an entity's field.
            </summary>
            <param name="fieldName">Field to decrement.</param>
            <param name="by">Decrement amount.</param>
            <param name="id">Id of entity.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increment an entity's field.
            </summary>
            <param name="exp">Field matching expression.</param>
            <param name="by">Increment amount.</param>
            <param name="id">Id of entity.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrement an entity's field.
            </summary>
            <param name="exp">Field matching expression.</param>
            <param name="by">Decrement amount.</param>
            <param name="id">Id of entity.</param>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.ToLookUp">
            <summary>
            Create dictionary of all entities using the Id.
            </summary>
            <returns>Dictionary with entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.ToLookUp(System.String)">
            <summary>
            Create dictionary of all entities using the Id after applying named filter.
            </summary>
            <returns>Dictionary with entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.ToLookUp(ComLib.Data.IQuery{`0})">
            <summary>
            Create dictionary of all entities using the Id after applying named filter.
            </summary>
            <returns>Dictionary with entities.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.ToLookUpMulti``1(System.String)">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2.
            </summary>
            <typeparam name="Id2">Type of id.</typeparam>
            <param name="propName">Name of propery.</param>
            <returns>List with lookups.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.ToLookUpMulti``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2.
            </summary>
            <typeparam name="Id2">Type of id.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List with lookups.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.ToLookUpMulti``1(System.String,System.String)">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2 after applying the named Filter.
            </summary>
            <typeparam name="Id2">Type of id.</typeparam>
            <param name="propName">Name of property.</param>
            <param name="filterName">Filter name.</param>
            <returns>List with lookups.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Find(System.String)">
            <summary>
            Find by using the sql string.
            </summary>
            <param name="sql">SQL to use.</param>
            <returns>List of items.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Find(ComLib.Data.IQuery)">
            <summary>
            Find by query.
            </summary>
            <param name="criteria">Criteria to match.</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.FindByNamedFilter(System.String)">
            <summary>
            Find by named filter.
            </summary>
            <param name="namedFilter">e.g. "Most Popular Posts"</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Find(System.String,System.Boolean)">
            <summary>
            Find using the sql provided.
            </summary>
            <param name="sql">SQL to use.</param>
            <param name="isFullSql">If true, assumes that the sql contains "select * from table ..."</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Find items by page using sql.
            </summary>        
            <param name="sql">Sql to use for filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of matched items by page.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Find items by page using criteria.
            </summary>
            <param name="criteria">Criteria object representing filter.</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of matched items by page.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.FindByNamedFilter(System.String,System.Int32,System.Int32)">
            <summary>
            Find items by page using named filter.
            </summary>
            <param name="filterName">Filter to apply.</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of matched items by page.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page based on latest / most recent create date.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of items in page.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.FindRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Find the recent items and convert them to a different type.
            </summary>
            <typeparam name="T2">Type to convert to.</typeparam>
            <param name="pageNumber">Number of page.</param>
            <param name="pageSize">Size of page.</param>
            <returns>List of items in page.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.First(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter">Filter to match.</param>
            <returns>First matched item.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.First(ComLib.Data.IQuery)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter">Filter to match.</param>
            <returns>First matched item.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepository`1.FirstByNamedFilter(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filterName">Filter to match.</param>
            <returns>First matched item.</returns>
        </member>
        <member name="F:ComLib.Entities.RepositoryBase`1._rowMapper">
            <summary>
            Row mapper used to map objects from datastore back to object.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryBase`1._onRowsMappedHandler">
            <summary>
            Callback handler for after rows have been mapped.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Create(`0)">
            <summary>
            Create the entity in the datastore.
            </summary>
            <param name="entity">Instance of entity.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create list of entities.
            </summary>
            <param name="entities">List of entities.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Create(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities supplied conditionally based on whether it exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entity">Entity to create.</param>
            <param name="checkFields">Matching filters.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Copy(`0)">
            <summary>
            Copies the entity and returns the copy.
            </summary>
            <param name="entity">Copy of entity.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Get(System.Object)">
            <summary>
            Get item by id.
            </summary>
            <param name="id">Id to entity.</param>
            <returns>Matching entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetAll">
            <summary>
            Get all the entities from the datastore.
            </summary>
            <returns>List with all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetAllItems">
            <summary>
            Get all the items.
            </summary>
            <returns>List with all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Update(`0)">
            <summary>
            Update the entity in the datastore.
            </summary>
            <param name="entity">Entity to update.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Create list of entities.
            </summary>
            <param name="entities">List of entities to create.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(System.Object)">
            <summary>
            Delete by the entity id.
            </summary>
            <param name="id">Id of entity to delete.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(`0)">
            <summary>
            Delete by the entity.
            </summary>
            <param name="entity">Entity to delete.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.DeleteAll">
            <summary>
            Delete all entities from the repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression">Expression to use for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(ComLib.Data.IQuery)">
            <summary>
            Delete using the Criteria object.
            </summary>
            <param name="criteria">Criteria for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.DeleteByNamedFilter(System.String)">
            <summary>
            Delete by named filter
            </summary>
            <param name="filterName">Criteria for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Save(`0)">
            <summary>
            Save the entity.
            </summary>
            <param name="entity">Entity to save/update.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Create list of entities.
            </summary>
            <param name="entities">List of entities to create/update.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Sum of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Min using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Sum of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Max using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Max of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Avg(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp">Expression representing the column name via property name</param>
            <returns>Average of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Distinct``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum using expression. e.g. p => p.FirstName;
            </summary>
            <typeparam name="TVal">Type of values to return.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List of distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Group``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Group(date)(CreateDate)
            </summary>
            <typeparam name="TGroup">Type of group to use.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List of key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Increment(System.String,System.Int32,System.Int32)">
            <summary>
            Increments the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="by">The by.</param>
            <param name="id">The id of the row to increment.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Decrement(System.String,System.Int32,System.Int32)">
            <summary>
            Decrements the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="by">The by.</param>
            <param name="id">The id of the row to increment.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the field specified by the expression.
            </summary>
            <param name="exp">The fieldname as an expression.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the field specified by the expression.
            </summary>
            <param name="exp">The exp.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUp">
            <summary>
            Create dictionary of all entities using the Id.
            </summary>
            <returns>Dictionary with entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUp(System.String)">
            <summary>
            Create dictionary of all entities using the Id.
            </summary>
            <returns>Dictionary with entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUp(ComLib.Data.IQuery{`0})">
            <summary>
            Create dictionary of all entities using the Id.
            </summary>
            <returns>Dictionary with entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUpMulti``1(System.String)">
            <summary>
            Create dictionary of all entities using the Id and the Field name supplied by <paramref name="propName"/>
            </summary>
            <typeparam name="Id2">Type of id.</typeparam>
            <param name="propName">Name of propery.</param>
            <returns>List with lookups.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUpMulti``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2
            </summary>
            <typeparam name="Id2">Type of id.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List with lookups.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUpMulti``1(System.String,System.String)">
            <summary>
            Create dictionary of all entities using the Id and the Field name supplied by <paramref name="propName"/>
            </summary>
            <typeparam name="Id2">Type of id.</typeparam>
            <param name="propName">Name of property.</param>
            <param name="filterName">Filter name.</param>
            <returns>List with lookups.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(System.String)">
            <summary>
            Find all records matching the query string.
            </summary>
            <param name="sql">SQL to use.</param>
            <returns>List of items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(ComLib.Data.IQuery)">
            <summary>
            Find by query
            </summary>
            <param name="query">The query used in the find.</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindByNamedFilter(System.String)">
            <summary>
            Find by named filter : e.g. FindByNamedFilter("PopularPosts");
            </summary>
            <param name="namedFilter">e.g. "Most Popular Posts"</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(System.String,System.Boolean)">
            <summary>
            Find by filter.
            </summary>
            <param name="queryString">The query, this can be either just a filter
            after the where clause or the entire sql</param>
            <param name="isFullSql">Whether or not the query supplid contains select and from clauses.</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page
            </summary>
            <param name="criteria">Criteria object representing filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of matched items by page.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindByNamedFilter(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using named filter
            </summary>
            <param name="filterName">Named filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of matched items by page.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page
            </summary>
            <param name="sql">Sql to use as filter.</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of matched items by page.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page based on latest / most recent create date.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>List of items in page.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Find the recent items and convert them to a different type.
            </summary>
            <typeparam name="T2">The type to convert to.</typeparam>
            <param name="pageNumber">The page number to get.</param>
            <param name="pageSize">Number of items in each page.</param>
            <returns>List of items in page.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.First(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter">Filter to match.</param>
            <returns>First matched item.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.First(ComLib.Data.IQuery)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns>First matched item.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FirstByNamedFilter(System.String)">
            <summary>
            Get the first item after applying the named filter.
            </summary>
            <param name="filterName">Named filter.</param>
            <returns>First matched item.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.OnRowsMapped(System.Collections.Generic.IList{`0})">
            <summary>
            Provides hook for doing additional processing after items have been mapped.
            </summary>
            <param name="items">List of items.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetOne``1(System.String)">
            <summary>
            Get one item in the 1-to-1 relationship.
            </summary>
            <typeparam name="TRelation">The type of the item in the 1-to-1 relationship.</typeparam>
            <param name="filter">Named filter.</param>
            <returns>The 1-to-1 relationship.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetMany``1(System.String)">
            <summary>
            Get all the items in the 1-to-many relation
            </summary>
            <typeparam name="TRelation">The type of the item in the many relationship.</typeparam>
            <param name="filter">Named filter.</param>
            <returns>List of relations.</returns>
        </member>
        <member name="P:ComLib.Entities.RepositoryBase`1.RowMapper">
            <summary>
            Entity row mapper.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryBase`1.OnRowsMappedCallBack">
            <summary>
            Callback to use for OnRowsMapped
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryBase`1.IdentityStatement">
            <summary>
            Statement used to get the identity of the last inserted row.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize.
            </summary>
            <param name="connectionInfo">Connection information.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize.
            </summary>
            <param name="connectionInfo">Connection information.</param>
            <param name="db">Database.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize.
            </summary>
            <param name="connectionInfo">Connection information.</param>
            <param name="db">Database.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Create(`0)">
            <summary>
            Create the entity.
            </summary>
            <param name="entity">Entity to create.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create the entity.
            </summary>
            <param name="entities">List of entities to create.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Update(`0)">
            <summary>
            Update the entity.
            </summary>
            <param name="updatedEntity">Entity to update.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Get(System.Object)">
            <summary>
            Get the entity by the id.
            </summary>
            <param name="id">Id to entity.</param>
            <returns>Corresponding entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.GetAll">
            <summary>
            Get all the entities in the database as a List.
            </summary>
            <returns>List with all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Delete(System.Object)">
            <summary>
            Delete the entity from the repository.
            </summary>
            <param name="id">Id to entity.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get page of records using filter.
            </summary>
            <param name="filter">Filter to apply.</param>
            <param name="pageNumber">Page number.</param>
            <param name="pageSize">Page size.</param>
            <returns>Paged list with matching records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get recents posts by page.
            </summary>
            <param name="pageNumber">Page number.</param>
            <param name="pageSize">Page size.</param>
            <returns>List with matching records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Execute(System.Action{System.Data.Linq.DataContext,System.Data.Linq.Table{`0}})">
            <summary>
            Execute the executor providing it the datacontext and table.
            </summary>
            <param name="executor">Action to execute.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Execute(System.Action{System.Data.Linq.DataContext})">
            <summary>
            Execute the executor providing it the datacontext only.
            </summary>
            <param name="executor">Action to execute.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.CopyValues(`0,`0)">
            <summary>
            Copies all the mapped column property values from the updatedEntity to the original.
            </summary>
            <param name="updatedEntity">Updated entity.</param>
            <param name="original">Original entity.</param>
        </member>
        <member name="T:ComLib.Patterns.INodeWithIds">
            <summary>
            Interface designating a node with id, parent id and name.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.INodeWithIds.Id">
            <summary>
            Id of the node.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.INodeWithIds.Name">
            <summary>
            Name of the node.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.INodeWithIds.ParentId">
            <summary>
            Id of the parent of this node.
            </summary>
        </member>
        <member name="T:ComLib.Patterns.NodeRoot`1">
            <summary>
            Node to represent a root node.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
        </member>
        <member name="T:ComLib.Patterns.Node`1">
            <summary>
            Class to represent a single node in a tree.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
        </member>
        <member name="M:ComLib.Patterns.Node`1.ToNodes``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert the list of items to nodes via the interface.
            </summary>
            <typeparam name="TNode">Type of node to convert to.</typeparam>
            <param name="items">List of node items.</param>
            <returns>Converted node.</returns>
        </member>
        <member name="F:ComLib.Patterns.Node`1._root">
            <summary>
            Root node.
            </summary>
        </member>
        <member name="F:ComLib.Patterns.Node`1._parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="F:ComLib.Patterns.Node`1._children">
            <summary>
            Children nodes.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Node`1.#ctor">
            <summary>
            Allow default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Node`1.#ctor(`0)">
            <summary>
            Initialize w/ item
            </summary>
            <param name="item">Node item to initialize with.</param>
        </member>
        <member name="F:ComLib.Patterns.Node`1.Item">
            <summary>
            The item representing this node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Node`1.Add(`0)">
            <summary>
            Add a child node.
            </summary>
            <param name="node">Child node to add.</param>
        </member>
        <member name="M:ComLib.Patterns.Node`1.Add(ComLib.Patterns.Node{`0})">
            <summary>
            Add a child node.
            </summary>
            <param name="child">Child node to add.</param>
        </member>
        <member name="M:ComLib.Patterns.Node`1.Remove">
            <summary>
            Remove the last node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Node`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specific index.
            </summary>
            <param name="ndx">Index to remove at.</param>
        </member>
        <member name="M:ComLib.Patterns.Node`1.Clear">
            <summary>
            Remove all the elements.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Node`1.Root">
            <summary>
            Root node.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Node`1.Parent">
            <summary>
            Parent of this item.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Node`1.Children">
            <summary>
            The children of this item.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Node`1.Count">
            <summary>
            Number of children.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Node`1.HasChildren">
            <summary>
            Determine if this has children.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.NodeRoot`1.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.NodeRoot`1.Item(System.Int32)">
            <summary>
            Get node by it's id.
            </summary>
            <param name="id">Node id.</param>
            <returns>Node designated by id.</returns>
        </member>
        <member name="P:ComLib.Patterns.NodeRoot`1.Item(System.String)">
            <summary>
            Get the node by it's name.
            </summary>
            <param name="id">Node name.</param>
            <returns>Node designated by name.</returns>
        </member>
        <member name="T:ComLib.Models.StringClob">
            <summary>
            This structure represents the StringCLob type.
            </summary>
        </member>
        <member name="M:ComLib.Models.StringClob.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="T:ComLib.Models.Image">
            <summary>
            This structure represents the Image type.
            </summary>
        </member>
        <member name="T:ComLib.Models.CustomType">
            <summary>
            This structure represents a custom type.
            </summary>
        </member>
        <member name="M:ComLib.Models.CustomType.#ctor(System.String)">
            <summary>
            Default class constructor.
            </summary>
            <param name="name">Name of custom type.</param>
        </member>
        <member name="M:ComLib.Models.CustomType.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="P:ComLib.Models.CustomType.Name">
            <summary>
            Get/set the name of the custom type.
            </summary>
        </member>
        <member name="T:ComLib.Models.DbCreateType">
            <summary>
            This enumeration lists possible creation methods.
            </summary>
        </member>
        <member name="F:ComLib.Models.DbCreateType.DropCreate">
            <summary>
            Drop and create.
            </summary>
        </member>
        <member name="F:ComLib.Models.DbCreateType.Create">
            <summary>
            Just create.
            </summary>
        </member>
        <member name="F:ComLib.Models.DbCreateType.Update">
            <summary>
            Update.
            </summary>
        </member>
        <member name="T:ComLib.Models.Model">
            <summary>
            DomainModel representing class/table mappings.
            </summary>
        </member>
        <member name="M:ComLib.Models.Model.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="M:ComLib.Models.Model.#ctor(System.String)">
            <summary>
            Creates a new instance with a given model name.
            </summary>
            <param name="name">The model name.</param>
        </member>
        <member name="M:ComLib.Models.Model.AddProperty``1(System.String)">
            <summary>
            Adds a property to the mode.
            </summary>
            <typeparam name="T">Type of property to add.</typeparam>
            <param name="name">Name of property to add.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.MaxLength(System.String)">
            <summary>
            Sets the maxlength property.
            </summary>
            <param name="max">Max length.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.DefaultTo(System.Object)">
            <summary>
            Sets the default value.
            </summary>
            <param name="val">Default value.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.Range(System.String,System.String)">
            <summary>
            Sets the min and max lengths.
            </summary>
            <param name="min">Minimum length.</param>
            <param name="max">Maximum length.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.BuildCode">
            <summary>
            Determines that code and validations should be generated for this model.
            </summary>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.NoValidation">
            <summary>
            Determines that no validation should be generated for this model.
            </summary>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.BuildTable(System.String)">
            <summary>
            Sets the table name and determines that a table should be generated.
            </summary>
            <param name="tableName">Name of table.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.BuildInstallSqlFile">
            <summary>
            Automatically determines the install sql file name.
            </summary>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.NameSpaceIs(System.String)">
            <summary>
            Sets the namespace for the model.
            </summary>
            <param name="nameSpace">Namespace.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.InheritsFrom(System.String)">
            <summary>
            Sets the model from which this one inherits from.
            </summary>
            <param name="modelName">Name of model from which this inherits from.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.BuildActiveRecordEntity">
            <summary>
            Automatically generates the list of exclude files and the repository type
            for an active record entity.
            </summary>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.RegExConst(System.String)">
            <summary>
            Sets the regular expression pattern to be used by this instance
            and defines that the regular expression is a constant.
            </summary>
            <param name="regExPattern">Regular expression pattern.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.RegEx(System.String)">
            <summary>
            Sets the regular expression patter to be used by this instance.
            </summary>
            <param name="regExPattern">Regular expression pattern.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.HasComposition(System.String)">
            <summary>
            Adds composition information to this instance.
            </summary>
            <param name="modelName">Name of model.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.HasInclude(System.String)">
            <summary>
            Adds a new include.
            </summary>
            <param name="modelName">Model name to include.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.HasOne(System.String)">
            <summary>
            Adds a new one-to-one relation to another model.
            </summary>
            <param name="modelName">Name of model to add relation to.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.HasMany(System.String)">
            <summary>
            Adds a one-to-many relation to another model.
            </summary>
            <param name="modelName">Name of model to add relation to.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.OnKey(System.String)">
            <summary>
            Sets the relation key.
            </summary>
            <param name="key">Name of relation key.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="M:ComLib.Models.Model.OnForeignKey(System.String)">
            <summary>
            Sets the foreign key. 
            </summary>
            <param name="key">Name of foreign key.</param>
            <returns>The current instance of the model.</returns>
        </member>
        <member name="P:ComLib.Models.Model.Name">
            <summary>
            Get/set the model name.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.TableName">
            <summary>
            Get/set the model table name.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.NameSpace">
            <summary>
            Get/set the model namespace.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Inherits">
            <summary>
            Get/set the model inheritance chain.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateTable">
            <summary>
            Get/set whether to generate a table.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateOrMap">
            <summary>
            Get/set whether to generate or map.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateCode">
            <summary>
            Get/set whether to generate code.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateValidation">
            <summary>
            Get/set whether to generate validations.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateTests">
            <summary>
            Get/set whether to generate tests.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateUI">
            <summary>
            Get/set whether to generate user interfaces.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateRestApi">
            <summary>
            Get/set whether to generate a REST API.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GenerateFeeds">
            <summary>
            Get/set whether to generate feeds.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.IsWebUI">
            <summary>
            Get/set whether this is a web UI.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Properties">
            <summary>
            Get/set the list of properties.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.PropertiesSortOrder">
            <summary>
            Get/set the properties sort order.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.ExcludeFiles">
            <summary>
            Get/set the exclude files.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.IsComposite">
            <summary>
            Get/set the composite flag.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.InstallSqlFile">
            <summary>
            Get/set the install sql file.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.RepositoryType">
            <summary>
            Get /set the repository type.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Includes">
            <summary>
            List of names of model whose properties to include.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.ComposedOf">
            <summary>
            List of objects that compose this model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.UI">
            <summary>
            Get/set the list of specifications of user interface generation.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.OneToMany">
            <summary>
            One-to-many relationships.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.OneToOne">
            <summary>
            One-to-many relationships.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Validations">
            <summary>
            Validations to perform on entity.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.ManagedBy">
            <summary>
            List of roles that can manage ( delete ) instances of this model.
            </summary>
            <example>ManagedBy = new List(string){ "Owner", "Moderator", "Admin" }; </example>
        </member>
        <member name="P:ComLib.Models.Model.LookupOn">
            <summary>
            List of properties that can be used to lookup up an entity.
            e.g. These should typically be the Id ( integer ) and "Name" ( string )
            </summary>
            <example>LookupOn = new List(string){ "Id", "Name" };</example>
        </member>
        <member name="P:ComLib.Models.Model.AssemblyName">
            <summary>
            Assembly name.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Settings">
            <summary>
            Additional settings to make it easy to add new settings dynamically.
            Also allows for inheritance.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Required">
            <summary>
            Sets the required property and returns this instance of model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Key">
            <summary>
            Sets the key property and returns this instance of model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Persist">
            <summary>
            Sets the createcolumn property and returns this instance of model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Code">
            <summary>
            Sets the createcode property and returns this instance of model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.NotPersisted">
            <summary>
            Clears the createcolumn property and returns this instance of model. 
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.NoCode">
            <summary>
            Clears the createcode property and returns this instance of model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.GetterOnly">
            <summary>
            Sets the isgetteronly property and returns this instance of model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Mod">
            <summary>
            Get this instance.
            </summary>
        </member>
        <member name="T:ComLib.Models.Include">
            <summary>
            Composition information.
            </summary>
        </member>
        <member name="M:ComLib.Models.Include.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="refModel">The name of the referenced model.</param>
        </member>
        <member name="P:ComLib.Models.Include.Name">
            <summary>
            Name of the model that in the <see cref="T:ComLib.Models.ModelContainer"/> that
            represents this composition.
            </summary>
        </member>
        <member name="P:ComLib.Models.Include.GenerateOrMap">
            <summary>
            Get/set the generateormap flag.
            </summary>
        </member>
        <member name="P:ComLib.Models.Include.GenerateCode">
            <summary>
            Get/set whether to generate code.
            </summary>
        </member>
        <member name="P:ComLib.Models.Include.GenerateUI">
            <summary>
            Get/set whether to generate a user interface.
            </summary>
        </member>
        <member name="P:ComLib.Models.Include.ModelRef">
            <summary>
            Get/set the model referenced.
            </summary>
        </member>
        <member name="T:ComLib.Models.Composition">
            <summary>
            Composition information.
            </summary>
        </member>
        <member name="M:ComLib.Models.Composition.#ctor(System.String)">
            <summary>
            Default class constructor.
            </summary>
            <param name="refModel">The referenced model.</param>
        </member>
        <member name="T:ComLib.Models.ValidationItem">
            <summary>
            Validation definition for a specific property.
            </summary>
        </member>
        <member name="M:ComLib.Models.ValidationItem.#ctor(System.String,System.Type)">
            <summary>
            Initialize the validator the property.
            </summary>
            <param name="property">The property.</param>
            <param name="validator">The type validator.</param>
        </member>
        <member name="P:ComLib.Models.ValidationItem.PropertyToValidate">
            <summary>
            The name of the property on the entity to validate.
            </summary>
        </member>
        <member name="P:ComLib.Models.ValidationItem.PropertyValidator">
            <summary>
            The datatype of the validator to use for validating this property.
            </summary>
        </member>
        <member name="P:ComLib.Models.ValidationItem.IsStatic">
            <summary>
            Whether or not the validator is instance based or can be statically called.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogInstance">
            <summary>
            This is used scoping a logger with a particular class.
            e.g. Have a logger only for class "BlogPostService".
            This is analogous to LogManger.Get(typeof(BlogPostService)) in Log4Net.
            </summary>
            <example>
            ILog logger = Logger.Get&lt;BlogPostService&gt;("default");
            logger.Info("testing");
            </example>
        </member>
        <member name="T:ComLib.Logging.LogBase">
            <summary>
            Provides basic methods for implementation classes,
            including the Wrapper class around Log4Net.
            </summary>
        </member>
        <member name="T:ComLib.Logging.ILog">
            <summary>
            Simple interface for logging information.
            This extends the common Log4net interface by 
            
            1. Taking additional argument as an object array
            2. Exposing a simple Log method that takes in the loglevel.
            
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogEvent)">
            <summary>
            Logs the specified level.
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILog.Warn(System.Object)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a warning message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a warning message with exception and additional arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs an error message with the exception additional arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a debug message with the exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Fatal(System.Object)">
            <summary>
            Logs a Fatal message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a Fatal message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a fatal message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Info(System.Object)">
            <summary>
            Logs a Info message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs a Info message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a info message with the arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Message(System.Object)">
            <summary>
            Logs a Message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Message(System.Object,System.Exception)">
            <summary>
            Logs a Message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Messages should always get logged.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogLevel,System.Object)">
            <summary>
            Logs a Message.
            </summary>
            <param name="level">Logging level of message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs a Message with exception.
            </summary>
            <param name="level">Logging level of message.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Messages should always get logged.
            </summary>
            <param name="level">Logging level of message.</param>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
            <param name="args">The args.</param>        
        </member>
        <member name="M:ComLib.Logging.ILog.IsEnabled(ComLib.Logging.LogLevel)">
            <summary>
            Is the level enabled.
            </summary>
            <param name="level">Logging level to check for.</param>
            <returns>True if specified logging level is enabled.</returns>
        </member>
        <member name="M:ComLib.Logging.ILog.BuildLogEvent(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Builds a log event from the parameters supplied.
            </summary>
            <param name="level">Level of message.</param>
            <param name="message">Message to log.</param>
            <param name="ex">Exception to log.</param>
            <param name="args">Arguments to use.</param>
            <returns>Created log event.</returns>
        </member>
        <member name="M:ComLib.Logging.ILog.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILog.ShutDown">
            <summary>
            Shutdown the logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILog.Name">
            <summary>
            Get the name of the logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILog.Level">
            <summary>
            Get / set the loglevel.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:ComLib.Logging.LogBase._parent">
            <summary>
            The parent owner of this logger.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogBase._readwriteLock">
            <summary>
            Lock when iterating through / flushing loggers.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogBase._lockMilliSecondsForRead">
            <summary>
            Amount of time supplied to acquiring read lock
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogBase._lockMilliSecondsForWrite">
            <summary>
            Amount of time supplied to acquiring write lock
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.#ctor">
            <summary>
            Default logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.#ctor(System.Type)">
            <summary>
            Initialize logger with default settings.
            </summary>
            <param name="type">Type whose full name to use for the logger.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.#ctor(System.String)">
            <summary>
            Initialize logger with default settings.
            </summary>
            <param name="name">Name to use for the logger.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.IsEnabled(ComLib.Logging.LogLevel)">
            <summary>
            Whether or not the level specified is enabled.
            </summary>
            <param name="level">Log level to check.</param>
            <returns>True if the supplied logging level is enabled.</returns>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogEvent)">
            <summary>
            Logs the event.
            </summary>
            <remarks>This is the method to override in any logger that extends this class.</remarks>
        </member>
        <member name="M:ComLib.Logging.LogBase.Flush">
            <summary>
            Flush the log entries to output.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.Warn(System.Object)">
            <summary>
            Logs as Warn.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Warn(System.Object,System.Exception)">
            <summary>
            Logs as Warn.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Error(System.Object)">
            <summary>
            Logs as Error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Error(System.Object,System.Exception)">
            <summary>
            Logs as Error.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Debug(System.Object)">
            <summary>
            Logs as Debug.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Debug(System.Object,System.Exception)">
            <summary>
            Logs as Debug.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message as debug.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Fatal(System.Object)">
            <summary>
            Logs as Fatal.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Fatal(System.Object,System.Exception)">
            <summary>
            Logs as Fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message as fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Info(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Info(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Message(System.Object)">
            <summary>
            Logs as Message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Message(System.Object,System.Exception)">
            <summary>
            Logs as Message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogLevel,System.Object)">
            <summary>
            Logs with specified level.
            </summary>
            <param name="level">Logging level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs with specified level.
            </summary>
            <param name="level">Logging level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Logs with specified level.
            </summary>
            <param name="level">Logging level.</param>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.InternalLog(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Logs with supplied parameters.
            </summary>
            <param name="level">Logging level.</param>
            <param name="message">Message to log.</param>
            <param name="ex">Exception to log.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.ShutDown">
            <summary>
            Shutdown logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.BuildLogEvent(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Construct the logevent using the values supplied.
            Fills in other data values in the log event.
            </summary>
            <param name="level">Logging level.</param>
            <param name="message">Event message.</param>
            <param name="ex">Event exception</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.BuildMessage(ComLib.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="logEvent">Logging level.</param>
            <returns>String with message to log.</returns>
        </member>
        <member name="M:ComLib.Logging.LogBase.ExecuteRead(System.Action)">
            <summary>
            Exectutes the action under a read operation after
            aquiring the reader lock.
            </summary>
            <param name="executor">Action to call.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.ExecuteWrite(System.Action)">
            <summary>
            Exectutes the action under a write operation after
            aquiring the writer lock.
            </summary>
            <param name="executor">Action to call.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.AcquireReaderLock">
            <summary>
            Gets the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.ReleaseReaderLock">
            <summary>
            Release the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.AcquireWriterLock">
            <summary>
            Acquire the writer lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.ReleaseWriterLock">
            <summary>
            Release the writer lock.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Name">
            <summary>
            Name of this logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Parent">
            <summary>
            Get / set the parent of this logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Settings">
            <summary>
            Log settings.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Level">
            <summary>
            Log level.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="loggerName">Name of logger.</param>
            <rereturns>This instance.</rereturns>
        </member>
        <member name="P:ComLib.Logging.LogBase.Item(System.Int32)">
            <summary>
            Get logger at the specified index.
            This is a single logger and this call will always return 
            referece to self.
            </summary>
            <param name="logIndex">Index of logger.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Logging.LogInstance.#ctor(System.String,System.Type)">
            <summary>
            Initialize with reference to the actually logger that does the logging
            and the calling type of the logger.
            </summary>
            <param name="loggerName">Name of logger.</param>
            <param name="callingType">Calling type.</param>
        </member>
        <member name="M:ComLib.Logging.LogInstance.Log(ComLib.Logging.LogEvent)">
            <summary>
            Log the event to file.
            </summary>
            <param name="logEvent">Event to log.</param>
        </member>
        <member name="T:ComLib.Logging.LogHelper">
            <summary>
            Helper class for logging.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogHelper.LogToConsole``1(ComLib.Logging.LogLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Logs to the console.
            </summary>
            <typeparam name="T">The datatype of the caller that is logging the event.</typeparam>
            <param name="level">The log level</param>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:ComLib.Logging.LogHelper.BuildLogEvent(System.Type,ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Construct the logevent using the values supplied.
            Fills in other data values in the log event.
            </summary>
            <param name="logType">The type the logger is associated with.</param>
            <param name="level">The log level</param>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
            <param name="args">Additional args.</param>
            <returns>Created log event.</returns>
        </member>
        <member name="M:ComLib.Logging.LogHelper.GetLogLevel(System.String)">
            <summary>
            Builds a log level from a string.
            </summary>
            <param name="loglevel">Log level : "critical | error | warning | info | debug".</param>
            <returns>Parsed log level.</returns>
        </member>
        <member name="M:ComLib.Logging.LogHelper.BuildLogFileName(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Build the log file name.
            </summary>
            <param name="appName">E.g. "StockMarketApplication".</param>
            <param name="date">E.g. Date to put in the name.</param>
            <param name="env">Environment name. E.g. "DEV", "PROD".</param>
            <param name="logFileName">E.g. "%name%-%yyyy%-%MM%-%dd%-%env%-%user%.log".
            Name of logfile containing substituions. </param>
            <returns>Log file name.</returns>
        </member>
        <member name="T:ComLib.Logging.LogFormatter">
            <summary>
            Log formatter.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFormatter.Format(System.String,ComLib.Logging.LogEvent)">
            <summary>
            Quick formatter that toggles between delimited and xml.
            </summary>
            <param name="formatter">Formatter to use (empty or "xml").</param>
            <param name="logEvent">Event to log.</param>
            <returns>Formatted string with event.</returns>
        </member>
        <member name="M:ComLib.Logging.LogFormatter.Format(ComLib.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="logEvent">The log event object.</param>
            <returns>Formatted string with event.</returns>
        </member>
        <member name="M:ComLib.Logging.LogFormatter.FormatXml(ComLib.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="logEvent">The log event object</param>
            <returns>Formatted string with event.</returns>
        </member>
        <member name="T:ComLib.ImportExport.ImportExportService`1">
            <summary>
            Interface for an import/export service on objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.ImportExport.IImportExportService`1">
            <summary>
            Interface for an import/export service on objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.ImportExport.IImportExportService">
            <summary>
            This interface is implemented by an import export service.
            </summary>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService.ImportFileAsObjects(System.String)">
            <summary>
            Imports the specified items from the file.
            </summary>
            <param name="filePath">The path to the file to import.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService.ImportTextAsObjects(System.String,System.String)">
            <summary>
            Imports the specified items from the text
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService.TotalExportable">
            <summary>
            Gets the total count of the items that can be exported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService.ExportToFile(System.String,System.String)">
            <summary>
            Exports all to the file.
            </summary>
            <param name="filename">The path to the file to export to.</param>
            <param name="format">The data format to export as.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService.ExportToFile(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Exports the specified batch to the file.
            </summary>
            <param name="filename">The path to the file to export to.</param>
            <param name="format">The data format to export as.</param>
            <param name="page">The page of the data to export.</param>
            <param name="pageSize">The number of items per page to export.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService.ExportToText(System.String,System.Int32,System.Int32)">
            <summary>
            Exports the specified batch as a text string.
            </summary>
            <param name="format">The data format to export as.</param>
            <param name="page">The page of the data to export.</param>
            <param name="pageSize">The number of items per page to export.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.Init(ComLib.IValidator,System.String[])">
            <summary>
            Initialize import/export service.
            </summary>
            <param name="validator">Validator to validate the objects before importing.</param>
            <param name="supportedFormats">Comma delimited formats. e.g. "xml,csv,ini".</param>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.Init(ComLib.IValidator,ComLib.MapperSupport.IMapper{`0}[])">
            <summary>
            Initialize import/export service.
            </summary>
            <param name="validator">Validator to validate the objects before importing.</param>
            <param name="mappers"></param>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.Load(System.Collections.IDictionary,System.String)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="data"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.LoadFile(System.String)">
            <summary>
            Determines whether this instance can import the specified items from the file
            </summary>
            <param name="filePath">The path to the file to import.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.LoadText(System.String,System.String)">
            <summary>
            Determines whether this instance can import the specified items from text.
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.Import(System.Collections.Generic.IList{`0})">
            <summary>
            Imports the specified items
            </summary>
            <param name="items">The items to import.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.ImportFile(System.String)">
            <summary>
            Imports the specified items from the file.
            </summary>
            <param name="filePath">The path to the file to import.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.ImportText(System.String,System.String)">
            <summary>
            Imports the specified items from the text
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.Export(System.Int32,System.Int32)">
            <summary>
            Exports a batch of items.
            </summary>
            <returns></returns>
            <param name="page">The page of the data to export.</param>
            <param name="pageSize">The number of items per page to export.</param>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.SetHandlers(System.Action{System.Collections.Generic.IList{`0}},System.Func{System.Int32,System.Int32,System.Collections.Generic.IList{`0}},System.Func{System.Collections.Generic.IList{`0}},System.Func{System.Int32})">
            <summary>
            Sets all the import/export handlers in on go.
            </summary>
            <param name="importHandler"></param>
            <param name="exportByPageHandler"></param>
            <param name="exportAllHandler"></param>
            <param name="totalExportableHandler"></param>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.SetImport(System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Set the on import handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.SetExportPage(System.Func{System.Int32,System.Int32,System.Collections.Generic.IList{`0}})">
            <summary>
            Set the on export page handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.SetExportAll(System.Func{System.Collections.Generic.IList{`0}})">
            <summary>
            Set the on import handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.SetTotal(System.Func{System.Int32})">
            <summary>
            Set the on import handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="P:ComLib.ImportExport.IImportExportService`1.Validator">
            <summary>
            The validator for validating items during import.
            </summary>
        </member>
        <member name="F:ComLib.ImportExport.ImportExportService`1._validator">
            <summary>
            Validator to be used in import.
            </summary>
        </member>
        <member name="F:ComLib.ImportExport.ImportExportService`1._mappers">
            <summary>
            Mappers for various formats.
            </summary>
        </member>
        <member name="F:ComLib.ImportExport.ImportExportService`1._importHandler">
            <summary>
            Import handler.
            </summary>
        </member>
        <member name="F:ComLib.ImportExport.ImportExportService`1._exportPageHandler">
            <summary>
            Export page handler.
            </summary>
        </member>
        <member name="F:ComLib.ImportExport.ImportExportService`1._exportAllHandler">
            <summary>
            Export handler.
            </summary>
        </member>
        <member name="F:ComLib.ImportExport.ImportExportService`1._totalHandler">
            <summary>
            Total handler.
            </summary>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Init(ComLib.IValidator,System.String)">
            <summary>
            Initialize import/export service.
            </summary>
            <param name="validator">Validator to validate the objects before importing.</param>
            <param name="supportedFormatsDelimited">Comma delimited formats. e.g. "xml,csv,ini".</param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Init(ComLib.IValidator,System.String[])">
            <summary>
            Initialize import/export service.
            </summary>
            <param name="validator">Validator to validate the objects before importing.</param>
            <param name="supportedFormats">Comma delimited formats. e.g. "xml,csv,ini".</param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Init(ComLib.IValidator,ComLib.MapperSupport.IMapper{`0}[])">
            <summary>
            Initialize import/export service.
            </summary>
            <param name="validator">Validator to validate the objects before importing.</param>
            <param name="mappers"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Import(System.Collections.Generic.IList{`0})">
            <summary>
            Import items.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.TotalExportable">
            <summary>
            Gets the total count of the items that can be exported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Export(System.Int32,System.Int32)">
            <summary>
            Exports items in a batch/page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Load(System.Collections.IDictionary,System.String)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="data"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.LoadFile(System.String)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.LoadText(System.String,System.String)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Import(System.Collections.IDictionary,System.String)">
            <summary>
            Imports the specified items.
            </summary>
            <param name="data"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ImportFileAsObjects(System.String)">
            <summary>
            Imports the specified items from the file.
            </summary>
            <param name="filePath">The path to the file to import.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ImportTextAsObjects(System.String,System.String)">
            <summary>
            Imports the specified items from the text
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ImportFile(System.String)">
            <summary>
            Imports the specified items.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ImportText(System.String,System.String)">
            <summary>
            Imports the specified items.
            </summary>/// <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ExportToFile(System.String,System.String)">
            <summary>
            Exports all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ExportToFile(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Exports the range of items to a file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ExportToText(System.String,System.Int32,System.Int32)">
            <summary>
            Exports the batch as text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.SetHandlers(System.Action{System.Collections.Generic.IList{`0}},System.Func{System.Int32,System.Int32,System.Collections.Generic.IList{`0}},System.Func{System.Collections.Generic.IList{`0}},System.Func{System.Int32})">
            <summary>
            Sets all the import/export handlers in on go.
            </summary>
            <param name="importHandler"></param>
            <param name="exportByPageHandler"></param>
            <param name="exportAllHandler"></param>
            <param name="totalExportableHandler"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.SetImport(System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Set the on import handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.SetExportPage(System.Func{System.Int32,System.Int32,System.Collections.Generic.IList{`0}})">
            <summary>
            Set the on export page handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.SetExportAll(System.Func{System.Collections.Generic.IList{`0}})">
            <summary>
            Set the on import handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.SetTotal(System.Func{System.Int32})">
            <summary>
            Set the on import handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportService`1.Validator">
            <summary>
            The validator to use when importing.
            </summary>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportService`1.HasValidator">
            <summary>
            Is there a validator.
            </summary>
        </member>
        <member name="T:ComLib.Calendars.CalendarService">
            <summary>
            Holiday calendar service.
            </summary>
        </member>
        <member name="T:ComLib.Calendars.ICalendar">
            <summary>
            The standard interface to be implemented by a class that
            will provide holidays, business days and related information.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.Init(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32,System.Int32)">
            <summary>
            Initialize
            </summary>
            <param name="calendarCode"></param>
            <param name="provider"></param>
            <param name="startYear"></param>
            <param name="endYear"></param>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.IsHolidayDataAvailable(System.Int32)">
            <summary>
            Determine if holiday data is available for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.IsBusinessDay(System.DateTime)">
            <summary>
            Is the supplied business date a holiday.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.Holidays(System.Int32)">
            <summary>
            Get all the holidays for the specified year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.Weekends(System.Int32)">
            <summary>
            Get all the weekends for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.BusinessDays(System.Int32)">
            <summary>
            Get all the business dates for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.NextBusinessDate(System.DateTime)">
            <summary>
            Get the next business date.
            </summary>
            <param name="afterDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.PreviousBusinessDate(System.DateTime)">
            <summary>
            Get the previous business date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.FirstBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the first business date for the specified month, year.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.FirstBusinessDateOfYear(System.Int32)">
            <summary>
            Get the first business date for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.LastBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the last business date for the specified month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.LastBusinessDateOfYear(System.Int32)">
            <summary>
            Get the last businessdate for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.ICalendar.CalendarCode">
            <summary>
            Calendar code.
            </summary>
        </member>
        <member name="P:ComLib.Calendars.ICalendar.HolidayProvider">
            <summary>
            The underlying holiday data provider.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.#ctor">
            <summary>
            Initialize using defaults.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.#ctor(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32)">
            <summary>
            Initialize using calendar code and holiday dates provider.
            This defaults the # of years of holidays that can be handled to +- 50;
            <param name="calendarCode">"U.S.-NewYork"</param>
            <param name="provider">The underlying holiday dates provider.</param>
            <param name="forwardBackRange">The number of years before and after current year 
            for which to calculate dates.</param>
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.Init(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32,System.Int32)">
            <summary>
            Initialize the Holiday calendar data provider and calendar code.
            </summary>
            <param name="calendarCode">"U.S.-NewYork"</param>
            <param name="provider">The underlying holiday dates provider.</param>
            <param name="startYear">Used for initialization. Loads holidays from the starting year.</param>
            <param name="endYear">Used for initialization. Loads holidays up to the ending year.</param>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.IsHolidayDataAvailable(System.Int32)">
            <summary>
            Indicates if there is holiday data available for the
            specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.IsBusinessDay(System.DateTime)">
            <summary>
            Determine if the date is a business date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.Holidays(System.Int32)">
            <summary>
            Get the holidays for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.Weekends(System.Int32)">
            <summary>
            Get the weekends in the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.BusinessDays(System.Int32)">
            <summary>
            Get the business dates for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.NextBusinessDate(System.DateTime)">
            <summary>
            Get the next business date after the date supplied.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.PreviousBusinessDate(System.DateTime)">
            <summary>
            Get the previous business date from the date supplied.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.FirstBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the first business date of the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.FirstBusinessDateOfYear(System.Int32)">
            <summary>
            Get the first business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.LastBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the last business date fo the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.LastBusinessDateOfYear(System.Int32)">
            <summary>
            Get the last business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="E:ComLib.Calendars.CalendarService.OnCalendarChanged">
            <summary>
            Raised when the calendar is changed.
            </summary>
        </member>
        <member name="P:ComLib.Calendars.CalendarService.CalendarCode">
            <summary>
            Calendar code used to indentify which holiday calendar data source to use.
            e.g. "country='US', province='NewYork', ref='some value to indicate source'";
            </summary>
        </member>
        <member name="P:ComLib.Calendars.CalendarService.HolidayProvider">
            <summary>
            Holiday data provider.
            </summary>
        </member>
        <member name="T:ComLib.Information.IInformation">
            <summary>
            This interface should be implemented
            by an information service.
            </summary>
        </member>
        <member name="M:ComLib.Information.IInformation.GetInfo">
            <summary>
            Get the information using the default format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Information.IInformation.SupportedFormats">
            <summary>
            Supported formats for the information.
            </summary>
        </member>
        <member name="P:ComLib.Information.IInformation.Format">
            <summary>
            The format to get the info in.
            </summary>
        </member>
        <member name="T:ComLib.Extensions.ListExtensions">
            <summary>
            Extension methods for dictionaries.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.ListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            AddRange of items of same type to IList 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="itemsToAdd"></param>
        </member>
        <member name="M:ComLib.Extensions.ListExtensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Is empty collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.Extensions.EntityExtensions">
            <summary>
            Extension methods for an entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.IsOwner(ComLib.Entities.IEntity)">
            <summary>
            Whether or not the user supplied is the owner.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.IsOwner(ComLib.Entities.IEntity,System.String)">
            <summary>
            Whether or not the user supplied is the owner.
            </summary>
            <param name="entity"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.IsOwnerOrAdmin(ComLib.Entities.IEntity)">
            <summary>
            Whether or not the current user is the entity owner or admin.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.IsOwnerOrAdminOrInRoles(ComLib.Entities.IEntity,System.String)">
            <summary>
            Whether or not the current user is the entity owner or admin.
            </summary>
            <param name="entity"></param>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.IsOkToServe(ComLib.Entities.IEntity)">
            <summary>
            Whether or not the current user is the entity owner or admin.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.IsCopyable(ComLib.Entities.IEntity)">
            <summary>
            Whether or the current user can copy this post.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.ToNewCopy(ComLib.Entities.IEntity)">
            <summary>
            Convert this entity to a new copy by resetting the id to indicate it's not persistant.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.AuditAll(ComLib.Entities.IEntity)">
            <summary>
            Sets up all the audit fields.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.DoUpdateModel``1(ComLib.Entities.IEntity,System.Action{``0})">
            <summary>
            Update the model but keeps the privaty/audit fields from being updated.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="update"></param>
        </member>
        <member name="M:ComLib.Entities.Extensions.EntityExtensions.DoUpdateModel``1(ComLib.Entities.IEntity,ComLib.Entities.IEntity)">
            <summary>
            Update the model but keeps the privaty/audit fields from being updated.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="original"></param>
        </member>
        <member name="T:ComLib.CsvParse.Csv">
            <summary>
            Csv static class for parsing csv files.
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Load(System.String,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Load(System.String,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <param name="delimeter">Dellimeter to use for separate values.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.CanLoad(System.String,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Whether or not the csv file can be loaded. 
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <param name="delimeter">The delimeter in the text</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.LoadText(System.String,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.LoadText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.LoadText(System.String,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <param name="delimeter">Dellimeter to use for separate values.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.Boolean)">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="firstRowInDataAreColumns"></param>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.Boolean,System.String)">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="firstRowInDataAreColumns"></param>
            <param name="delimeter">The delimeter to use.</param>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
            <param name="firstRowInDataAreColumns">First Row in data are columns.</param>
            <param name="quoteAll">Whether or not to quote all the values.</param>
            <param name="quoteChar">The quote char to use to enclose values.</param>
            <param name="newLine">New Line to use</param>
            <param name="append">Whether or not to append to file.</param>
        </member>
        <member name="T:ComLib.Cryptography.CryptographyUtils">
            <summary>
            Simple Cryptographic Services
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.Encrypt(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Generates a cryptographic Hash Key for the provided text data.
            Basically a digital fingerprint
            </summary>
            <param name="dataToHash">text to hash</param>
            <param name="hashAlgorithm">e.g. new MD5CryptoServiceProvider();</param>
            <returns>Unique hash representing string</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.IsHashMatch(System.Security.Cryptography.HashAlgorithm,System.String,System.String)">
            <summary>
            Generates a cryptographic Hash Key for the provided text data.
            Basically a digital fingerprint
            </summary>
            <param name="hashAlgorithm">e.g. new MD5CryptoServiceProvider();</param>
            <param name="hashedText"></param>
            <param name="unhashedText"></param>
            <returns>Unique hash representing string</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>
            Encrypts text with Triple DES encryption using the supplied key
            </summary>
            <param name="algorithm"></param>
            <param name="plaintext">The text to encrypt</param>
            <param name="key">Key to use for encryption</param>
            <returns>The encrypted string represented as base 64 text</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>
            Decrypts supplied Triple DES encrypted text using the supplied key
            </summary>
            <param name="algorithm">The algorithm to use for decryption.</param>
            <param name="base64Text">Triple DES encrypted base64 text</param>
            <param name="key">Decryption Key</param>
            <returns>The decrypted string</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.CreateAlgo``1(System.String)">
            <summary>
            Create new instance of symmetric algorithm using reflection by
            supplying the typename.
            </summary>
            <param name="fullyQualifiedTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.CreateSymmAlgoTripleDes">
            <summary>
            Create triple des symmetric algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.CreateHashAlgoMd5">
            <summary>
            Create MD5 hash algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Configuration.Configs">
            <summary>
            This class provides methods that can load
            a configuration and return a config source.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.Configs.Init(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize db connection for LoadFromDb methods.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadFiles(System.String)">
            <summary>
            Load config from single file or multiple files.
            </summary>
            <param name="configs">"prod.config" or multiple paths delimited by command.
            e.g. "prod.config, qa.config, dev.config"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadFiles(System.String,System.String)">
            <summary>
            Load config from single file or multiple files.
            </summary>
            <param name="configDirectory"></param>
            <param name="configs">"prod.config" or multiple paths delimited by command.
            e.g. "prod.config, qa.config, dev.config"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadDb(System.String)">
            <summary>
            Load from the database
            </summary>
            <param name="configNames">Comma delimited names of the configs to load
            from the database.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadObject(System.Object)">
            <summary>
            Load config settings into a configSource from an object using
            it's public properties.
            </summary>
            <param name="configObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadString(System.String)">
            <summary>
            Load from string.
            </summary>
            <param name="configText"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeFileHelper">
            <summary>
            Helper class for code generation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeFileHelper.Write(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes out the autogenerated file, after processing the substitutions.
            </summary>
            <param name="templateFile">The name of the initial template file.</param>
            <param name="generatedFile">The full location of the file to generate.</param>
            <param name="generatedFileDirectory">The location of the directory to put the autogenerated file.</param>
            <param name="substitutions">The substituions (key/value) pairs.</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeFileHelper.GetProcNames(System.String)">
            <summary>
            Get the names of all the procedures in the stored proc template folder
            </summary>
            <param name="codeTemplatePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeFileHelper.GetFilteredDomainModelFiles(ComLib.Models.Model,System.Collections.Generic.Dictionary{System.String,ComLib.CodeGeneration.CodeFile})">
            <summary>
            Get all the files that are applicable for code-generation for the specified model.
            </summary>
            <param name="currentModel"></param>
            <param name="allFiles"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Categories.ICategoryServiceXml">
            <summary>
            Service for serializing the categories to xml
            </summary>
        </member>
        <member name="M:ComLib.Categories.ICategoryServiceXml.GetRootCategories">
            <summary>
            Gets the root categories that do not have a parent category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.ICategoryServiceXml.GetCategoryiesByParent(System.String)">
            <summary>
            Gets the categories associated with the parentId supplied.
            </summary>
            <param name="parentId">Id of the partent</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Categories.ICategoryDao">
            <summary>
            Interface for the Category data access object.
            </summary>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetRootCategories">
            <summary>
            Get the root categories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetRootCategoriesNonCache">
            <summary>
            Get the root categories directly from the datasource without using any cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetByParentId(System.Int32)">
            <summary>
            Get the categories by the parent id.
            </summary>
            <param name="categoryId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetLookUp">
            <summary>
            Get the category lookup component.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Caching.CacheAspNet">
            <summary>
            Cache manager using AspNet which groups all the keys with a prefix.
            </summary>
        </member>
        <member name="T:ComLib.Caching.ICache">
            <summary>
            Contract for Caching provider
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Contains(System.String)">
            <summary>
            Whether or not there is a cache entry for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.ICache.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Get``1(System.Object)">
            <summary>
            Retrieves an item from the cache of the specified type.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.GetOrInsert``1(System.Object,System.Int32,System.Boolean,System.Func{``0})">
            <summary>
            Retrieves an item from the cache of the specified type and key and 
            inserts by getting it using the lamda it if isn't there
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Remove(System.Object)">
            <summary>
            Removes an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes collection of items from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Insert(System.Object,System.Object)">
            <summary>
            Inserts an item into the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Insert(System.Object,System.Object,System.Int32,System.Boolean)">
            <summary>
            Inserts an item into the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Insert(System.Object,System.Object,System.Int32,System.Boolean,ComLib.Caching.CacheItemPriority)">
            <summary>
            Inserts an item into the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.GetDescriptors">
            <summary>
            Get description of the cache entries.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Caching.ICache.Count">
            <summary>
            Gets the number of items in the cache.
            </summary>
        </member>
        <member name="P:ComLib.Caching.ICache.Keys">
            <summary>
            Gets a collection of all cache item keys.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.#ctor">
            <summary>
            Initialize with spring cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.#ctor(ComLib.Caching.CacheSettings)">
            <summary>
            Initialize using cache settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Contains(System.String)">
            <summary>
            Whether or not there is a cache entry for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Get``1(System.Object)">
            <summary>
            Get the object associated with the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.GetOrInsert``1(System.Object,System.Int32,System.Boolean,System.Func{``0})">
            <summary>
            Retrieves an item from the cache of the specified type.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Remove(System.Object)">
            <summary>
            Remove from cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the items associated with the keys specified.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Clear">
            <summary>
            Clear all the items in the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Insert(System.Object,System.Object)">
            <summary>
            Insert an item into the cache.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Insert(System.Object,System.Object,System.Int32,System.Boolean)">
            <summary>
            Insert an item into the cache with the specified sliding expiration.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeToLive"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Insert(System.Object,System.Object,System.Int32,System.Boolean,ComLib.Caching.CacheItemPriority)">
            <summary>
            Insert an item into the cache with the specified time to live, 
            sliding expiration and priority.
            </summary>
            <param name="keyName">The cache key</param>
            <param name="value">The cache value</param>
            <param name="timeToLive">How long in seconds the object should be cached.</param>
            <param name="slidingExpiration">Whether or not to reset the time to live if the object is touched.</param>
            <param name="priority">Priority of the cache entry.</param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.GetDescriptors">
            <summary>
            Returns descriptors for all items in the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Init(ComLib.Caching.CacheSettings)">
            <summary>
            Initialize.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:ComLib.Caching.CacheAspNet.Settings">
            <summary>
            Get the cache settings.
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheAspNet.Count">
            <summary>
            Get the number of items in the cache that are 
            associated with this instance.
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheAspNet.Keys">
            <summary>
            Get the collection of cache keys associated with this instance of
            cache ( using the cachePrefix ).
            </summary>
        </member>
        <member name="T:ComLib.Benchmarks.Benchmark">
            <summary>
            Light-weight class to provide benchmarking support to measure time used to run code.
            </summary>
        </member>
        <member name="M:ComLib.Benchmarks.Benchmark.Run(System.Action)">
            <summary>
            Run a simple benchmark with the supplied action and get the result.
            </summary>
            <param name="action">The action to benchmark</param>
        </member>
        <member name="M:ComLib.Benchmarks.Benchmark.Run(System.String,System.Action)">
            <summary>
            Run a simple benchmark with the supplied action and get the result.
            </summary>
            <param name="name">The name of the action to benchmark.</param>
            <param name="action">The action to benchmark</param>
        </member>
        <member name="M:ComLib.Benchmarks.Benchmark.Run(System.String,System.String,System.Action)">
            <summary>
            Run a simple benchmark with the supplied action and get the result.
            </summary>
            <param name="name">The name of the action to benchmark</param>
            <param name="message">A message representing the action to run benchmark against.</param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.Benchmarks.Benchmark.Report(System.String,System.String,System.Action{ComLib.Benchmarks.BenchmarkResult},System.Action)">
            <summary>
            Run a simple benchmark with the supplied action and call the logger action supplied.
            </summary>
            <param name="name">The name of the action to benchmark</param>
            <param name="message">A message associated w/ the action to benchmark</param>
            <param name="logger">The callback method for logging purposes.</param>
            <param name="action">The action to benchmark.</param>
        </member>
        <member name="M:ComLib.Benchmarks.Benchmark.Get(System.String,System.String,System.Action{ComLib.Benchmarks.BenchmarkResult},System.Action{ComLib.Benchmarks.BenchmarkService})">
            <summary>
            Run a simple benchmark with the supplied action and call the logger action supplied.
            </summary>
            <param name="name">The name of the action to benchmark</param>
            <param name="message">A message associated w/ the action to benchmark</param>
            <param name="logger">The callback method for logging purposes.</param>
            <param name="action">The action to benchmark.</param>
        </member>
        <member name="T:ComLib.Benchmarks.BenchmarkService">
            <summary>
            Benchmark service class to provide benchmarking functionality.
            </summary>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkService.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkService.#ctor(System.Action{ComLib.Benchmarks.BenchmarkResult})">
            <summary>
            Initialized w/ a lamda as a logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkService.#ctor(System.String,System.String,System.Action{ComLib.Benchmarks.BenchmarkResult})">
            <summary>
            Initialized w/ a lamda as a logger.
            </summary>
            <param name="name">The name of the action to benchmark</param>
            <param name="message">A message associated w/ the action to benchmark</param>
            <param name="logger">The callback method for logging purposes.</param>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkService.Run(System.Action)">
            <summary>
            Run the action.
            </summary>
            <param name="action">The action to benchmark.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkService.Run(System.String,System.String,System.Action)">
            <summary>
            Run the action.
            </summary>
            <param name="name">The name of the action to benchmark</param>
            <param name="message">A message associated w/ the action to benchmark</param>
            <param name="action">The action to benchmark.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkService.Report(System.String,System.String,System.Action{ComLib.Benchmarks.BenchmarkResult},System.Action)">
            <summary>
            Run a simple benchmark with the supplied action and call the logger action supplied.
            </summary>
            <param name="name">The name of the action to benchmark</param>
            <param name="message">A message associated w/ the action to benchmark</param>
            <param name="logger">The callback method for logging purposes.</param>
            <param name="action">The action to benchmark.</param>
        </member>
        <member name="T:ComLib.Automation.RunResult">
            <summary>
            Result of a script action.
            </summary>
        </member>
        <member name="F:ComLib.Automation.RunResult.StartTime">
            <summary>
            The starttime of an action
            </summary>
        </member>
        <member name="F:ComLib.Automation.RunResult.EndTime">
            <summary>
            The end time of an action.
            </summary>
        </member>
        <member name="F:ComLib.Automation.RunResult.Success">
            <summary>
            Whether or not the result of the action was succcessful
            </summary>
        </member>
        <member name="F:ComLib.Automation.RunResult.Message">
            <summary>
            A message representing the result of the action.
            </summary>
        </member>
        <member name="F:ComLib.Automation.RunResult.Item">
            <summary>
            A object that can be return from the result.
            </summary>
        </member>
        <member name="M:ComLib.Automation.RunResult.#ctor(System.DateTime,System.DateTime,System.Boolean,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="started">Start time of script</param>
            <param name="ended">End time of script.</param>
            <param name="success">Whether or not the script execution was successful</param>
            <param name="message">A combined message of all the errors.</param>
        </member>
        <member name="T:ComLib.Account.IAccountService">
            <summary>
            This interface should be implemented by
            classes that provide a user account service.
            </summary>
        </member>
        <member name="M:ComLib.Account.IAccountService.Approve(System.String)">
            <summary>
            Approve user.
            </summary>
            <param name="userName">User to approve.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.Create(ComLib.Account.User,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create the user and also return the membership status
            </summary>
            <param name="user">kishore</param>
            <param name="password">password</param>
            <param name="status">DuplicateUserName</param>
            <returns>Result of user creation.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Register the user.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="email">E-mail of user.</param>
            <param name="password">User of password.</param>
            <param name="roles">Roles to assign to the user.</param>
            <returns>Result of user registration.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.Create(System.String,System.String,System.String,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Register the user.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="email">E-mail of user.</param>
            <param name="password">User of password.</param>
            <param name="roles">Roles to assign to the user.</param>
            <param name="status">Status of membership creation.</param>
            <returns>Result of user registration.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.LogOn(System.String,System.String,System.Boolean)">
            <summary>
            Try logging in to server.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="password">User password.</param>
            <param name="rememberUser">True to remember the user.</param>
            <returns>Result of logon attempt.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.VerifyUser(System.String,System.String)">
            <summary>
            Verify that this is a valid user.
            </summary>
            <param name="userName">"kishore"</param>
            <param name="password">"password"</param>
            <returns>Result of verification.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.Get(System.String)">
            <summary>
            Get the specified user by username.
            </summary>
            <param name="userName">User to get.</param>
            <returns>Instance of user corresponding to user name.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the current password.
            </summary>
            <param name="userName">username of the account for which the password is being changed.</param>
            <param name="currentPassword">Existing password on file.</param>
            <param name="newPassword">New password</param>
            <returns>Result of password change.</returns>
        </member>
        <member name="M:ComLib.Account.IAccountService.LockOut(System.String,System.String)">
            <summary>
            Lock out the specified user.
            </summary>
            <param name="userName">User to lock out.</param>
            <param name="lockOutReason">Reason for locking out.</param>
        </member>
        <member name="M:ComLib.Account.IAccountService.UndoLockOut(System.String,System.String)">
            <summary>
            UndoLock out the specified user.
            </summary>
            <param name="userName">User to undo lock out for.</param>
            <param name="comment">Reason for re-activating</param>
        </member>
        <member name="T:ComLib.Samples.Example_Cache">
            <summary>
            Example of Cache component.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Cache.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Cache.ShutDown">
            <summary>
            Clear the cache on shutdown of the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Diagnostics">
            <summary>
            Example for the Diagnostics namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Diagnostics.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Diagnostics.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Benchmark">
            <summary>
            Example for the Benchmark namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Benchmark.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.KeyValue`2">
            <summary>
            KeyValue pair. This is a class not a struct like the KeyValuePair.
            Unlike Tuple, this has Key/Value fields instead of properties that can be modified.
            Also,
            </summary>
        </member>
        <member name="M:ComLib.KeyValue`2.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.KeyValue`2.#ctor(`0,`1)">
            <summary>
            Initialize with supplied values.
            </summary>
            <param name="key">Value of key.</param>
            <param name="val">Value corresponding to key.</param>
        </member>
        <member name="M:ComLib.KeyValue`2.ToString">
            <summary>
            Get string representation.
            </summary>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="P:ComLib.KeyValue`2.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="P:ComLib.KeyValue`2.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:ComLib.Lang.AssignmentStatement">
            <summary>
            Variable expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.AssignmentStatement.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Lang.AssignmentStatement.#ctor(System.String,ComLib.Lang.Expression,ComLib.Lang.Scope)">
            <summary>
            Initialize
            </summary>
            <param name="scope">Scope containing objects</param>
            <param name="exp">Expression to evaluate for value of variable</param>
            <param name="name">Variable name</param>
        </member>
        <member name="M:ComLib.Lang.AssignmentStatement.Execute">
            <summary>
            Evaluate
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.LObject">
            <summary>
            Base type for all data types.
            </summary>
        </member>
        <member name="F:ComLib.Lang.LObject._value">
            <summary>
            Object value.
            </summary>
        </member>
        <member name="F:ComLib.Lang.LObject.DataType">
            <summary>
            The datatype.
            </summary>
        </member>
        <member name="P:ComLib.Lang.LObject.Value">
            <summary>
            Value of the type.
            </summary>
        </member>
        <member name="T:ComLib.Logging.Logger">
            <summary>
            Light weight logging class.
            </summary>
            <remarks>
            The provider is initialize to an instance of <see cref="T:ComLib.Logging.LogConsole"/>
            so it's ready be used immediately.
            </remarks>
        </member>
        <member name="F:ComLib.Logging.Logger._loggers">
            <summary>
            Default the logger provider to the consolelogger so the logger
            is ready to use immediately.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.#ctor">
            <summary>
            Prevent instantiation. This is a static class.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.Log(ComLib.Logging.LogLevel,System.Object)">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Log(ComLib.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Log(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Warn(System.Object)">
            <summary>
            Logs as warning.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Warn(System.Object,System.Exception)">
            <summary>
            Logs as warning.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Error(System.Object)">
            <summary>
            Logs as error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Error(System.Object,System.Exception)">
            <summary>
            Logs as error.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Debug(System.Object)">
            <summary>
            Logs as debug.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Debug(System.Object,System.Exception)">
            <summary>
            Logs as debug.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Fatal(System.Object)">
            <summary>
            Logs as fatal.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs as fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Info(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Info(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Message(System.Object)">
            <summary>
            Logs as message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Message(System.Object,System.Exception)">
            <summary>
            Logs as message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.IsEnabled(System.String,ComLib.Logging.LogLevel)">
            <summary>
            Determine if the loglevel is enabled for the following 
            </summary>
            <param name="loggerName">The name of the logger to check loglevel for.</param>
            <param name="logLevel">The log level.</param>
            <returns>True if the supplied log level is enabled.</returns>
        </member>
        <member name="M:ComLib.Logging.Logger.GetNew``1">
            <summary>
            Get a logger. 
            </summary>
            <typeparam name="T">Type of logger.</typeparam>
            <returns>Instance of logger.</returns>
        </member>
        <member name="M:ComLib.Logging.Logger.GetNew``1(System.String)">
            <summary>
            Get a new logger and associate with the type specified.
            </summary>
            <typeparam name="T">Type of logger.</typeparam>
            <param name="loggerName">Name of application.</param>
            <returns>Instance of logger.</returns>
        </member>
        <member name="M:ComLib.Logging.Logger.Add(ComLib.Logging.ILogMulti)">
            <summary>
            Add a named logger.
            </summary>
            <param name="logger">Named logger to add.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Clear">
            <summary>
            Clear all the loggers and add only the Console logger to the 
            the default logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.Get(System.String)">
            <summary>
            Get the named logger using the string indexer.
            </summary>
            <param name="name">Name of logger.</param>
            <returns>Logger with supplied name.</returns>
        </member>
        <member name="M:ComLib.Logging.Logger.Get(System.Int32)">
            <summary>
            Get the named logger using the string indexer.
            </summary>
            <param name="index">Index of logger.</param>
            <returns>Logger with supplied index.</returns>
        </member>
        <member name="M:ComLib.Logging.Logger.Init(ComLib.Logging.ILogMulti)">
            <summary>
            Initialize the default logger.
            </summary>
            <param name="logger">Instance of logger to initialise.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.ShutDown">
            <summary>
            Shutdown all loggers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.GetLogInfo">
            <summary>
            Get all the log files.
            </summary>
            <returns>List with all log files.</returns>
        </member>
        <member name="M:ComLib.Logging.Logger.ExecuteRead(System.Action)">
            <summary>
            Exectutes the action under a read operation after
            aquiring the reader lock.
            </summary>
            <param name="executor">Action to execute.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.ExecuteWrite(System.Action)">
            <summary>
            Exectutes the action under a write operation after
            aquiring the writer lock.
            </summary>
            <param name="executor">Action to execute.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.AcquireReaderLock">
            <summary>
            Gets the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.ReleaseReaderLock">
            <summary>
            Release the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.AcquireWriterLock">
            <summary>
            Acquire the writer lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.ReleaseWriterLock">
            <summary>
            Release the writer lock.
            </summary>
        </member>
        <member name="P:ComLib.Logging.Logger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether default logger is debug enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether default logger is error enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether default logger is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether default logger is info enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether default logger is warn enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.Default">
            <summary>
            Get the default logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.Logger.Count">
            <summary>
            Get the number of the loggers.
            </summary>
        </member>
        <member name="T:ComLib.Scheduling.Tasks.ITaskService">
            <summary>
            Interface to be implemented by a task control service.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Tasks.ITaskService.GetStatuses">
            <summary>
            Returns status information for all tasks.
            </summary>
            <returns>List with status information for all tasks.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Tasks.ITaskService.RunAll">
            <summary>
            Executes all tasks.
            </summary>
        </member>
        <member name="T:ComLib.Scheduling.IScheduler">
            <summary>
            Runs the task
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.Schedule(System.String,ComLib.Scheduling.Trigger,System.Boolean,System.Action,System.Action{ComLib.Scheduling.Task})">
            <summary>
            Schedules a task.
            </summary>
            <param name="name">Task name.</param>
            <param name="trigger">Task trigger.</param>
            <param name="start">True to start task.</param>
            <param name="executor">Task executor.</param>
            <param name="onCompletedAction">Action to call when task completes.</param>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.GetNames">
            <summary>
            Returns all active tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.Pause(System.String)">
            <summary>
            Pauses a specific task.
            </summary>
            <param name="name">Task name.</param>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.Run(System.String)">
            <summary>
            Runs a specific task.
            </summary>
            <param name="name">Task name.</param>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.Resume(System.String)">
            <summary>
            Resumes a specific task.
            </summary>
            <param name="name">Task name.</param>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.Delete(System.String)">
            <summary>
            Deletes a specific task.
            </summary>
            <param name="name">Task name.</param>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.PauseAll">
            <summary>
            Pauses all tasks.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.ResumeAll">
            <summary>
            Resumes all tasks.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.GetStatus">
            <summary>
            return a list of all the statuses of all tasks.
            </summary>
            <returns>List with statuses of all tasks.</returns>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.GetStatus(System.String)">
            <summary>
            Get the status of the task specified by name.
            </summary>
            <param name="name">Name of task.</param>
            <returns>Task status.</returns>
        </member>
        <member name="M:ComLib.Scheduling.IScheduler.ShutDown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.IScheduler.IsStarted">
            <summary>
            Gets whether the scheduler is started.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.IScheduler.IsShutDown">
            <summary>
            Gets whether the scheduler is stopped.
            </summary>
        </member>
        <member name="T:ComLib.Scheduling.SchedulerStatus">
            <summary>
            Status of the task scheduler.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.SchedulerStatus.Started">
            <summary>
            Scheduler is started.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.SchedulerStatus.Shutdown">
            <summary>
            Scheduler stopped.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.SchedulerStatus.NotStarted">
            <summary>
            Scheduler not started.
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositoryVersioned`1">
            <summary>
            Repository that versions the Entities on updates.
            </summary>
            <remarks>
            This works via the following:
            1. Decorates any existing Repository you want to use.
            2. The entity T of the repository must implement IEntityVersionable
            3. The Update method will create a new version of the entity without changing it's primary key.
            4. The VersionRefId of historic/older versions becomes the reference to the primary key.
               and the historic/older versions have a different primary key.
            </remarks>
            <typeparam name="T">Type of items to store.</typeparam>
        </member>
        <member name="T:ComLib.Entities.IRepositoryVersionable`1">
            <summary>
            Wrapper around Repository to version the entities.
            </summary>
            <typeparam name="T">Type of repository items.</typeparam>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.RollBack(System.Int32)">
            <summary>
            Roll back the version of the entity with the specified id.
            </summary>
            <param name="id">Id of entity.</param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.RollBack(`0)">
            <summary>
            Rollback the specified entity.
            </summary>
            <param name="entity">Entity to rollback.</param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.GetAllVersions(System.Int32)">
            <summary>
            Get all the versions ( latest / historic ) for the specified entity with id.
            </summary>
            <param name="id">Id of entity.</param>
            <returns>List with all entity versions.</returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.Find(ComLib.Data.IQuery,System.Boolean)">
            <summary>
            Find entities using the criteria with option to get only the latest versions and
            not all ( latest/historic ).
            </summary>
            <param name="criteria">Criteria to match.</param>
            <param name="onlyLatestVersions">True to get only the latest versions.</param>
            <returns>List of matched items.</returns>
        </member>
        <member name="P:ComLib.Entities.IRepositoryVersionable`1.IsVersioned">
            <summary>
            To enable / disable versioning.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IRepositoryVersionable`1.IsVersioningStrict">
            <summary>
            Get whether strict versioning is enabled.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryVersioned`1._repo">
            <summary>
            Repository of items.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryVersioned`1._isVersioned">
            <summary>
            Versioned flag.
            </summary>
        </member>
        <member name="F:ComLib.Entities.RepositoryVersioned`1._isVersionedStrict">
            <summary>
            Strict versioned flag.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.#ctor(ComLib.Entities.IRepository{`0})">
            <summary>
            Default constructor.
            </summary>
            <param name="repo">Repository to use.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.#ctor(ComLib.Entities.IRepository{`0},System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="repo">Repository to use.</param>
            <param name="isVersionedStrict">True to use strict version checking.</param>
            <param name="useOptimizedQueries">True to optimize queries.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.RollBack(System.Int32)">
            <summary>
            Roll back the entity w/ the specified id.
            </summary>
            <param name="id">Id of entity.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.RollBack(`0)">
            <summary>
            Rollback the entity to the prior version.
            </summary>
            <param name="entity">Entity to rollback.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Create(`0)">
            <summary>
            Create an entity.
            </summary>
            <param name="entity">Entity to create.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Get(System.Object)">
            <summary>
            Return an entity by its id.
            </summary>
            <param name="id">Id to entity.</param>
            <returns>Corresponding entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.GetAll">
            <summary>
            Returns the latest versions of all entities.
            </summary>
            <returns>List with latest version of all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.GetAllVersions(System.Int32)">
            <summary>
            Returns the latest versions of all entities.
            </summary>
            <returns>List with latest version of all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Update(`0)">
            <summary>
            Updates the entity while storing historic versions.
            </summary>
            <param name="entity">Entity to update.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Delete(System.Object)">
            <summary>
            Deletes the entity and all it's versions.
            </summary>
            <param name="id">Id of entity to delete.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete an entity that matches an expression.
            </summary>
            <param name="expression">Matching expression.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Delete(ComLib.Data.IQuery)">
            <summary>
            Delete an entity that matches criteria.
            </summary>
            <param name="criteria">Criteria to match.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.DeleteAll">
            <summary>
            Delete all entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Sum(System.String)">
            <summary>
            Get the sum of a value of all entities.
            </summary>
            <param name="columnName">Name of column.</param>
            <returns>Sum of entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the sum of a value of entities 
            that match an expression.
            </summary>
            <param name="exp">Matching expression.</param>
            <returns>Sum of matching entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Min(System.String)">
            <summary>
            Get the min of a value of all entities.
            </summary>
            <param name="columnName">Name of column.</param>
            <returns>Min value.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the min of a value of entities 
            that match an expression.
            </summary>
            <param name="exp">Matching expression.</param>
            <returns>Min of matching entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Max(System.String)">
            <summary>
            Get the max of a value of all entities.
            </summary>
            <param name="columnName">Name of column.</param>
            <returns>Max value.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the max of a value of entities 
            that match an expression.
            </summary>
            <param name="exp">Matching expression.</param>
            <returns>Max of matching entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Avg(System.String)">
            <summary>
            Get the average of a value of all entities.
            </summary>
            <param name="columnName">Name of column.</param>
            <returns>Average value.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Avg(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get the average of a value of entities 
            that match an expression.
            </summary>
            <param name="exp">Matching expression.</param>
            <returns>Average of matching entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Count">
            <summary>
            Get the number of items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Distinct``1(System.String)">
            <summary>
            Returns the distinct values of all items.
            </summary>
            <typeparam name="TVal">Type of value to return.</typeparam>
            <param name="columnName">Name of column.</param>
            <returns>List of distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Distinct``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Returns the distinct values of items
            that match an expression.
            </summary>
            <typeparam name="TVal">Type of value to return.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List of distinct values of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Group``1(System.String)">
            <summary>
            Returns a grouping of values of items.
            </summary>
            <typeparam name="TGroup">Type of group to use.</typeparam>
            <param name="columnName">Name of column.</param>
            <returns>List with key/value pairs of values.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Group``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Returns a grouping of values of items
            that match an expression.
            </summary>
            <typeparam name="TGroup">Type of group to use.</typeparam>
            <param name="exp">Matching expression.</param>
            <returns>List with key/value pairs of values.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(System.String)">
            <summary>
            Finds a list of latest versions of items by using an sql.
            </summary>
            <param name="sql">Sql to use.</param>
            <returns>List of items found.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(ComLib.Data.IQuery)">
            <summary>
            Finds the latest versions, excluding historic ones.
            </summary>
            <param name="criteria">Criteria to match.</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(ComLib.Data.IQuery,System.Boolean)">
            <summary>
            Finds the latest versions, excluding historic ones.
            </summary>
            <param name="criteria">Criteria to match.</param>
            <param name="onlyLatestVersions">True to get only the latest versions.</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(System.String,System.Boolean)">
            <summary>
            Finds the latest versions.
            </summary>
            <param name="sql">Sql to use.</param>
            <param name="isFullSql">True if the sql is complete (not criteria only).</param>
            <returns>List of matched items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a paged list of items.
            </summary>
            <param name="sql">Sql to use.</param>
            <param name="pageNumber">Page of number.</param>
            <param name="pageSize">Page size.</param>
            <returns>Paged list of items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Finds latest versions, excluding historic ones.
            </summary>
            <param name="criteria">Criteria to match.</param>
            <param name="pageNumber">Page number.</param>
            <param name="pageSize">Page size.</param>
            <returns>Paged list of items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get a paged list of most recent items.
            </summary>
            <param name="pageNumber">Page number.</param>
            <param name="pageSize">Page size.</param>
            <returns>Paged list of most recent items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.First(System.String)">
            <summary>
            Gets the first item that matches a filter.
            </summary>
            <param name="filter">Filter to use.</param>
            <returns>Matched item.</returns>
        </member>
        <member name="P:ComLib.Entities.RepositoryVersioned`1.IsVersioned">
            <summary>
            Get/set whether this repository is versioned.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryVersioned`1.IsVersioningStrict">
            <summary>
            Get/set whether this repository is strictly versioned.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryVersioned`1.Database">
            <summary>
            Get/set the database to use.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryVersioned`1.Connection">
            <summary>
            Get/set the connection info to use.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryVersioned`1.ConnectionString">
            <summary>
            Get the connection string to use.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryVersioned`1.TableName">
            <summary>
            Get the table name used.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationServiceBase">
            <summary>
            Base class for notifications.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationServiceBase._queue">
            <summary>
            The queue the stores the notification messages.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationServiceBase._settings">
            <summary>
            The notification settings.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationServiceBase.#ctor(ComLib.Queue.QueueProcessor{ComLib.EmailSupport.NotificationMessage},ComLib.Notifications.NotificationSettings)">
            <summary>
            Initialize.
            </summary>
            <param name="queue">Instance of queue processor for notification messages.</param>
            <param name="settings">Notification settings.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationServiceBase.Notify(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Queue the notification.
            Don't just send it directly.
            </summary>
            <param name="message">Notification message to put to queue.</param>
        </member>
        <member name="P:ComLib.Notifications.NotificationServiceBase.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationServiceBase.Queue">
            <summary>
            The notification queue.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationAccountService">
            <summary>
            The notification service for sending feedback, sending to a friend.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.#ctor(ComLib.Queue.QueueProcessor{ComLib.EmailSupport.NotificationMessage},ComLib.Notifications.NotificationSettings)">
            <summary>
            Initialize
            </summary>
            <param name="queue">Instance of queue processor for notification messages.</param>
            <param name="settings">Notification settings.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.WelcomeNewUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Queues the notification to email to a friend.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            </summary>
            <param name="firstname">first name</param>
            <param name="password">Password</param>
            <param name="subject">Subject of the message.</param>
            <param name="to">The email address to send to</param>
            <param name="username">User name</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.WelcomeNewUser(ComLib.Notifications.NotificationContext)">
            <summary>
            Welcome new user using Notification context.
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.RemindUserPassword(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send remind account/password email to user.
            </summary>
            <param name="firstname">first name</param>
            <param name="password">Password</param>
            <param name="subject">Subject of the message.</param>
            <param name="to">The email address to send to</param>
            <param name="username">User name</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.RemindUserPassword(ComLib.Notifications.NotificationContext)">
            <summary>
            Submits the feedback notification.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            ${from.name}
            ${post.url}
            ${post.title}
            ${friend.name}
            ${friend.email}
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="T:ComLib.Notifications.NotificationMessagingService">
            <summary>
            The notification service for sending feedback, sending to a friend.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.#ctor(ComLib.Queue.QueueProcessor{ComLib.EmailSupport.NotificationMessage},ComLib.Notifications.NotificationSettings)">
            <summary>
            Initialization.
            </summary>
            <param name="queue">Instance of queue processor for notification messages.</param>
            <param name="settings">Notification settings.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriend(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the website url to a friend.
            </summary>
            <param name="toEmail">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="friendName">Friend's name.</param>
            <param name="fromName">From name.</param>
            <param name="messageFromFriend">Message text.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriend(ComLib.Notifications.NotificationContext)">
            <summary>
            Queues the notification to email to a friend.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            ${from.name}
            ${post.url}
            ${post.title}
            ${friend.name}
            ${friend.email}
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SubmitFeedBack(ComLib.Notifications.NotificationContext)">
            <summary>
            Submits the feedback notification.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            ${from.name}
            ${post.url}
            ${post.title}
            ${friend.name}
            ${friend.email}
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriendPost(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send an email to a friend with a link to a post on the page.
            </summary>
            <param name="toEmail">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="toFirstname">Name of recipient.</param>
            <param name="fromName">Name of sender.</param>
            <param name="messageToFriend">Message text.</param>
            <param name="postTitle">Title of post.</param>
            <param name="postUrl">Title of url.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriendPost(ComLib.Notifications.NotificationContext)">
            <summary>
            Sends a link to a post to a friend.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            ${from.name}
            ${post.url}
            ${post.title}
            ${friend.name}
            ${friend.email}
            </summary>
            <param name="ctx">Instance of notification context.</param>
        </member>
        <member name="T:ComLib.Maps.GoogleMapUrlBuilder">
            <summary>
            This class is used to create links for Google maps.
            <a href="http://maps.google.com/maps?f=q&amp;hl=en&amp;q=10-11+12th+avenue,+queens+ny+12345"></a>
            <a href="http://maps.google.com/maps?f=q&amp;hl=en&amp;q=44+Levitt+avenue,+bronx+ny+12345"></a>
            </summary>
        </member>
        <member name="T:ComLib.Maps.IMapUrlBuilder">
            <summary>
            Interface for building an url to link to a mapping system.
            e.g. Url to access location on google or yahoo maps.
            </summary>
        </member>
        <member name="M:ComLib.Maps.IMapUrlBuilder.Build(ComLib.LocationSupport.Address)">
            <summary>
            Builds a url with a map to the specified address.
            </summary>
            <param name="address">Targeted address.</param>
            <returns>Map url.</returns>
        </member>
        <member name="P:ComLib.Maps.IMapUrlBuilder.UrlPrefix">
            <summary>
            Get/set the url prefix to the map service.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GoogleMapUrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GoogleMapUrlBuilder"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GoogleMapUrlBuilder.Build(ComLib.LocationSupport.Address)">
            <summary>
            builds the url.
            e.g. 
            Address : 439 calhoun ave. bronx, ny 10465
            ="439+calhoun+ave.+bronx,+ny+10465"
            </summary>
            <param name="address">Address to location.</param>
            <returns>Url with mapped address.</returns>
        </member>
        <member name="P:ComLib.Maps.GoogleMapUrlBuilder.UrlPrefix">
            <summary>
            Set the url prefix:
            <a href="http://maps.google.com/maps?f=q&amp;hl=en&amp;q="></a>
            </summary>
        </member>
        <member name="T:ComLib.Ioc">
            <summary>
            Helper class to get a service object out of the 
            service locator.
            </summary>
        </member>
        <member name="M:ComLib.Ioc.Init(ComLib.IIoc)">
            <summary>
            Sets the object container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:ComLib.Ioc.AddObject(System.String,System.Object)">
            <summary>
            Adds the object to the container.
            </summary>
            <param name="objName">Name of the obj.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:ComLib.Ioc.GetObject``1(System.String)">
            <summary>
            Get the service and automatically converts to the appropriate type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Ioc.GetObject``1">
            <summary>
            Get the object using just the type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Ioc.Contains``1">
            <summary>
            Determine if the container contains the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ComLib.ImportExport.ImportExports">
            <summary>
            Import Export convenience class to store collection of various importexport services.
            </summary>
        </member>
        <member name="M:ComLib.ImportExport.ImportExports.Register``1">
            <summary>
            Register the ImportExport service.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.ImportExport.ImportExports.Register``1(ComLib.IValidator,System.String[],System.Boolean)">
            <summary>
            Register the import export service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator">Validator for the importexport service.</param>
            <param name="supportedFormats">Formats supported. e.g. "csv,xml,ini".</param>
            <param name="isReusable">Whether or not the service is reusable.</param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExports.Register``1(ComLib.IValidator,System.Boolean,ComLib.MapperSupport.IMapper{``0}[])">
            <summary>
            Register the import export service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator">Validator for the importexport service.</param>
            <param name="isReusable">Whether or not the service is reusable.</param>
            <param name="mappers">The mappers that can be used for importing/exporting the type.</param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExports.Register``1(ComLib.ImportExport.IImportExportService)">
            <summary>
            Register the import export service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ioService"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExports.For``1">
            <summary>
            Get the ImportExportService as type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExports.For(System.String)">
            <summary>
            Get the ImportExportService as type T.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.ImportExport.ImportExports.Instance">
            <summary>
            Gets the default instance of importexports
            </summary>
        </member>
        <member name="T:ComLib.Macros.MacroParameterAttribute">
            <summary>
            Attributes.
            </summary>
        </member>
        <member name="T:ComLib.ExtensionArgAttribute">
            <summary>
            This is a default attribute class, used to decorate implementation
            of dynamically loadable extension classes.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.Name">
            <summary>
            Name of the arg
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.Description">
            <summary>
            Describes the argument name.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.DataType">
            <summary>
            Date type of the argument.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.IsRequired">
            <summary>
            Indicates if is required.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.OrderNum">
            <summary>
            Order number for the argument.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.Example">
            <summary>
            Example value.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.ExampleMultiple">
            <summary>
            Example of mutliple various values.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionArgAttribute.Tag">
            <summary>
            Used to group various arguments.
            e.g. The tag can be used to separate base/derived argument defintions.
            </summary>
        </member>
        <member name="M:ComLib.Macros.MacroParameterAttribute.#ctor">
            <summary>
            Allow initialize via named property initializers.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.CountryRepository">
            <summary>
            Generic repository for persisting Country.
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositorySql`1">
            <summary>
            Repository for a relational database, base class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor(System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="connectionString">Initialization connection string.</param>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize.
            </summary>
            <param name="connectionInfo">Initialization connection information.</param>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize.
            </summary>
            <param name="connectionInfo">Connection information.</param>
            <param name="db">Database.</param>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize.
            </summary>
            <param name="connectionInfo">Connection information.</param>
            <param name="db">Database.</param>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Create(`0)">
            <summary>
            Create the entity in the datastore.
            </summary>
            <param name="entity">Entity to create.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Update(`0)">
            <summary>
            Update the entity in the datastore.
            </summary>
            <param name="entity">Entity to create/update.</param>
            <returns>Created/updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get page of records using filter.
            </summary>
            <param name="filter">Filter to apply.</param>
            <param name="pageNumber">Page number.</param>
            <param name="pageSize">Page size.</param>
            <returns>Paged list with matching entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get recents posts by page.
            </summary>
            <param name="pageNumber">Page number.</param>
            <param name="pageSize">Page size.</param>
            <returns>Paged list with matched entities.</returns>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.CountryRepository"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.CountryRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.CountryRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db"></param>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize the rowmapper
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.Create(ComLib.LocationSupport.Country)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.Update(ComLib.LocationSupport.Country)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.BuildParams(ComLib.LocationSupport.Country)">
            <summary>
            Creates db parameters for entity persistence.
            </summary>
            <param name="entity">Entity for which to create db parameters.</param>
            <returns>Array with db parameters for entity.</returns>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRepository.BuildParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates a db parameter.
            </summary>
            <param name="name">Name of parameter.</param>
            <param name="dbType">Type of parameter.</param>
            <param name="val">Value of parameter.</param>
            <returns>Created db parameter.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.CountryRowMapper">
            <summary>
            RowMapper for Country.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityRowMapper`1">
            <summary>
            Maps a row of data from a IDataReader to the entity of type T.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.RowMapperReaderBased`1">
            <summary>
            Abstract class for mapping a row from a DataReader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.RowMapperBaseWithCallBacks`3">
            <summary>
            Abstract class for row mapping.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRowId"></typeparam>
        </member>
        <member name="T:ComLib.Data.RowMapperBase`3">
            <summary>
            Abstract class for row mapping.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRowId"></typeparam>
        </member>
        <member name="M:ComLib.Data.RowMapperBase`3.MapRow(`0,`2)">
            <summary>
            Map the row number.
            </summary>
            <param name="source"></param>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.RowMapperBaseWithCallBacks`3.OnAfterRowsMapped(System.Collections.Generic.IList{`1})">
            <summary>
            Callback after rows have been mapped to items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:ComLib.Data.RowMapperBaseWithCallBacks`3.IsCallbackEnabledForAfterRowsMapped">
            <summary>
            Whether or not the callback for after rows have been mapped is enabeld.
            </summary>
        </member>
        <member name="M:ComLib.Data.RowMapperReaderBased`1.MapRows(System.Data.IDataReader)">
            <summary>
            Map all the rows to IList of objects T using DataReader
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="F:ComLib.Entities.EntityRowMapper`1._entityFactoryMethod">
            <summary>
            Allows derived classes to build instances of the entity.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CountryRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Creates an instance of Country from data of a data reader.
            </summary>
            <param name="reader">Reader with data.</param>
            <param name="rowNumber">Number of row with data.</param>
            <returns>Created instance of Country.</returns>
        </member>
        <member name="T:ComLib.Environments.EnvUtils">
            <summary>
            Utility class for loading inheritance based environments.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.GetEnvType(System.String)">
            <summary>
            Get environment type from name.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.ParseEnvsToItems(System.String)">
            <summary>
            Parse the selected environments and config paths.
            </summary>
            <param name="envs">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
            <returns>List of environment items.</returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.ParseEnvsToNames(System.String)">
            <summary>
            Parse the selected environments and config paths.
            </summary>
            <param name="envNames">"prod,qa,dev"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.GetSelectableEnvironments(System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Get list of names of environments that can be selected.
            </summary>
            <param name="envItems"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.Parse(System.String,System.String@)">
            <summary>
            Get list of inherited environments.
            </summary>
            <param name="selectedEnv">"prod,qa,dev"</param>
            <param name="firstEnv"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.ConvertNestedToFlatInheritance(ComLib.Environments.EnvItem,System.Collections.Generic.IDictionary{System.String,ComLib.Environments.EnvItem})">
            <summary>
            Traverses the nodes inheritance path to build a single flat delimeted line of 
            inheritance paths.
            e.g. returns "Prod,Uat,Qa,Dev".
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.LoadInheritance(ComLib.Environments.EnvItem,System.Collections.Generic.IDictionary{System.String,ComLib.Environments.EnvItem})">
            <summary>
            Loads an inheritance chain delimited by ,(comma)
            </summary>
            <param name="coreEnv"></param>
            <param name="envItems"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.CollectEnvironmentProps(System.Collections.Generic.List{ComLib.Environments.EnvItem},System.String,System.Func{ComLib.Environments.EnvItem,System.String})">
            <summary>
            Build a delimited inheritance path of environments names using each
            of the envitems supplied.
            e.g. prod,qa,dev.
            if "," is the delimeter and "prod", "qa" are the environment names.
            </summary>
            <param name="inheritedChainedEnvs"></param>
            <param name="delimeter"></param>
            <param name="propGetter"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Cryptography.Crypto">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.#cctor">
            <summary>
            Create default instance of symmetric cryptographer.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.Init(ComLib.Cryptography.ICrypto)">
            <summary>
            Initialize to new provider.
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.IsMatch(System.String,System.String)">
            <summary>
            Determine if the plain text and encrypted are ultimately the same.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.ToMD5Hash(System.String)">
            <summary>
            Calculate the md5 hash of the input text.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.Crypto.Provider">
            <summary>
            Get reference to current encryption provider.
            </summary>
        </member>
        <member name="T:ComLib.Collections.IndexSpan">
            <summary>
            Represents a set of indexes which will be iterated on.
            </summary>
        </member>
        <member name="M:ComLib.Collections.IndexSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="F:ComLib.Collections.IndexSpan.StartIndex">
            <summary>
            The start index.
            </summary>
        </member>
        <member name="F:ComLib.Collections.IndexSpan.Count">
            <summary>
            Number of items represented in this iteration.
            </summary>
        </member>
        <member name="P:ComLib.Collections.IndexSpan.EndIndex">
            <summary>
            The ending index, as calculated using the startIndex and count.
            </summary>
        </member>
        <member name="T:ComLib.Collections.IterationSplitter">
            <summary>
            Class used to split indexes into iteration spans.
            </summary>
        </member>
        <member name="M:ComLib.Collections.IterationSplitter.CalculateItemsPerIteration(System.Double,System.Int32)">
            <summary>
            Calculate how many items there will be in an iteration.
            </summary>
            <param name="totalCount"></param>
            <param name="numberOfIterations"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.IterationSplitter.SplitIterations(System.Int32,System.Int32)">
            <summary>
            Splits the iteratons into parts(spans).
            </summary>
            <param name="totalCount"></param>
            <param name="numberOfIterations"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.IterationSplitter.Split(System.Int32,System.Int32)">
            <summary>
            Splits the iteratons into parts(spans).
            </summary>
            <param name="totalCount"></param>
            <param name="itemsPerIteration"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.EnumeratorMulti`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{`0}})">
            <summary>
            Initialize the list.
            </summary>
            <param name="allEnumerators"></param>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.Reset">
            <summary>
            Reset the iterator to first item enumerator.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.IsWithinBounds">
            <summary>
            Check if current index referencing the enumerator in the list 
            is within bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.EnumeratorMulti`1.Current">
            <summary>
            Get the current item.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorMulti`1.System#Collections#IEnumerator#Current">
            <summary>
            Get the current item in list.
            </summary>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderDomain">
            <summary>
            Code Builder Domain Model.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.Process(ComLib.Models.ModelContext)">
            <summary>
            Builds the Domain model code which includes :
            1. Entity.
            2. ActiveRecord
            3. Service 
            4. Repository
            5. Settings
            6. Validator
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildSubstitutions(ComLib.Models.ModelContext,ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Build all the substutions.
            </summary>
            <param name="ctx">The entire context of all the models.</param>
            <param name="model"></param>
            <param name="modelChain">The inheritance chain of the model.</param>
            <param name="subs">The dictionary of substutions to populate.</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildNameSpaces(ComLib.Models.Model)">
            <summary>
            Build the necessary referenced namespaces.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildValidation(ComLib.Models.Model)">
            <summary>
            Build the validation code.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildRelationFetch(ComLib.Models.Model)">
            <summary>
            Generates fetch for related objects.
            </summary>
            <param name="model">Model to use.</param>
            <returns>Generated string.</returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildRowMapping(ComLib.Models.Model)">
            <summary>
            Build the validation code.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildDbParams(ComLib.Models.Model,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Build the validation code.
            </summary>
            <param name="model"></param>
            <param name="subs"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildEditRoles(ComLib.Models.Model)">
            <summary>
            Builds a comma delimited string of roles that can moderate
            instances of the model specified.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildPropertiesForModel(ComLib.Models.Model)">
            <summary>
            Build the properties.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildProperties(ComLib.Models.Model,System.Text.StringBuilder)">
            <summary>
            Build properties
            </summary>
            <param name="model"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Build properties.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="usePropType"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Boolean,System.String,System.Text.StringBuilder)">
            <summary>
            Build properties.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="usePropType"></param>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Boolean,System.String,System.Boolean)">
            <summary>
            Builds code for a property.
            </summary>
            <param name="model">Model to use.</param>
            <param name="prop">Property name.</param>
            <param name="usePropType">True to use a default get/set model,
            false to use a private variable with the default get/set model.</param>
            <param name="type">Type to generate.</param>
            <param name="initialize">If using a private variable, setting this to
            true will also generate code to generate a new instance of the variable.</param>
            <returns>Generated string.</returns>
        </member>
        <member name="P:ComLib.CodeGeneration.CodeBuilderDomain.Context">
            <summary>
            Get/set the model context.
            </summary>
        </member>
        <member name="T:ComLib.Categories.CategoryValidator">
            <summary> 
            Category validator. 
            </summary> 
        </member>
        <member name="M:ComLib.Categories.CategoryValidator.#ctor(ComLib.Categories.Category)">
            <summary>
            Initializer.
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:ComLib.Categories.CategoryValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary> 
            Validate the category. 
            </summary> 
            <param name="validationEvent"></param>
            <returns></returns> 
        </member>
        <member name="T:ComLib.Automation.ScriptCmdLine">
            <summary>
            Executes commands in a script that are in the format of command line arguments. e.g.
            1. HelloWorldAutoMap user=kishore isactive=true age=30 birthdate=2/2/1979
            2. HelloWorldAutoMap user="kishore1" isactive="true" age="31" birthdate="2/2/1980"
            </summary>
        </member>
        <member name="T:ComLib.Automation.Script">
            <summary>
            Represents a script containing commands that can be executed.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Script._functions">
            <summary>
            List of registered functions
            </summary>
        </member>
        <member name="F:ComLib.Automation.Script._scope">
            <summary>
            Structure for storing variables.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Script.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Script.#ctor(System.String)">
            <summary>
            Initialize with assembly list.
            </summary>
            <param name="assemblies">Delimited list of assemblies.</param>
        </member>
        <member name="F:ComLib.Automation.Script._cmdService">
            <summary>
            The command service for loading the commands.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Script._cmdResults">
            <summary>
            The List of command results.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Script._allCommandsSuccessful">
            <summary>
            Whether or not all commands are successful.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Script.Run(System.String)">
            <summary>
            Runs automation commands using supplied text rather than filepath.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.Include(System.String,System.String)">
            <summary>
            Includes an addition file's content into the script.
            </summary>
            <param name="name"></param>
            <param name="content"></param>
        </member>
        <member name="M:ComLib.Automation.Script.IsExistingVariable(System.String)">
            <summary>
            Returns whether or not the name provided is exists as a variable.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.Get``1(System.String)">
            <summary>
            Get variable value from either it's scope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.GetParam``1(System.String,``0)">
            <summary>
            Get variable value from either it's scope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the parameter to get</param>
            <param name="defaultValue">Default value if parameter is not there.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.GetOrConvertTo``1(System.String)">
            <summary>
            Get either the value of the variable name supplied if it's a variable name or returns the value converted to the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">e.g. "firstname" will return value of variable named firstname. or "12" will return int 12.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.SetVariable(System.String,System.Object)">
            <summary>
            Sets a variables
            </summary>
            <param name="name">Name of the variable</param>
            <param name="val">Value for the variable</param>
        </member>
        <member name="M:ComLib.Automation.Script.SetFunction(System.String,System.Func{System.Collections.Generic.IList{System.String},System.Object})">
            <summary>
            Sets a functiona that can be called.
            </summary>
            <param name="name"></param>
            <param name="callback"></param>
        </member>
        <member name="M:ComLib.Automation.Script.InterpretValue``1(System.String)">
            <summary>
            Interprets the value supplied by replacing parameters with variable values. e.g. "${firstname}" gets replace with the value associated with variable called firstname 
            </summary>
            <typeparam name="T">The type to convert the final value to</typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.Init">
            <summary>
            Initialize with default data.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Script.DoRun(System.String)">
            <summary>
            Run the content.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.GetCommand(System.String)">
            <summary>
            Gets a tuple containing the command to create and whether or not it was successfully created.
            </summary>
            <param name="name">Name of the command</param>
            <returns>True:Command if command name is valid, False,Null if command name does not exist.</returns>
        </member>
        <member name="M:ComLib.Automation.Script.ExecuteCommand(System.String,System.Collections.Generic.List{System.Object},System.Object,System.Int32,System.Action{ComLib.Automation.Command})">
            <summary>
            Executes the command.
            </summary>
            <param name="commandName">The name of the command</param>
            <param name="paramList">The parameter list for the command</param>
            /// <param name="paramMap">The named parameters for the command</param>
            <param name="commandIndex">The index number of the command in the script</param>
            <param name="autoMapCallback">Callback to automap args to properties if automapping is enabled for command</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Script.RegisterSystemCommands">
            <summary>
            Register system level commands
            </summary>
        </member>
        <member name="M:ComLib.Automation.Script.RegisterSystemVariables">
            <summary>
            System supplied variables.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Script.GetInternal``1(System.String)">
            <summary>
            Gets internal variables and/or registered function variables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Automation.Script.Assemblies">
            <summary>
            A delimited list of assemblies to load the commands contained in the automation script.
            </summary>
        </member>
        <member name="P:ComLib.Automation.Script.Service">
            <summary>
            Get / set the command service.
            </summary>
        </member>
        <member name="P:ComLib.Automation.Script.Scope">
            <summary>
            Scope
            </summary>
        </member>
        <member name="M:ComLib.Automation.ScriptCmdLine.#ctor(System.String)">
            <summary>
            Initialize with assembly list.
            </summary>
            <param name="assemblies">Delimited list of assemblies.</param>
        </member>
        <member name="M:ComLib.Automation.ScriptCmdLine.Include(System.String,System.String)">
            <summary>
            Registers an external script that may be referenced in the script to run.
            </summary>
            <param name="name">The name of the external file to include</param>
            <param name="content">The content of the external file</param>
        </member>
        <member name="M:ComLib.Automation.ScriptCmdLine.IsExistingVariable(System.String)">
            <summary>
            Returns whether or not the name provided is exists as a variable.
            </summary>
            <param name="name">The name of the variable to check if it's an existing variable.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptCmdLine.SetVariable(System.String,System.Object)">
            <summary>
            Sets a variables
            </summary>
            <param name="name">Name of the variable</param>
            <param name="val">Value for the variable</param>
        </member>
        <member name="M:ComLib.Automation.ScriptCmdLine.Get``1(System.String)">
            <summary>
            Get variable value from either it's scope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptCmdLine.GetParam``1(System.String,``0)">
            <summary>
            Gets a parameter value from the current command
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the parameter to get</param>
            <param name="defaultVal">Default value to get if parameter does not exist</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptCmdLine.DoRun(System.String)">
            <summary>
            Run the script content.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.Example_Entity">
            <summary>
            Example for the Entities namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Entity.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Entity.Person">
            <summary>
            This class just show how to subclass the Entity base class
            to get various built-in properties like Id, CreateDate etc.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Entity.Person2">
            <summary>
            This class shows how to subclass the generics based Entity(T)
            base class to get parameterless CRUD ( Create, Get, Update, Delete, All ) methods.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Entity.Person3">
            <summary>
            This class shows how to implement the IEntityVersioned interface to get
            the entities to be versioned in your repository.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityVersioned">
            <summary>
            Interface for versioned entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityVersioned.IsLatestVersion">
            <summary>
            Whether or not this is the latest version.
            This can be achieved using a test for VersionRefId == -1.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IEntityVersioned.Version">
            <summary>
            Version number.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityVersioned.VersionRefId">
            <summary>
            Reference of the Id of the entity w/ the latest version.
            This used set for older entities to refer to the latest entity.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Entity.Person3.IsLatestVersion">
            <summary>
            Is this the latest version?
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Samples.Example_Entity.Person3.Version">
            <summary>
            Current version
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Entity.Person3.VersionRefId">
            <summary>
            Reference to the Id ( primary key ) of the latest version.
            This is > 0 for older/historic versions of the entity.
            The latest version will always have this set to -1.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Environments">
            <summary>
            Example for the Environments namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Environments.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Environments.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Environments.GetSampleEvironments">
            <summary>
            This builds a datastructure of all the environments supported
            and the links to the config files for each environment 
            and how they are inherited.
            
            THIS CAN BE LOADED FROM AN XML, JSON, YAML, INI file or whatever.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.Example_Extensions">
            <summary>
            Example of Extensions component to load classes using attributes
            and create instances automatically.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Extensions.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.IBlogWidget">
            <summary>
            interface for the custom widgets
            </summary>
        </member>
        <member name="M:ComLib.Samples.SimpleBlogWidget.Render">
            <summary>
            Render the widget
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Validation">
            <summary>
            Futher validation methods provided in an assert like manner 
            without throwing any exceptions.
            All methods take in the IStatusResults interface to collect the errors.
            </summary>
            <summary>
            This class provides validation utility methods.
            </summary>
            <summary>
            This class provides validation utility methods.
            </summary>
        </member>
        <member name="M:ComLib.Validation.AreEqual``1(``0,``0,ComLib.IErrors,System.String)">
            <summary>
            Determines if items are equal.
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <param name="errors">Check errors.</param>
            <param name="tag">Tag.</param>
            <returns>True if items are equal.</returns>
        </member>
        <member name="M:ComLib.Validation.AreNotEqual``1(``0,``0,ComLib.IErrors,System.String)">
            <summary>
            Determines if objects are not equal
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <param name="errors">Check errors.</param>
            <param name="tag">Tag.</param>
            <returns>True if items are not equal.</returns>
        </member>
        <member name="M:ComLib.Validation.AreNoneNull(System.String[],System.String[],System.String,System.String)">
            <summary>
            Checks that none of the strings in the array are null.
            </summary>
            <param name="items">Array of strings to check for null. e.g. "username1", "password1"</param>
            <param name="itemNames">Representative names of the strings supplied in the array.</param>
            <param name="errorSuffix">String to use at the end of each error ( if string is emtpy. )
            e.g. " is not supplied." would be suffixed to "Username is not supplied."</param>
            <param name="multilineSeparator">Separator to use for representing multiple errors on separate lines.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="F:ComLib.Validation._messages">
            <summary>
            Error messages to return to callers.
            </summary>
        </member>
        <member name="M:ComLib.Validation.SetDefaultMessages">
            <summary>
            Resets the error messages to the default values.
            </summary>
        </member>
        <member name="M:ComLib.Validation.SetCustomMessages(ComLib.ValidationExtensionMessages)">
            <summary>
            Loads custom error messages to override the default values.
            </summary>
            <param name="messages">Custom validation error messages.</param>
        </member>
        <member name="M:ComLib.Validation.ValidateObject(System.Object,ComLib.IErrors)">
            <summary>
            Validates the object using System.ComponentModel.DataAnnotations, and puts any errors into the errors object.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="errors">The collection to put validation errors into.</param>
            <returns>True if the validation succeeds.</returns>
        </member>
        <member name="M:ComLib.Validation.IsStringLengthMatch(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,ComLib.IErrors,System.String)">
            <summary>
            Determine if string is valid with regard to minimum / maximum length.
            </summary>
            <param name="text">Text to check length of.</param>
            <param name="allowNull">Indicate whether or not to allow null.</param>
            <param name="checkMinLength">Whether or not to check the min length</param>
            <param name="checkMaxLength">Whether or not to check the max length</param>
            <param name="minLength">-1 to not check min length, > 0 to represent min length.</param>
            <param name="maxLength">-1 to not check max length, > 0 to represent max length.</param>
            <param name="errors">The error collection to populate if any validation errors occur</param>
            <param name="tag">The tag to use when populating any errors into the error collection.</param>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.Validation.IsStringRegExMatch(System.String,System.Boolean,System.String,ComLib.IErrors,System.String)">
            <summary>
            Determines if string matches the regex.
            </summary>
            <param name="text">Text to match.</param>
            <param name="allowNull">Whether or not text can be null or empty for successful match.</param>
            <param name="regEx">Regular expression to use.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if match, false otherwise.</returns>
        </member>
        <member name="M:ComLib.Validation.IsStringIn(System.String,System.Boolean,System.Boolean,System.String[],ComLib.IErrors,System.String)">
            <summary>
            Determines whether the text [is string in] [the specified values].
            </summary>
            <param name="text">The text.</param>
            <param name="allowNull">if set to <c>true</c> [allow null].</param>
            <param name="compareCase">if set to <c>true</c> [compare case].</param>
            <param name="allowedValues">The allowed values.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>
            	<c>true</c> if [is string in] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Validation.IsNumeric(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is numeric
            </summary>
            <param name="text"></param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is numeric.</returns>
        </member>
        <member name="M:ComLib.Validation.IsNumericWithinRange(System.String,System.Boolean,System.Boolean,System.Double,System.Double,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="text">Text to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check the min</param>
            <param name="checkMaxBound">Whether or not to check the max</param>
            <param name="min">Min bound.</param>
            <param name="max">Max bound.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is numeric and within range.</returns>
        </member>
        <member name="M:ComLib.Validation.IsNumericWithinRange(System.Double,System.Boolean,System.Boolean,System.Double,System.Double,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="num">Number to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check the min</param>
            <param name="checkMaxBound">Whether or not to check the max</param>
            <param name="min">Min bound.</param>
            <param name="max">Max bound.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is numeric and within range.</returns>
        </member>
        <member name="M:ComLib.Validation.IsAlpha(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>True if the text is alphanumeric.</returns>
        </member>
        <member name="M:ComLib.Validation.IsAlphaNumeric(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets or numbers.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>Ture if the text is alphanumeric.</returns>
        </member>
        <member name="M:ComLib.Validation.IsDate(System.String,ComLib.IErrors,System.String)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text">Text to check.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid date.</returns>
        </member>
        <member name="M:ComLib.Validation.IsDateWithinRange(System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,ComLib.IErrors,System.String)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text">Text to check if it's date and within bounds specified.</param>
            <param name="checkMinBound">Whether or not to check the min</param>
            <param name="checkMaxBound">Whether or not to check the max</param>
            <param name="minDate">Min date.</param>
            <param name="maxDate">Max date.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid date within the range.</returns>
        </member>
        <member name="M:ComLib.Validation.IsDateWithinRange(System.DateTime,System.Boolean,System.Boolean,System.DateTime,System.DateTime,ComLib.IErrors,System.String)">
            <summary>
            Determines if the date supplied is a date within the specified bounds.
            </summary>
            <param name="date">Date to check if within bounds specified.</param>
            <param name="checkMinBound">Whether or not to check the min</param>
            <param name="checkMaxBound">Whether or not to check the max</param>
            <param name="minDate">Min date.</param>
            <param name="maxDate">Max date.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid date within the range.</returns>
        </member>
        <member name="M:ComLib.Validation.IsTimeOfDay(System.String,ComLib.IErrors,System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time">Text to check.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid time.</returns>
        </member>
        <member name="M:ComLib.Validation.IsTimeOfDayWithinRange(System.String,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan,ComLib.IErrors,System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time">Text to check.</param>
            <param name="checkMinBound">True to check min time span.</param>
            <param name="checkMaxBound">True to check max time span.</param>
            <param name="min">Min time span.</param>
            <param name="max">Max time span.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid time within the range.</returns>
        </member>
        <member name="M:ComLib.Validation.IsTimeOfDayWithinRange(System.TimeSpan,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan,ComLib.IErrors,System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time">Text to check.</param>
            <param name="checkMinBound">True to check min bound.</param>
            <param name="checkMaxBound">True to check max bound.</param>
            <param name="min">Min time span.</param>
            <param name="max">Max time span.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid time within the range.</returns>
        </member>
        <member name="M:ComLib.Validation.IsPhoneUS(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid US phone number.</returns>
        </member>
        <member name="M:ComLib.Validation.IsPhoneUS(System.Int32,ComLib.IErrors,System.String)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="phone">Text to check.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid US phone number.</returns>
        </member>
        <member name="M:ComLib.Validation.IsSsn(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <returns>True if the text is a valid ssn.</returns>
        </member>
        <member name="M:ComLib.Validation.IsSsn(System.Int32,ComLib.IErrors,System.String)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="ssn">Text to check.</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>True if the text is a valid ssn.</returns>
        </member>
        <member name="M:ComLib.Validation.IsEmail(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if email supplied is a valid email.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>True if the text is a valid e-mail.</returns>
        </member>
        <member name="M:ComLib.Validation.IsUrl(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if url supplied is a valid url.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>True if the text is a valid url.</returns>
        </member>
        <member name="M:ComLib.Validation.IsZipCode(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is a valid zip code.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>True if the text is a valid zip code.</returns>
        </member>
        <member name="M:ComLib.Validation.IsZipCodeWith4Char(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is a valid zip with 4 additional chars.
            e.g. 12345-2321
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>True if the text is valid.</returns>
        </member>
        <member name="M:ComLib.Validation.IsZipCodeWith4CharOptional(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is a valid zip with 4 additional chars.
            e.g. 12345-2321
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns>True if the text is valid.</returns>
        </member>
        <member name="M:ComLib.Validation.CheckError(System.Boolean,ComLib.IErrors,System.String,System.String)">
            <summary>
            Check the condition and add the error.
            </summary>
            <param name="isValid">True to add the error.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <param name="error">The error text to add</param>
            <returns>isValid.</returns>
        </member>
        <member name="M:ComLib.Validation.CheckErrorRegEx(System.String,System.Boolean,System.String,ComLib.IErrors,System.String,System.String)">
            <summary>
            Check the text for the regex pattern and adds errors in incorrect.
            </summary>
            <param name="inputText">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <param name="regExPattern">Pattern to use for checking.</param>
            <param name="errors">The error collection to populate with any errors.</param>
            <param name="tag">Tag used in an error message.</param>
            <param name="error">Error string.</param>
            <returns>True if the checking succeeds.</returns>
        </member>
        <member name="M:ComLib.Validation.IsStringLengthMatch(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Determine if string is valid with regard to minimum / maximum length.
            </summary>
            <param name="text">Text to check length of.</param>
            <param name="allowNull">Indicate whether or not to allow null.</param>
            <param name="checkMaxLength">Indicate whether to check min length.</param>
            <param name="checkMinLength">Indicate whether to check max length.</param>
            <param name="minLength">-1 to not check min length, > 0 to represent min length.</param>
            <param name="maxLength">-1 to not check max length, > 0 to represent max length.</param>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.Validation.IsBetween(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Check if the integer value is between the min/max sizes.
            </summary>
            <param name="val">The value to check.</param>
            <param name="checkMinLength">True to check for the minimum bound.</param>
            <param name="checkMaxLength">True to check for the maximuim bound.</param>
            <param name="minLength">Minimum length.</param>
            <param name="maxLength">Maximum length.</param>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.Validation.IsSizeBetween(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Determine if the size <paramref name="val"/> in bytes is between the min/max size in kilobytes
            </summary>
            <param name="val">Value of size to check.</param>
            <param name="checkMinLength">True to check for the minimum bound.</param>
            <param name="checkMaxLength">True to check for the maximuim bound.</param>
            <param name="minKilobytes">Min kilobytes.</param>
            <param name="maxKilobytes">Max kilobytes.</param>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.Validation.IsStringRegExMatch(System.String,System.Boolean,System.String)">
            <summary>
            Determines if string matches the regex.
            </summary>
            <param name="text">Text to match.</param>
            <param name="allowNull">Whether or not text can be null or empty for successful match.</param>
            <param name="regEx">Regular expression to use.</param>
            <returns>True if match, false otherwise.</returns>
        </member>
        <member name="M:ComLib.Validation.IsNumeric(System.String)">
            <summary>
            Determines if text supplied is numeric
            </summary>
            <param name="text">Text to check.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Validation.IsNumericWithinRange(System.String,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="text">Text to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check the min bound.</param>
            <param name="checkMaxBound">Whether or not to check the max bound.</param>
            <param name="min">Min bound.</param>
            <param name="max">Max bound.</param>
            <returns>True if the text is numeric and within the bounds.</returns>
        </member>
        <member name="M:ComLib.Validation.IsNumericWithinRange(System.Double,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="num">Num to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check min</param>
            <param name="checkMaxBound">Whether or not to check max</param>
            <param name="min">Min bound.</param>
            <param name="max">Max bound.</param>
            <returns>True if the number is within range.</returns>
        </member>
        <member name="M:ComLib.Validation.IsAlpha(System.String,System.Boolean)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets.
            </summary>
            <param name="text">String to check.</param>
            <param name="allowNull">True to allow null value.</param>
            <returns>True if the text is alphanumeric.</returns>
        </member>
        <member name="M:ComLib.Validation.IsAlphaNumeric(System.String,System.Boolean)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets or numbers.
            </summary>
            <param name="text">String to check.</param>
            <param name="allowNull">True to allow null value.</param>
            <returns>True if the text is alphanumeric.</returns>
        </member>
        <member name="M:ComLib.Validation.IsDate(System.String)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text">Text to check.</param>
            <returns>True if the text is a valid date.</returns>
        </member>
        <member name="M:ComLib.Validation.IsDateWithinRange(System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text">Text to check.</param>
            <param name="checkMinBound">True to check for a minumum bound.</param>
            <param name="checkMaxBound">True to check for a maximum bound.</param>
            <param name="minDate">Min date.</param>
            <param name="maxDate">Max date.</param>
            <returns>True if the text is a valid date within bounds.</returns>
        </member>
        <member name="M:ComLib.Validation.IsDateWithinRange(System.DateTime,System.Boolean,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Determines if the date supplied is a date within the specified bounds.
            </summary>
            <param name="date">Date to check.</param>
            <param name="checkMinBound">True to check for a minumum bound.</param>
            <param name="checkMaxBound">True to check for a maximum bound.</param>
            <param name="minDate">Min date.</param>
            <param name="maxDate">Max date.</param>
            <returns>True if the date is within bounds.</returns>
        </member>
        <member name="M:ComLib.Validation.IsTimeOfDay(System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time">Text to check.</param>
            <returns>True if the text is a valid time of day.</returns>
        </member>
        <member name="M:ComLib.Validation.IsTimeOfDayWithinRange(System.String,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time">Text to check.</param>
            <param name="checkMinBound">True to check against min bound.</param>
            <param name="checkMaxBound">True to check against max bound.</param>
            <param name="min">Min bound.</param>
            <param name="max">Max bound.</param>
            <returns>True if the text is a valid time and within the bounds.</returns>
        </member>
        <member name="M:ComLib.Validation.IsTimeOfDayWithinRange(System.TimeSpan,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time">Instance of time span to check.</param>
            <param name="checkMinBound">True to check against min bound.</param>
            <param name="checkMaxBound">True to check against max bound.</param>
            <param name="min">Min bound.</param>
            <param name="max">Max bound.</param>
            <returns>True if the time is within the bounds.</returns>
        </member>
        <member name="M:ComLib.Validation.IsPhoneUS(System.String,System.Boolean)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <returns>True if the text is a valid US phone number.</returns>
        </member>
        <member name="M:ComLib.Validation.IsPhoneUS(System.Int32)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="phone">Text to check.</param>
            <returns>True if the text is a valid US phone number.</returns>
        </member>
        <member name="M:ComLib.Validation.IsSsn(System.String,System.Boolean)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <returns>True if the text is a valid ssn.</returns>
        </member>
        <member name="M:ComLib.Validation.IsSsn(System.Int32)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="ssn">Text to check.</param>
            <returns>True if the text is a valid ssn.</returns>
        </member>
        <member name="M:ComLib.Validation.IsEmail(System.String,System.Boolean)">
            <summary>
            Determines if email supplied is a valid email.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <returns>True if the text is a valid e-mail.</returns>
        </member>
        <member name="M:ComLib.Validation.IsUrl(System.String,System.Boolean)">
            <summary>
            Determines if url supplied is a valid url.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <returns>True if the text is a valid url.</returns>
        </member>
        <member name="M:ComLib.Validation.IsZipCode(System.String,System.Boolean)">
            <summary>
            Determines if text supplied is a valid zip code.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <returns>True if the text is a valid zip code.</returns>
        </member>
        <member name="M:ComLib.Validation.IsZipCodeWith4Char(System.String,System.Boolean)">
            <summary>
            Determines if text supplied is a valid zip with 4 additional chars.
            e.g. 12345-2321
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <returns>True if the text is a valid zip code.</returns>
        </member>
        <member name="M:ComLib.Validation.AreEqual``1(``0,``0)">
            <summary>
            Determines if items are equal.
            </summary>
            <typeparam name="T">Type of objects to check.</typeparam>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:ComLib.Validation.AreNotEqual``1(``0,``0)">
            <summary>
            Determines if objects are not equal
            </summary>
            <typeparam name="T">Type of objects to check.</typeparam>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:ComLib.Validation.IsMatchRegEx(System.String,System.Boolean,System.String)">
            <summary>
            Checks if a text matches a regular expression.
            </summary>
            <param name="text">Text to check.</param>
            <param name="allowNull">True to allow a null value.</param>
            <param name="regExPattern">Regular expression to use.</param>
            <returns>True if the text matches the expression.</returns>
        </member>
        <member name="M:ComLib.Validation.ContainsLongSingleWord(System.String,System.Int32,System.String)">
            <summary>
            Is valid - text doesn't contain any word that has
            more than maxChars specified.
            <param name="text">Text to check.</param>
            <param name="maxCharsInWord">Maximum characters to allow.</param>
            <param name="errorMessage">Error message.</param>
            <returns>True if the text is valid.</returns>
            </summary>
        </member>
        <member name="T:ComLib.ToDo">
            <summary>
            Class to represent "TODO" blocks which need some action. Either "optimzation", "implementation", "bugfix", "workaround".
            </summary>
        </member>
        <member name="M:ComLib.ToDo.Optimize(ComLib.ToDo.Priority,System.String,System.String,System.Action)">
            <summary>
            Logs the specified action for optimization.
            </summary>
            <param name="priority">The priority.</param>
            <param name="author">The author.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ComLib.ToDo.CodeReview(ComLib.ToDo.Priority,System.String,System.String,System.Action)">
            <summary>
            Logs the specified action as a code review
            </summary>
            <param name="priority">The priority.</param>
            <param name="author">The author.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ComLib.ToDo.BugFix(ComLib.ToDo.Priority,System.String,System.String,System.Action)">
            <summary>
            Logs the specified action as an area for a bugfix
            </summary>
            <param name="priority">The priority.</param>
            <param name="author">The author.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ComLib.ToDo.WorkAround(ComLib.ToDo.Priority,System.String,System.String,System.Action)">
            <summary>
            Logs the specified action as a workaround
            </summary>
            <param name="priority">The priority.</param>
            <param name="author">The author.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ComLib.ToDo.Refactor(ComLib.ToDo.Priority,System.String,System.String,System.Action)">
            <summary>
            Logs the specified action as an area for refactoring.
            </summary>
            <param name="priority">The priority.</param>
            <param name="author">The author.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ComLib.ToDo.Implement(ComLib.ToDo.Priority,System.String,System.String,System.Action)">
            <summary>
            Implementation the specified action.
            </summary>
            <param name="priority">The priority.</param>
            <param name="author">The author.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ComLib.ToDo.Do(System.String,ComLib.ToDo.Priority,System.String,System.String,System.Action)">
            <summary>
            Does the specified action while logging contextual information.
            </summary>
            <param name="tag">The tag.</param>
            <param name="priority">The priority.</param>
            <param name="author">The author.</param>
            <param name="description">The description.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:ComLib.ToDo.Logger">
            <summary>
            Initialize logging lamda.
            </summary>
        </member>
        <member name="P:ComLib.ToDo.IsLoggingEnabled">
            <summary>
            Whether or not to log the ToDo items.
            </summary>
        </member>
        <member name="T:ComLib.ToDo.Priority">
            <summary>
            Priority for ToDo items.
            </summary>
        </member>
        <member name="F:ComLib.ToDo.Priority.Low">
            <summary>
            Low prioroty for ToDo
            </summary>
        </member>
        <member name="F:ComLib.ToDo.Priority.Normal">
            <summary>
            Normal priority
            </summary>
        </member>
        <member name="F:ComLib.ToDo.Priority.High">
            <summary>
            High priority
            </summary>
        </member>
        <member name="F:ComLib.ToDo.Priority.Critical">
            <summary>
            Critical priority.
            </summary>
        </member>
        <member name="T:ComLib.Lang.LBool">
            <summary>
            Boolean datatype.
            </summary>
        </member>
        <member name="M:ComLib.Lang.LBool.ToBool">
            <summary>
            Get boolean value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.EnumerableHelper">
            <summary>
            This class contains methods to help with enumrating items.
            </summary>
        </member>
        <member name="M:ComLib.EnumerableHelper.ForEachByCols(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Calls the action by supplying the start and end index.
            </summary>
            <param name="itemCount">Number of items.</param>
            <param name="cols">Number of columns.</param>
            <param name="action">Action to call for each item.</param>
        </member>
        <member name="T:ComLib.Web.Helpers.JsonHelper">
            <summary>
            Helper class for Json related functionality.
            </summary>
        </member>
        <member name="M:ComLib.Web.Helpers.JsonHelper.EscapeString(System.String,System.Boolean)">
            <summary>
            Escapes text to handle double quotes.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="encloseInQuotes">True to enclose in quotes.</param>
            <returns>Escaped text.</returns>
        </member>
        <member name="M:ComLib.Web.Helpers.JsonHelper.ConvertToJsonString``1(ComLib.PagedList{``0},System.Collections.Generic.IList{System.Reflection.PropertyInfo},System.Boolean)">
            <summary>
            Converts the paged items to list of json objects using the property metadata provided.
            </summary>
            <typeparam name="T">Type of paged items.</typeparam>
            <param name="result">Paged list.</param>
            <param name="_columnProps">Metadata.</param>
            <param name="convertBoolToYesNo">True to convert booleans to yes/no.</param>
            <returns>Json string.</returns>
        </member>
        <member name="T:ComLib.Reflection.ReflectionUtils">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperties``1(``0,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Set object properties on T using the properties collection supplied.
            The properties collection is the collection of "property" to value.
            </summary>
            <typeparam name="T">A class type.</typeparam>
            <param name="obj">Object whose properties will be set.</param>
            <param name="properties">List of key/value pairs with property names and values.</param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty``1(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <typeparam name="T">A class type.</typeparam>
            <param name="obj">Object whose property will be set.</param>
            <param name="propName">Property name to set.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="propName">Property name to set.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="prop">Property information.</param>
            <param name="propVal">Property value to set.</param>
            <param name="catchException">Try to catch any exception and
            not throw it to the caller.</param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Set the property value using the string value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="prop">Property information.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the property value.
            </summary>
            <param name="obj">Object whose property will be retrieved.</param>
            <param name="propName">Name of property to retrieve.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertyValues(System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Get all the property values.
            </summary>
            <param name="obj">Object whose properties will be retrieved.</param>
            <param name="properties">List of properties to retrieve.</param>
            <returns>List with property values.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Object,System.String)">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj">Object whose properties will be retrieved.</param>
            <param name="propsDelimited">Delimited list with properties to retrieve.</param>
            <returns>List of property values.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[])">
            <summary>
            Get property information for a type.
            </summary>
            <param name="type">Type whose property names to retrieve.</param>
            <param name="props">Array with property names to look for.</param>
            <returns>List with property information of found properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[],System.Reflection.BindingFlags)">
            <summary>
            Get all the properties.
            </summary>
            <param name="type">Type whose property names to retrieve.</param>
            <param name="props">Array with property names to look for.</param>
            <param name="flags">Flags to use when searching for properties.</param>
            <returns>List with property information of found properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertyValueSafely(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value safely, without throwing an exception.
            If an exception is caught, null is returned.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="propInfo">Information of property to retrieve.</param>
            <returns>Retrieved property value.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetAllProperties(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of an object.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Get the properties of a type.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>List of information of matched properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetWritableProperties(System.Object,System.Collections.Specialized.StringDictionary)">
            <summary>
            Gets all the writable properties of an object.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="propsToExclude">Dictionary with properties to exclude.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Collections.Specialized.StringDictionary,System.Type)">
            <summary>
            Gets all the properties of a type.
            </summary>
            <param name="propsToExclude">Dictionary with properties to exclude.</param>
            <param name="typ">Type to look into.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of the object as dictionary of property names to propertyInfo.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>Dictionary with property name and information of matched properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="flags">Flags to use when looking for properties.</param>
            <param name="isCaseSensitive">True to use the property name in the
            dictionary with its lower-cased value.</param>
            <returns>Dictionary with property name and information of found properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertiesAsMap``1(System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <typeparam name="T">Type to look into.</typeparam>
            <param name="flags">Flags to use when looking for properties.</param>
            <param name="isCaseSensitive">True to use the property name in the
            dictionary with its lower-cased value.</param>
            <returns>Dictionary with property name and information of found properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperty(System.Type,System.String)">
            <summary>
            Get the propertyInfo of the specified property name.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="propertyName">Name of property.</param>
            <returns>Information of property.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetWritableProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets a list of all the writable properties of the class associated with the object.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <remarks>This method does not take into account, security, generics, etc.
            It only checks whether or not the property can be written to.</remarks>
            <returns>List with information of matching properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method on the object provided.
            </summary>
            <param name="obj">The object containing the method to invoke</param>
            <param name="methodName">arguments to the method.</param>
            <param name="parameters">Parameters to pass when invoking the method.</param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.CopyPropertyValue(System.Object,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Copies the property value from the source to destination.
            </summary>
            <param name="source">Source object.</param>
            <param name="destination">Destination object.</param>
            <param name="prop">Information of property whose value
            is to be copied from the source to the target object.</param>
        </member>
        <member name="T:ComLib.LocationSupport.LocationParser">
            <summary>
            Parser for location data.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseCity(ComLib.LocationSupport.CityLookUp,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parses the city
            </summary>
            <param name="cityLookUp">The city look up component</param>
            <param name="stateLookUp">The state look up component</param>
            <param name="countryLookUp">The country look up component</param>        
            <param name="cityname">The city name.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseState(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parses the state.
            </summary>
            <param name="stateLookUp">The state look up component</param>
            <param name="countryLookUp">The country look up component</param>        
            <param name="stateFullNameOrAbbr"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseCountry(ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parse the country.
            </summary>
            <param name="countryLookUp">The country lookup component</param>
            <param name="countryText">The text representing a country</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseCityWithStateOrCountry(ComLib.LocationSupport.CityLookUp,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parse 'city','state' | 'country'.
            e.g. Georgetown, Texas or GeorgeTown, Guyana
            </summary>
            <remarks>The area after the comma can be either the state or country.
            We store a list of valid states/regions, and countries</remarks>
            <param name="cityLookUp">The city look up component</param>
            <param name="stateLookUp">The state look up component</param>
            <param name="countryLookUp">The country look up component</param>
            <param name="smallLarge"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.IsCityMatchedWithStateCountry(System.String,ComLib.LocationSupport.City,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,ComLib.LocationSupport.LocationLookUpResult@)">
            <summary>
            Given a user entered text contain a city and (state or country) combination,
            this method checks that the state or country entered by the user matches 
            the state or country of the city that was matched.
            </summary>
            <param name="stateOrCountryTrimmed">The state or country entered by the user.</param>
            <param name="city">The city that was found in our system, entered by the user.</param>
            <param name="stateLookUp">The state lookup component.</param>
            <param name="countryLookUp">The country lookup component.</param>
            <param name="lookUpResult"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.Build(ComLib.LocationSupport.LocationLookUpType,System.Boolean,System.String,ComLib.LocationSupport.Country,ComLib.LocationSupport.State,ComLib.LocationSupport.City)">
            <summary>
            Builds up the LocationLookupResult based on the location components passed in.
            City, state, country can be null.
            </summary>
            <param name="lookupType">The location lookup type</param>
            <param name="isValid">Whether or not the location was valid.</param>
            <param name="message">Error message if not valid.</param>
            <param name="country">Optional - The country to be used for setting the id and name of the country.</param>
            <param name="state">Optional - The state to be used for setting the id and name of the state.</param>
            <param name="city">Optional - The city to be used for setting the id and name of the city</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Subs.SubstitutionUtils">
            <summary>
            Utility methods for the subs.
            </summary>
        </member>
        <member name="M:ComLib.Subs.SubstitutionUtils.Parse(System.String,ComLib.Subs.SubstitutionService)">
            <summary>
            parse the substitution.
            </summary>
            <param name="funcCall">Substitution function.</param>
            <param name="subContainer">Substitution service.</param>
            <returns>Result of substitution.</returns>
        </member>
        <member name="M:ComLib.Subs.SubstitutionUtils.Eval(ComLib.Subs.Substitution,ComLib.Subs.SubstitutionService)">
            <summary>
            Evaluate the funcall.
            </summary>
            <param name="sub">Instance of substitution.</param>
            <param name="subContainer">Substitution service.</param>
            <returns>Result of substitution.</returns>
        </member>
        <member name="T:ComLib.Notifications.NotificationDef">
            <summary>
            Define the location of notification content.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.Name">
            <summary>
            Identifies a message template.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.Location">
            <summary>
            Location of the template definition.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.FileName">
            <summary>
            Just the file name from the full location.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.IsAssemblyEmbedded">
            <summary>
            Flag indicates whether or not the template definition
            is embedded in an assembly.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.AssemblyName">
            <summary>
            Name of the assembly if embedded.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.IsXsl">
            <summary>
            Whether or not this is xsl based.
            TO_DO: NOT_USED currently.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationDef.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Notifcation content.
            </summary>
            <param name="name">Name of notification.</param>
            <param name="fulllocation">Location of template.</param>
            <param name="fileName">Full name of notification.</param>
            <param name="isAssemblyEmbedded">True if the template is 
            embedded in an assembly.</param>
            <param name="assemblyName">Name of assembly.</param>
            <param name="isXsl">True if the notification is xsl based.</param>
        </member>
        <member name="T:ComLib.Notifications.NotificationDefinitions">
            <summary>
            Xsl file paths for various emails.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDefinitions._defs">
            <summary>
            Storage of the notification templates.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationDefinitions.#ctor">
            <summary>
            Default the message templates to the internal ones provided by commonlibrary.net.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationDefinitions.Remove(System.String)">
            <summary>
            Remove entry associated with the key.
            </summary>
            <param name="key">Key of entry to remove.</param>
        </member>
        <member name="P:ComLib.Notifications.NotificationDefinitions.Keys">
            <summary>
            Get all the keys.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationDefinitions.Item(System.String)">
            <summary>
            Get / set the value.
            </summary>
            <param name="key">Key of entry to get/set.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.MapperSupport.IMapper`1">
            <summary>
            Mapper for sourcing data from Ini files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.Map(ComLib.IErrors)">
            <summary>
            Map objects used internal state.
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.Map(System.Object,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.MapFromFile(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="filepath"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.MapFromText(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="content"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.MapperSupport.IMapper`1.SupportedFormat">
            <summary>
            Get the supported formate of the data source.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogEventEntity">
            <summary>
            Making the LogEventEntity implement IEntity.
            
            Reasons:
            1. Takes advantage of outof the box DomainModel functionality.
            2. Can now use RepositoryLinq2Sql as the repository for CRUD actions.
            
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogEventEntity.New">
            <summary>
            Creates a new instance of LogEventEntity.
            </summary>
            <returns>New instance of LogEventEntity.</returns>
        </member>
        <member name="M:ComLib.Logging.LogEventEntity.Delete(ComLib.Logging.LogLevel)">
            <summary>
            Delete all entries based on the level.
            </summary>
            <param name="level">Logging level.</param>
        </member>
        <member name="M:ComLib.Logging.LogEventEntity.Delete(System.DateTime,System.Boolean)">
            <summary>
            Delete log entries before or after the specified date.
            </summary>
            <param name="date">Date to use as marker.</param>
            <param name="beforeDate">True to delete entries before,
            false to delete entries after supplied date.</param>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Application">
            <summary>
            Get/Set Application
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Computer">
            <summary>
            Get/Set Computer
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.LogLevel">
            <summary>
            Get/Set LogLevel
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Exception">
            <summary>
            Get/Set Exception
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Message">
            <summary>
            Get/Set Message
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.UserName">
            <summary>
            Get/Set UserName
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.LogLevelName">
            <summary>
            Get the name of the log level.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogEventEntityMapper">
            <summary>
            Creates a LogEventEntity from the contents of a LogEvent
            </summary>
        </member>
        <member name="T:ComLib.Logging.IMapper`2">
            <summary>
            Lightweight input/output mapping interface
            </summary>
            <typeparam name="T">The type to be mapped from</typeparam>
            <typeparam name="TK">The type to be mapped to</typeparam>
        </member>
        <member name="M:ComLib.Logging.IMapper`2.MapFrom(`0)">
            <summary>
            Map from one type to another.
            </summary>
            <param name="mapFrom">Type to map from.</param>
            <returns>Type to map to.</returns>
        </member>
        <member name="M:ComLib.Logging.LogEventEntityMapper.MapFrom(ComLib.Logging.LogEvent)">
            <summary>
            Map from the log event to the logevententity for persistance.
            </summary>
            <param name="mapFrom">Log event.</param>
            <returns>Instance of mapped LogEventEntity.</returns>
        </member>
        <member name="T:ComLib.Logging.LogRepository">
            <summary>
            Generic repository for persisting Log.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Logging.LogRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Logging.LogRepository"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Logging.LogRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Logging.LogRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db">The database helper.</param>
        </member>
        <member name="M:ComLib.Logging.LogRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize the rowmapper
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogRepository.Create(ComLib.Logging.LogEventEntity)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity">Log event entity.</param>
            <returns>Passed log event entity.</returns>
        </member>
        <member name="M:ComLib.Logging.LogRepository.Update(ComLib.Logging.LogEventEntity)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity">Log event entity.</param>
            <returns>Passed log event entity.</returns>
        </member>
        <member name="M:ComLib.Logging.LogRepository.BuildParams(ComLib.Logging.LogEventEntity)">
            <summary>
            Creates parameters for a log event entity.
            </summary>
            <param name="entity">Log event entity.</param>
            <returns>Persistence parameters for entity.</returns>
        </member>
        <member name="M:ComLib.Logging.LogRepository.BuildParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Create a single parameter.
            </summary>
            <param name="name">Name of parameter.</param>
            <param name="dbType">Type of parameter.</param>
            <param name="val">Value to use.</param>
            <returns>Instance of created DbParameter.</returns>
        </member>
        <member name="T:ComLib.Logging.LogEventEntityRowMapper">
            <summary>
            RowMapper for Log.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogEventEntityRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Creates an instance of log event entity from data.
            </summary>
            <param name="reader">Database reader.</param>
            <param name="rowNumber">Number of row with data.</param>
            <returns>Created instance of log event entity.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.LocationHelper">
            <summary>
            This class contains various helper methods
            for the LocationSupport namespace.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.IsValidStateCountryRelation(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.Int32,System.Int32)">
            <summary>
            Checks that the state belongs to the country.
            </summary>
            <param name="stateLookUp"></param>
            <param name="countryLookUp"></param>
            <param name="stateId"></param>
            <param name="countryId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyCity(ComLib.LocationSupport.Address,ComLib.LocationSupport.CityLookUp,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp)">
            <summary>
            Applies the city id to the address if the city is listed in the system
            and has a matching state and country id compared to what was supplied.
            </summary>
            <param name="address"></param>
            <param name="cityLookup"></param>
            <param name="stateLookup"></param>
            <param name="countryLookup"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyState(ComLib.LocationSupport.Address,ComLib.LocationSupport.StateLookUp,System.Collections.Generic.IList{System.String})">
            <summary>
            Applies the city id to the address if the city is listed in the system
            and has a matching state and country id compared to what was supplied.
            </summary>
            <param name="address"></param>
            <param name="stateLookup"></param>
            <param name="errors">list of errors to populate if any validation fails.</param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyCountry(ComLib.LocationSupport.Address,ComLib.LocationSupport.CountryLookUp,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Applies the city id to the address if the city is listed in the system
            and has a matching state and country id compared to what was supplied.
            </summary>
            <param name="address"></param>
            <param name="countryLookup"></param>
            <param name="errors">list of errors to populate if any validation fails.</param>
            <param name="useAliasIfApplicable"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyCountryState(ComLib.LocationSupport.City)">
            <summary>
            Configures the city by applying the country and state id based on the country/state names.
            </summary>
            <param name="city"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyCountry(ComLib.LocationSupport.State)">
            <summary>
            Configures the state by applying the country id based on the country name.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyCountry(ComLib.LocationSupport.Country)">
            <summary>
            Configures the state by applying the country id based on the country name.
            </summary>
            <param name="country"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LocationSupport.LocationEntityService`1">
            <summary>
            Location entity class that sub-classes EntityServiceT and does some additional configuration on the city/state/country before saving
            to underlying repository.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.EntityService`1">
            <summary>
            Service class used for handling entity actions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ComLib.Entities.EntityService`1._repository">
            <summary>
            The underlying repository for the entities.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityService`1._settings">
            <summary>
            Settings class for the entity
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityService`1._validator">
            <summary>
            The validator for the entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityService`1._resources">
            <summary>
            Localization strings for the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.#ctor">
            <summary>
            Initializes a new instance using defaults
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.#ctor(ComLib.Entities.IRepository{`0},ComLib.Entities.IEntityValidator,ComLib.Entities.IEntitySettings)">
            <summary>
            Initialize with Repository and validator.
            </summary>
            <param name="repository">PesistantStorage for the entity.</param>
            <param name="settings">Settings for the entity.</param>
            <param name="validator">Validator for the entity</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Init">
            <summary>
            This method is useful for derived classes to implement 
            their own initialization behaviour.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetSettings``1">
            <summary>
            Get the settings as a typed object.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetValidator">
            <summary>
            Get the validator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(`0)">
            <summary>
            Creates the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create multiple entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entities"></param>
            <param name="checkFields"></param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(ComLib.IActionContext)">
            <summary>
            Creates the entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.InternalCreate(ComLib.IActionContext,System.Action{ComLib.IActionContext})">
            <summary>
            Creates the entity.
            </summary>
            <param name="ctx"></param>
            <param name="executor">The executor to call to create the entity. 
            If empty, _repository.Create(entity) is automatically called.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Update(`0)">
            <summary>
            Creates the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates multiple entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Update(ComLib.IActionContext)">
            <summary>
            Updates the model in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.InternalUpdate(ComLib.IActionContext,System.Action{ComLib.IActionContext})">
            <summary>
            Updates the model in the repository.
            </summary>
            <param name="ctx"></param>
            <param name="executor">The action to execute</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Save(`0)">
            <summary>
            Saves the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Save(ComLib.IActionContext)">
            <summary>
            Updates the model in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Delete(`0)">
            <summary>
            Creates the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Delete(System.Int32)">
            <summary>
            Creates the entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.DeleteAll">
            <summary>
            Delete all entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Delete(ComLib.IActionContext)">
            <summary>
            Deletes the model from the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Get(System.Int32)">
            <summary>
            Creates the entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Get(ComLib.IActionContext)">
            <summary>
            Retrieves the model from the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetAll">
            <summary>
            Creates the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetAll(ComLib.IActionContext)">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetAllItems(ComLib.IActionContext)">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">The sql filter</param>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using the specified criteria.
            </summary>
            <param name="query">The query</param>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.First(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.FindByUser(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page and by the user who created them.
            </summary>
            <param name="userName">Name of user who created the entities.</param>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">The sql filter string to use.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(ComLib.Data.IQuery)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Get recent items as a different type.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.PerformAction(ComLib.IActionContext,System.Action{ComLib.IActionContext},ComLib.Entities.EntityAction)">
            <summary>
            Performs the action.
            </summary>
            <param name="ctx">The actioncontext.</param>
            <param name="action">Delegate to call to perform the action on the model.</param>
            <param name="entityAction">Name of the action.</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.PerformValidation(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Performs the validation on the model.
            </summary>
            <param name="ctx">The action context.</param>
            <param name="entityAction">The type of entity action</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.PerformAuthentication(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Performs authentication to determine if the current use is allowed to edit
            this entity.
            </summary>
            <param name="ctx"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Repository">
            <summary>
            The resposity for the model.
            </summary>
            <value></value>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Resources">
            <summary>
            Resources used for the service.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Validator">
            <summary>
            The validator for the model.
            </summary>
            <value></value>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Settings">
            <summary>
            Configuration settings for the service.
            </summary>
            <value></value>
        </member>
        <member name="M:ComLib.LocationSupport.LocationEntityService`1.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationEntityService`1.#ctor(ComLib.Entities.IRepository{`0})">
            <summary>
            Initialize
            </summary>
            <param name="repo"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationEntityService`1.InternalCreate(ComLib.IActionContext,System.Action{ComLib.IActionContext})">
            <summary>
            Create the entity.
            </summary>
            <param name="ctx"></param>
            <param name="executor"></param>
        </member>
        <member name="T:ComLib.IocContainerInMemory">
            <summary>
            Simple in Memory container to use for Unit Testing.
            </summary>
        </member>
        <member name="T:ComLib.IIoc">
            <summary>
            Service locator interface used for getting any service instance.
            </summary>
        </member>
        <member name="M:ComLib.IIoc.GetObject``1(System.String)">
            <summary>
            Get a named service  associated with the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IIoc.GetObject``1">
            <summary>
            Get object using just the type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.IIoc.Contains``1">
            <summary>
            Determine if the container contains the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.IIoc.AddObject(System.String,System.Object)">
            <summary>
            Add a named service.
            </summary>
            <param name="objectName"></param>
            <param name="obj"></param>
        </member>
        <member name="F:ComLib.IocContainerInMemory.DefaultServiceName">
            <summary>
            The instance name given to the service 
            added as a default service.
            </summary>
        </member>
        <member name="M:ComLib.IocContainerInMemory.#ctor">
            <summary>
            Make this class a singleton.
            </summary>
        </member>
        <member name="M:ComLib.IocContainerInMemory.AddObject(System.String,System.Object)">
            <summary>
            Adds a service to the service to the locator.
            Supports multiple ( instances ) of a specific type.
            This is to support different implementations of specific interface
            for example.
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:ComLib.IocContainerInMemory.GetObject``1(System.String)">
            <summary>
            Gets a specific service with name provided.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="serviceName">A specific key associated with the instance to get. e.g. Used with different instances/configurations for a specific type.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IocContainerInMemory.GetObject``1">
            <summary>
            Get object using just the type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.IocContainerInMemory.Contains``1">
            <summary>
            Determine if the container contains the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ComLib.Macros.Tag">
            <summary>
            Class to represent an html/xml like tag with attributes.
            </summary>
        </member>
        <member name="F:ComLib.Macros.Tag.Name">
            <summary>
            The name of the macro tag.
            </summary>
        </member>
        <member name="F:ComLib.Macros.Tag.Id">
            <summary>
            The id of the macro tag if present
            </summary>
        </member>
        <member name="F:ComLib.Macros.Tag.Attributes">
            <summary>
            An ordered dictionary of the all the attributes of the tag
            </summary>
        </member>
        <member name="F:ComLib.Macros.Tag.InnerContent">
            <summary>
            The inner content of the tag ( between the start/end tags )
            </summary>
        </member>
        <member name="F:ComLib.Macros.Tag.IsEmpty">
            <summary>
            Whether or not the tag is an empty tag.
            </summary>
        </member>
        <member name="F:ComLib.Macros.Tag.Length">
            <summary>
            Starting index of the tag in the entire document/text/string.
            </summary>
        </member>
        <member name="F:ComLib.Macros.Tag.Position">
            <summary>
            The total length in characters of the macro in the original document/text/string.
            </summary>
        </member>
        <member name="T:ComLib.Feeds.FeedBuilder">
            <summary>
            Helper class for build feeds.
            </summary>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildRss(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable})">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAtom(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable})">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildRss(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.IO.TextWriter)">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
            <param name="writer">The writer to write the feed to</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAtom(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.IO.TextWriter)">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
            <param name="writer">The writer to write the feed to</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.Build(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable})">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAsXml(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.Func{System.ServiceModel.Syndication.SyndicationFeed,System.ServiceModel.Syndication.SyndicationFeedFormatter})">
            <summary>
            Builds as XML.
            </summary>
            <param name="feedAuthor">The feed author.</param>
            <param name="feedTitle">The feed title.</param>
            <param name="feedDescription">The feed description.</param>
            <param name="feedUrl">The feed URL.</param>
            <param name="posts">The posts.</param>
            <param name="formatFetcher">The format fetcher.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAsXml(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.IO.TextWriter,System.Func{System.ServiceModel.Syndication.SyndicationFeed,System.ServiceModel.Syndication.SyndicationFeedFormatter})">
            <summary>
            Builds as XML.
            </summary>
            <param name="feedAuthor">The feed author.</param>
            <param name="feedTitle">The feed title.</param>
            <param name="feedDescription">The feed description.</param>
            <param name="feedUrl">The feed URL.</param>
            <param name="posts">The posts.</param>
            <param name="twriter">The writer to write the feed to.</param>
            <param name="formatFetcher">The format fetcher.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.Build(System.ServiceModel.Syndication.SyndicationFeed,System.IO.TextWriter,System.String)">
            <summary>
            Builds as XML.
            </summary>
            <param name="feed">The feed.</param>
            <param name="twriter">The writer to write the feed to.</param>
            <param name="format">The format either "rss" | "atom"</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.EntityResources">
            <summary>
            Localization resource provider for the entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityResources._resourceStrings">
            <summary>
            Value of configuration source for strings.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityResources._entityName">
            <summary>
            Entity name of localization.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityResources.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityResources.#ctor(System.String)">
            <summary>
            Initialize w/ resource file.
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:ComLib.Entities.EntityResources.#ctor(ComLib.IConfigSource)">
            <summary>
            Initialize w/ config source containing the resource strings.
            </summary>
            <param name="configSource"></param>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String)">
            <summary>
            Get the resource string associated with the key.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get the resource string associated with the key and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.EntityResources.EntityName">
            <summary>
            Get the name of the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityResources.Item(System.String)">
            <summary>
            Get / set the resource string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Cryptography.DES.DesKeyType">
            <summary>
            Used to determine the length of a DES key.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.DES.DesKeyType.SingleLength">
            <summary>
            Single-length DES key (16 hexadecimal characters, 8 bytes).
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.DES.DesKeyType.DoubleLength">
            <summary>
            Double-length DES key (32 hexadecimal characters, 16 bytes).
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.DES.DesKeyType.TripleLength">
            <summary>
            Triple-length DES key (48 hexadecimal characters, 24 bytes).
            </summary>
        </member>
        <member name="T:ComLib.Cryptography.DES.DESKey">
            <summary>
            This class is used to represent a hexadecimal single, double or 
            triple length DES key.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.DES.DESKey._keyA">
            <summary>
            First part of key.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.DES.DESKey._keyB">
            <summary>
            Second part of key.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.DES.DESKey._keyC">
            <summary>
            Third part of key.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.DES.DESKey._keyType">
            <summary>
            Key length.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.DES.DESKey.#ctor(ComLib.Cryptography.DES.DesKeyType)">
            <summary>
            Creates a new random DES key.
            </summary>
            <param name="type">The DES key type (single, double or triple length).</param>
        </member>
        <member name="M:ComLib.Cryptography.DES.DESKey.#ctor(System.String)">
            <summary>
            Creates a new DES key from hexadecimal characters.
            </summary>
            <param name="text">The hexadecimal representation of the DES key.</param>
        </member>
        <member name="M:ComLib.Cryptography.DES.DESKey.Init(System.String)">
            <summary>
            Initializes with a hexadecimal DES key.
            </summary>
            <param name="text">Hexadecimal representation of the DES key.</param>
        </member>
        <member name="M:ComLib.Cryptography.DES.DESKey.ToString">
            <summary>
            Returns the current DES key in hexadecimal form.
            </summary>
            <returns>A string representation of the DES key.</returns>
        </member>
        <member name="M:ComLib.Cryptography.DES.DESKey.GetRandomHex">
            <summary>
            Creates a random single-length hexadecimal key.
            </summary>
            <returns>A single-length hexadecimal key.</returns>
        </member>
        <member name="P:ComLib.Cryptography.DES.DESKey.FirstKeyPart">
            <summary>
            Returns the first key part.
            </summary>
        </member>
        <member name="P:ComLib.Cryptography.DES.DESKey.SecondKeyPart">
            <summary>
            Returns the second key part.
            </summary>
        </member>
        <member name="P:ComLib.Cryptography.DES.DESKey.ThirdKeyPart">
            <summary>
            Returns the third key part.
            </summary>
        </member>
        <member name="T:ComLib.Cryptography.CryptoConfig">
            <summary>
            Settings for the encryption.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoConfig.#ctor">
            <summary>
            encryption option
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoConfig.#ctor(System.Boolean,System.String)">
            <summary>
            encryption options
            </summary>
            <param name="encrypt"></param>
            <param name="key"></param>
        </member>
        <member name="P:ComLib.Cryptography.CryptoConfig.Encrypt">
            <summary>
            Whether or not to encrypt;
            Primarily used for unit testing.
            Default is to encrypt.
            </summary>
        </member>
        <member name="P:ComLib.Cryptography.CryptoConfig.InternalKey">
            <summary>
            Key used to encrypt a word.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceDecorator">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.#ctor(ComLib.IConfigSource)">
            <summary>
            Initialize w/ the actual provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Init">
            <summary>
            Initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Load">
            <summary>
            Load the configuration.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Save">
            <summary>
            Save the configuration
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Get``1(System.String)">
            <summary>
            Get value of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetDefault``1(System.String,``0)">
            <summary>
            Get value or default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Get(System.String,System.String)">
            <summary>
            Get the section/key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Get``1(System.String,System.String)">
            <summary>
            Get typed section/key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get typed section/key value or default  value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetSection(System.String)">
            <summary>
            Get section with name.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetSection(System.String,System.Int32)">
            <summary>
            Get section with specified name at index.
            </summary>
            <param name="sectionName"></param>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Contains(System.String,System.String)">
            <summary>
            Check if the section/key exists.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add the sectionname, key, value.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Add(System.String,System.String,System.Object)">
            <summary>
            Add the sectionname, key/value.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add multiple value to the same section/key
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Add(System.Object,System.Object)">
            <summary>
            Add the key/value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Clear">
            <summary>
            Clearn all the entries.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Contains(System.Object)">
            <summary>
            Indicates whether the key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Remove(System.Object)">
            <summary>
            Remove the key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the array starting at the specified index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="E:ComLib.Configuration.ConfigSourceDecorator.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.SourcePath">
            <summary>
            The configuration source path.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Name">
            <summary>
            Name of the configuration source.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Item(System.String,System.String)">
            <summary>
            Get / set section/key value.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Sections">
            <summary>
            Get the list of sections.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.IsFixedSize">
            <summary>
            Indicate if fixed size.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.IsReadOnly">
            <summary>
            Is readonly
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Keys">
            <summary>
            Get the keys.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Item(System.Object)">
            <summary>
            Get / set the value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.IsSynchronized">
            <summary>
            Whether or not this is synchronized.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.SyncRoot">
            <summary>
            Get the synroot
            </summary>
        </member>
        <member name="T:ComLib.Collections.ISet`1">
            <summary>
            Interface for a set of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.ISet`1.Union(ComLib.Collections.ISet{`0})">
            <summary>
            Unions the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.ISet`1.Intersect(ComLib.Collections.ISet{`0})">
            <summary>
            Returns set with elements common to both.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.ISet`1.ExclusiveOr(ComLib.Collections.ISet{`0})">
            <summary>
            Either or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.ISet`1.Minus(ComLib.Collections.ISet{`0})">
            <summary>
            Gets the items in the set not contained in the set supplied.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.SetHelper`1">
            <summary>
            Helper class for sets.
            </summary>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.Union(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Gets all the unique elements from both sets.
            Whats in first OR second.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.Intersect(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Finds the intersection of the elements in first and second.
            Whats in both first AND second.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.ExclusiveOr(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Exclusives the or.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.Minus(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Minuses the specified other.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilder">
            <summary>
            This class provides methods that call 
            all the builders relevant to code generation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.Process(ComLib.Models.ModelContext)">
            <summary>
            Process.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.Process(ComLib.Models.ModelContext,System.Collections.Generic.IList{ComLib.CodeGeneration.ICodeBuilder})">
            <summary>
            Process.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="builders">The builders.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.Process(ComLib.Models.ModelContext,System.Action{System.Collections.Generic.IList{ComLib.CodeGeneration.ICodeBuilder}},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Process.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="populator">The populator.</param>
            <param name="modelsToInclude">The names of the models to process. This is used a include filter.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateInstallFiles(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds the install files.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateDatabase(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds the database.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateCode(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds the code.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateAll(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds all.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.GetModelNamesToProcess(System.String[])">
            <summary>
            Get the models names as a dictionary.
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Caching.Cacher">
            <summary>
            Cache manager using AspNet which groups all the keys with a prefix.
            </summary>
        </member>
        <member name="M:ComLib.Caching.Cacher.#cctor">
            <summary>
            Initialize with spring cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.Cacher.Init(ComLib.Caching.ICache)">
            <summary>
            Initialize the cache provider.
            </summary>
            <param name="cacheProvider"></param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Contains(System.String)">
            <summary>
            Whether or not there is a cache entry for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.Object)">
            <summary>
            Get the object associated with the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.Boolean,System.TimeSpan,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="useCache">Whether or not cache should be used at all.</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.Boolean,System.Int32,System.Boolean,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="useCache">Whether or not cache should be used at all.</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="slidingExpiration">Whether or not to apply sliding expiration to cache.</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Remove(System.Object)">
            <summary>
            Remove from cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Caching.Cacher.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the items associated with the keys specified.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Clear">
            <summary>
            Clear all the items in the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.Cacher.Insert(System.Object,System.Object)">
            <summary>
            Insert an item into the cache.
            </summary>
            <param name="key">The cache key</param>
            <param name="value">The cache value</param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Insert(System.Object,System.Object,System.Int32,System.Boolean)">
            <summary>
            Insert an item into the cache with the specified sliding expiration.
            </summary>
            <param name="key">The cache key</param>
            <param name="value">The cache value</param>
            <param name="timeToLive">How long in seconds the object should be cached.</param>
            <param name="slidingExpiration">Whether or not to reset the time to live if the object is touched.</param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Insert(System.Object,System.Object,System.Int32,System.Boolean,ComLib.Caching.CacheItemPriority)">
            <summary>
            Insert an item into the cache with the specified time to live, 
            sliding expiration and priority.
            </summary>
            <param name="key">The cache key</param>
            <param name="value">The cache value</param>
            <param name="timeToLive">How long in seconds the object should be cached.</param>
            <param name="slidingExpiration">Whether or not to reset the time to live if the object is touched.</param>
            <param name="priority">Priority of the cache entry.</param>
        </member>
        <member name="M:ComLib.Caching.Cacher.GetDescriptors">
            <summary>
            Get the items in the cache and their types.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Caching.Cacher.Provider">
            <summary>
            Get the current cache provider being used.
            </summary>
        </member>
        <member name="P:ComLib.Caching.Cacher.Count">
            <summary>
            Get the number of items in the cache that are 
            associated with this instance.
            </summary>
        </member>
        <member name="P:ComLib.Caching.Cacher.Keys">
            <summary>
            Get the collection of cache keys associated with this instance of
            cache ( using the cachePrefix ).
            </summary>
        </member>
        <member name="T:ComLib.Automation.CommandAttribute">
            <summary>
            Attribute used to define a command class used in automation.
            </summary>
        </member>
        <member name="T:ComLib.ExtensionAttribute">
            <summary>
            This is a default attribute class, used to decorate implementation
            of dynamically loadable extension classes.
            </summary>
        </member>
        <member name="T:ComLib.IExtensionAttribute">
            <summary>
            Interface that must be implemented by an attribute class
            that will be used to designate an dynamically loadable extension.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.Name">
            <summary>
            Name of the widget.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.DisplayName">
            <summary>
            Name to display ( friendly name )
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.Description">
            <summary>
            Description for the widget
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.Author">
            <summary>
            Author of the widget.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.Email">
            <summary>
            Email of the author.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.Url">
            <summary>
            Url for reference / documentation.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.Version">
            <summary>
            Version of the widget.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.SortIndex">
            <summary>
            Used to sort model in list of models.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.DeclaringType">
            <summary>
            The name of the class representing the widget.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.DeclaringDataType">
            <summary>
            The name of the class representing the widget.
            </summary>
        </member>
        <member name="P:ComLib.IExtensionAttribute.DeclaringAssembly">
            <summary>
            The name of the assembly containing the widget.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Name">
            <summary>
            Name of the widget.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.DisplayName">
            <summary>
            Name to display ( friendly name )
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Description">
            <summary>
            Description for the widget
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Author">
            <summary>
            Author of the widget.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Email">
            <summary>
            Email of the author.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Url">
            <summary>
            Url for reference / documentation.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Version">
            <summary>
            Version of the widget.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.SortIndex">
            <summary>
            Used to sort model in list of models.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.DeclaringType">
            <summary>
            The name of the class representing the widget.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.DeclaringDataType">
            <summary>
            The name of the class representing the widget.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.DeclaringAssembly">
            <summary>
            The name of the assembly containing the widget.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.Roles">
            <summary>
            Roles that can access this information.
            </summary>
        </member>
        <member name="P:ComLib.ExtensionAttribute.IsReusable">
            <summary>
            Whether or not this extension is reusable.
            </summary>
        </member>
        <member name="M:ComLib.Automation.CommandAttribute.#ctor">
            <summary>
            Initialize defaults
            </summary>
        </member>
        <member name="P:ComLib.Automation.CommandAttribute.IsMultiMethodEnabled">
            <summary>
            Whether or not this command can handle multiple methods calls.
            e.g. Command named "Blog" can handle method calls such as Blog.Delete(1); Blog.Create("test"); etc.
            </summary>
        </member>
        <member name="P:ComLib.Automation.CommandAttribute.AutoHandleMethodCalls">
            <summary>
            Handle method calls automatically
            </summary>
        </member>
        <member name="P:ComLib.Automation.CommandAttribute.AutoMap">
            <summary>
            Whether or not to automap arguments from input to public instance settable properties on the command class.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Arguments">
            <summary>
            Example for the Arguments namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Arguments.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Arguments.StartupArgs">
            <summary>
            Sample object that should recieve the arguments.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Arguments.StartupArgs.Config">
            <summary>
            Configuration file 
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Arguments.StartupArgs.BusinessDate">
            <summary>
            The business date to run the program for.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Arguments.StartupArgs.ReadonlyMode">
            <summary>
            Whether or not to run in read-only mode.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Arguments.StartupArgs.CategoriesToDisplay">
            <summary>
            Number of categories to display.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Arguments.StartupArgs.DefaultSettingsId">
            <summary>
            Settings id to load.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Authentication">
            <summary>
            Example for the Authentication namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Authentication.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Authentication.GetUser(System.String)">
            <summary>
            Get user data given the username.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.Example_CodeGenerator">
            <summary>
            Example for the CodeGeneration namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_CodeGenerator.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_CodeGenerator.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_ToDo">
            <summary>
            Example for the ToDo utility class.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_ToDo.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_ImportExport">
            <summary>
            Example for the ImportExport namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_ImportExport.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_ImportExport.Person">
            <summary>
            Sample class for import testing.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_ImportExport.Meeting">
            <summary>
            Sample class for import testing.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_ImportExport.BlogPost">
            <summary>
            Sample class for import testing.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_ImportExport.MeetingValidator">
            <summary>
            Example of a custom validator.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_ImportExport.MeetingValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Do some custom validation on a user name(string).
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.Example_Extensions_Macros">
            <summary>
            Example of Macro component to interpret macros or command in text, much like wordpress shortcodes.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Extensions_Macros.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.SimpleDateMacro.Process(ComLib.Macros.Tag)">
            <summary>
            Render the widget
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.BoolMessage">
            <summary>
            Combines a boolean succes/fail flag with a error/status message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.Success">
            <summary>
            Success / failure ?
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.Message">
            <summary>
            Error message for failure, status message for success.
            </summary>
        </member>
        <member name="M:ComLib.BoolMessage.#ctor(System.Boolean,System.String)">
            <summary>
            Set the readonly fields.
            </summary>
            <param name="success">Flag for message to set.</param>
            <param name="message">Message to set for flag.</param>
        </member>
        <member name="T:ComLib.BoolMessageItem">
            <summary>
            Combines a boolean succes/fail flag with a error/status message and an object.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessageItem._item">
            <summary>
            Item associated with boolean message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessageItem.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessageItem.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="M:ComLib.BoolMessageItem.#ctor(System.Object,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:ComLib.BoolMessageItem.Item">
            <summary>
            Return readonly item.
            </summary>
        </member>
        <member name="T:ComLib.BoolMessageEx">
            <summary>
            Tuple to store boolean, string message, and Exception object.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessageEx.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessageEx.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="M:ComLib.BoolMessageEx.#ctor(System.Boolean,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:ComLib.BoolMessageEx.Ex">
            <summary>
            Return readonly item.
            </summary>
        </member>
        <member name="T:ComLib.BoolMessageItem`1">
            <summary>
            Combines a boolean succes/fail flag with a error/status message and an object.
            </summary>
            <typeparam name="T">Type of object combined with a boolean flag.</typeparam>
        </member>
        <member name="M:ComLib.BoolMessageItem`1.#ctor(`0,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:ComLib.BoolMessageItem`1.Item">
            <summary>
            Return item as correct type.
            </summary>
        </member>
        <member name="T:ComLib.BoolResult`1">
            <summary>
            Combines a boolean succes/fail flag with a error/status message, 
            an object and validation results.
            </summary>
            <typeparam name="T">Type of object combined with a boolean flag.</typeparam>
        </member>
        <member name="F:ComLib.BoolResult`1.False">
            <summary>
            Empty false result.
            </summary>
        </member>
        <member name="F:ComLib.BoolResult`1.True">
            <summary>
            Empty True result.
            </summary>
        </member>
        <member name="M:ComLib.BoolResult`1.#ctor(`0,System.Boolean,System.String,ComLib.IValidationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
            <param name="errors">List of validation errors messages.</param>
        </member>
        <member name="P:ComLib.BoolResult`1.Errors">
            <summary>
            List of errors from performing some action.
            </summary>
        </member>
        <member name="T:ComLib.BoolErrorsItem">
            <summary>
            Class to store success/fail message, error collection and some result object(T).
            </summary>
        </member>
        <member name="F:ComLib.BoolErrorsItem._errors">
            <summary>
            List of errors from performing some action.
            </summary>
        </member>
        <member name="M:ComLib.BoolErrorsItem.#ctor(System.Object,System.Boolean,System.String,ComLib.IErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
            <param name="errors">The errors</param>
        </member>
        <member name="P:ComLib.BoolErrorsItem.Errors">
            <summary>
            List of errors from performing some action.
            </summary>
        </member>
        <member name="T:ComLib.BoolErrorsItem`1">
            <summary>
            Bool result with error collection and resulting item with typed access.
            </summary>
            <typeparam name="T">Type of item to use.</typeparam>
        </member>
        <member name="M:ComLib.BoolErrorsItem`1.#ctor(`0,System.Boolean,System.String,ComLib.IValidationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
            <param name="errors">List of validation errors.</param>
        </member>
        <member name="P:ComLib.BoolErrorsItem`1.Item">
            <summary>
            Return item as correct type.
            </summary>
        </member>
        <member name="T:ComLib.BoolMessageExtensions">
            <summary>
            Extensions to the boolmessage item.
            </summary>
        </member>
        <member name="M:ComLib.BoolMessageExtensions.AsExitCode(ComLib.BoolMessage)">
            <summary>
            Convert the result to an exit code.
            </summary>
            <param name="result">Result to convert to an exit code.</param>
            <returns>0 for a successful exit, 1 otherwise.</returns>
        </member>
        <member name="T:ComLib.Lang.LoopStatement">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.LoopStatement.#ctor(ComLib.Lang.Expression)">
            <summary>
            Initialize
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:ComLib.Lang.LoopStatement.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="T:ComLib.Lang.ConditionExpression">
            <summary>
            Condition expression less, less than equal, more, more than equal etc.
            </summary>
        </member>
        <member name="M:ComLib.Lang.ConditionExpression.#ctor(ComLib.Lang.Expression,ComLib.Lang.Operator,ComLib.Lang.Expression)">
            <summary>
            Initialize
            </summary>
            <param name="left">Left hand expression</param>
            <param name="op">Operator</param>
            <param name="right">Right expression</param>
        </member>
        <member name="F:ComLib.Lang.ConditionExpression.Left">
            <summary>
            Left hand expression
            </summary>
        </member>
        <member name="F:ComLib.Lang.ConditionExpression.Op">
            <summary>
            Operator > >= == != less less than
            </summary>
        </member>
        <member name="F:ComLib.Lang.ConditionExpression.Right">
            <summary>
            Right hand expression
            </summary>
        </member>
        <member name="M:ComLib.Lang.ConditionExpression.Evaluate">
            <summary>
            Evaluate > >= != == less less than
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.LString">
            <summary>
            Boolean datatype.
            </summary>
        </member>
        <member name="M:ComLib.Lang.LString.ToStr">
            <summary>
            Get string value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.RegExTagParser">
            <summary>
            Parse to parse html/xml like tags in text.
            CAUTION!!! 
            This is a non-strict html light-weight implementation, instead of having a full lexical parser for html.
            By "non-strict" it does NOT take into account whether the parsed tags are nested inside an html comment or xml cdata
            <widget id="2" />
            </summary>
        </member>
        <member name="M:ComLib.Web.RegExTagParser.#ctor(System.String)">
            <summary>
            Parser for the tags.
            </summary>
            <param name="tagname">Name of tag.</param>
        </member>
        <member name="M:ComLib.Web.RegExTagParser.Parse(System.String)">
            <summary>
            Parses the text and obtains a collection of the tags to parse.
            </summary>
            <param name="text">List of parsed tags.</param>
        </member>
        <member name="T:ComLib.Web.RegExTagParser.Tag">
            <summary>
            Class to represent an html/xml like tag with attributes.
            </summary>
        </member>
        <member name="F:ComLib.Web.RegExTagParser.Tag.Name">
            <summary>
            Tag name.
            </summary>
        </member>
        <member name="F:ComLib.Web.RegExTagParser.Tag.Attributes">
            <summary>
            Tag attributes.
            </summary>
        </member>
        <member name="F:ComLib.Web.RegExTagParser.Tag.InnerContent">
            <summary>
            Tag inner content.
            </summary>
        </member>
        <member name="F:ComLib.Web.RegExTagParser.Tag.Length">
            <summary>
            Length of the tag.
            </summary>
        </member>
        <member name="F:ComLib.Web.RegExTagParser.Tag.Position">
            <summary>
            Starting index of the tag in the entire doc.
            </summary>
        </member>
        <member name="T:ComLib.Web.ScriptsSupport.ScriptService">
            <summary>
            Information Service
            </summary>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptService.AddLocation(System.String,System.Boolean)">
            <summary>
            Add a new scripts holder for the specified location.
            </summary>
            <param name="location">Location.</param>
            <param name="useHttp">Use HTTP.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptService.For(System.String)">
            <summary>
            Get the scriptsholder for the specified location.
            </summary>
            <param name="location">Location.</param>
            <returns>Instance of scripts holder.</returns>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptService.AddJavascript(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a javascript to the specified location.
            </summary>
            <param name="name">Script name.</param>
            <param name="url">Script URL.</param>
            <param name="location">Location.</param>
            <param name="dependsOn">Script dependency.</param>
            <param name="version">Script version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptService.AddCss(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a css to the specified location.
            </summary>
            <param name="name">CSS name.</param>
            <param name="url">CSS URL.</param>
            <param name="location">Location.</param>
            <param name="dependsOn">CSS dependency.</param>
            <param name="version">CSS version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptService.ToHtml(System.String)">
            <summary>
            Gets the current scripts as html tags.
            </summary>
            <param name="location">Location.</param>
            <returns>Scripts as html tags.</returns>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.HandlerHelper">
            <summary>
            This class contains helper handler methods.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerHelper.SetHeaders(System.Web.HttpContext,System.String,System.Collections.IDictionary,System.String,System.Int32)">
            <summary>
            Set the headers using the configuration data.
            </summary>
            <param name="context">Http context.</param>
            <param name="extensionForContent">String content extension.</param>
            <param name="config">Config settings.</param>
            <param name="configSectionName">Name of configuration section.</param>
            <param name="hashcode">Hash code.</param>
        </member>
        <member name="T:ComLib.ValidationSupport.ValidationUtils">
            <summary>
            This class provides validation utility methods.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Boolean,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Check the parameter isError for validation condition.
            If it is not valid, adds the errmessage to the list of errors.
            </summary>
            <param name="isError">True if is a validation condition..</param>
            <param name="errors">List with errors.</param>
            <param name="message">Error message.</param>
            <returns>True if isError is false.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Boolean,ComLib.IErrors,System.String,System.String)">
            <summary>
            Validates the bool condition and adds the string error
            to the error list if the condition is invalid.
            </summary>
            <param name="isError">Flag indicating if invalid.</param>
            <param name="errors">Error message collection</param>
            <param name="key">Key associated with the message.</param>
            <param name="message">The error message to add if isError is true.</param>
            <returns>True if isError is false, indicating no error.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Validates the bool condition and adds the string error
            to the error list if the condition is invalid.
            </summary>
            <param name="isError">Flag indicating if invalid.</param>
            <param name="errors">Error message collection</param>
            <param name="message">The error message to add if isError is true.</param>
            <returns>True if isError is false, indicating no error.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.TransferMessages(System.Collections.Generic.IList{System.String},ComLib.IErrors)">
            <summary>
            Transfers all the messages from the source to the validation results.
            </summary>
            <param name="messages">List of messages.</param>
            <param name="errors">Storage for errors.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Collections.Generic.IList{ComLib.IValidator},ComLib.IValidationResults)">
            <summary>
            Valdiates all the validation rules in the list.
            </summary>
            <param name="validators">List of validations to validate</param>
            <param name="destinationResults">List of validation results to populate.
            This list is populated with the errors from the validation rules.</param>
            <returns>True if all rules passed, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(ComLib.IValidator)">
            <summary>
            Validates the rule and returns a boolMessage.
            </summary>
            <param name="validator">Validator to use.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.ValidateAndCollect(ComLib.IValidator,ComLib.IValidationResults)">
            <summary>
            Validates the rule and returns a boolMessage.
            </summary>
            <param name="validator">Validator to use.</param>
            <param name="results">Validation results.</param>
            <returns>True if validation is successful.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.Country">
            <summary>
            Summary description for CountryDetails
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Country.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.Country"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Country.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.Country"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:ComLib.LocationSupport.Country.CountryCode">
            <summary>
            Same as abbreviation. This is more descriptive.
            </summary>
        </member>
        <member name="T:ComLib.EmailSupport.IEmailService">
            <summary>
            Email service.
            Simplly sends an email.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(ComLib.EmailSupport.EmailMessage)">
            <summary>
            Emails the message using default values from Settings.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(ComLib.EmailSupport.EmailMessage,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            Emails the message using the connection strings supplied.
            </summary>
            <param name="message"></param>
            <param name="useCredentials"></param>
            <param name="credentialsUser"></param>
            <param name="credentialsPassword"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Sends an email using the data from the message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(ComLib.EmailSupport.NotificationMessage,System.String,System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Send the mailmessage.
            </summary>
            <param name="message">The mail message</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>        
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="from">Who the email is from.</param>
            <param name="to">Who the email is being sent to.</param>
            <param name="subject">Subject of email.</param>
            <param name="body">Email body.</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>        
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            Mail the message using the native MailMessage class and the credentials from the current configuration.
            </summary>
            <param name="mailMessage">The mail message</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailService.Settings">
            <summary>
            Configuration information needed for sending emails.
            </summary>
        </member>
        <member name="T:ComLib.EmailSupport.IEmailSettings">
            <summary>
            Interface for email settings.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailSettings.SmptServer">
            <summary>
            Gets or sets the SMPT server.
            </summary>
            <value>The SMPT server.</value>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailSettings.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailSettings.UsePort">
            <summary>
            Gets or sets a value indicating whether [use port].
            </summary>
            <value><c>true</c> if [use port]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailSettings.AuthenticationUserName">
            <summary>
            Gets or sets the name of the authentication user.
            </summary>
            <value>The name of the authentication user.</value>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailSettings.AuthenticationPassword">
            <summary>
            Gets or sets the authentication password.
            </summary>
            <value>The authentication password.</value>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailSettings.IsAuthenticationRequired">
            <summary>
            Gets or sets a value indicating whether this instance is authentication required.
            </summary>
            <value>
            	<c>true</c> if this instance is authentication required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:ComLib.Scheduling.Tasks.TaskService">
            <summary>
            Tasks Service
            </summary>
        </member>
        <member name="T:ComLib.ExtensionService`2">
            <summary>
            Extension Service for dynamically loading types from an assembly(s).
            </summary>
            <typeparam name="TAttrib">Type of discovery attribute associated with this instance.</typeparam>
            <typeparam name="TExtension">Type of extension associated with this instance.</typeparam>
        </member>
        <member name="F:ComLib.ExtensionService`2._defaultAssemblyForExtensions">
            <summary>
            Assembly that should be searched for extensions.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionService`2._lookup">
            <summary>
            Lookup by the name to the extensions.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionService`2._onLoadCallback">
            <summary>
            Callback method for when a single extension has been found in the dll and before it gets registered
            in the service.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionService`2._onLoadCompleteCallback">
            <summary>
            Callback method for when all the extensions have been loaded into the service.
            </summary>
        </member>
        <member name="M:ComLib.ExtensionService`2.Load(System.String)">
            <summary>
            Load all the information tasks available.
            </summary>
            <param name="assembliesDelimited">List of assemblies to look into.</param>
        </member>
        <member name="M:ComLib.ExtensionService`2.Create(System.String)">
            <summary>
            Create the instance of the extension.
            </summary>
            <param name="name">Name of the extension.</param>
            <returns>Instance of the extension.</returns>
        </member>
        <member name="M:ComLib.ExtensionService`2.Register(System.Type)">
            <summary>
            Register the attribute.
            </summary>
            <param name="type">The type representing the extension</param>
        </member>
        <member name="M:ComLib.ExtensionService`2.Register(`0)">
            <summary>
            Register the attribute.
            </summary>
            <param name="attrib">Attribute to register.</param>
        </member>
        <member name="M:ComLib.ExtensionService`2.Register(System.String,ComLib.ExtensionMetaData)">
            <summary>
            Register the id.
            </summary>
            <param name="id">Extension id.</param>
            <param name="metadata">Extension metadata.</param>
        </member>
        <member name="M:ComLib.ExtensionService`2.Register(System.Collections.Generic.IList{`0})">
            <summary>
            Register the attributes.
            </summary>
            <param name="attributes">List of attributes to register.</param>
        </member>
        <member name="M:ComLib.ExtensionService`2.Register(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Type,`0}})">
            <summary>
            Register the attributes.
            </summary>
            <param name="pairs">List of attributes to register.</param>
        </member>
        <member name="M:ComLib.ExtensionService`2.GetList(System.String,System.Func{ComLib.ExtensionAttribute,System.Boolean})">
            <summary>
            Gets a list of all the extensions and their descriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExtensionService`2.LoadAdditionalAttributes``1">
            <summary>
            Loads additional attributes.
            </summary>
            <typeparam name="TAttribAdditional"></typeparam>
        </member>
        <member name="P:ComLib.ExtensionService`2.Lookup">
            <summary>
            Lookup all the availably dynamically loaded extensions
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Tasks.TaskService.GetStatuses">
            <summary>
            Gets the statuses of all the tasks in the system.
            </summary>
            <returns>List with statuses for all tasks.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Tasks.TaskService.RunAll">
            <summary>
            Runs all the extension tasks.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationQueueInMemory">
            <summary>
            Queue to store the notification messages.
            This is the default implementation to store them in memory
            rather than in some persistant storage (e.g. database ).
            </summary>
        </member>
        <member name="T:ComLib.Queue.QueueProcessor`1">
            <summary>
            Controlls the processing of the notification tasks.
            </summary>
        </member>
        <member name="T:ComLib.Queue.IQueueProcessor`1">
            <summary>
            Queue processing interface w/ specific type.
            </summary>
            <typeparam name="T">Type of items to store in queue.</typeparam>
        </member>
        <member name="T:ComLib.Queue.IQueueProcessor">
            <summary>
            Queue processing interface.
            </summary>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor.GetStatus">
            <summary>
            Gets information about the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor`1.Dequeue">
            <summary>
            Dequeues a single item from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Queue.QueueProcessor`1"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.#ctor(System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.#ctor(System.Int32,System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="numberOfItemsToProcessPerDequeue">Number of items to process per dequeue.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Enqueue(`0)">
            <summary>
            Add a message to the queue.
            </summary>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Dequeue">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <returns>Dequeued item.</returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.GetStatus">
            <summary>
            Get the state of the queue.
            </summary>
            <returns>Status of queue.</returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Process(System.Collections.Generic.IList{`0})">
            <summary>
            Processes the specified items to process.
            </summary>
            <param name="itemsToProcess">The items to process.</param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.DequeueInternal(System.Int32)">
            <summary>
            Dequeues the internal.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.UpdateState(ComLib.Queue.QueueProcessState,System.Boolean)">
            <summary>
            Updates the state.
            </summary>
            <param name="newState">The new state.</param>
            <param name="performLock">if set to <c>true</c> [perform lock].</param>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ComLib.Notifications.NotificationQueueInMemory.#ctor(ComLib.Notifications.NotificationSettings,ComLib.EmailSupport.IEmailService,ComLib.Notifications.NotificationDefinitions)">
            <summary>
            Initialize
            </summary>
            <param name="config">Instance of notification settings.</param>
            <param name="emailService">Instance of email service.</param>
            <param name="messageDefs">Instance of notification definitions.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationQueueInMemory.Process(System.Collections.Generic.IList{ComLib.EmailSupport.NotificationMessage})">
            <summary>
            Override the process method to handle notification messages.
            </summary>
            <param name="itemsToProcess">List of notification messages to process.</param>
        </member>
        <member name="T:ComLib.Notifications.NotificationItemProcessor">
            <summary>
            Class that actually generates the messages and
            sends them out.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.#ctor(ComLib.Notifications.NotificationSettings,ComLib.EmailSupport.IEmailService,ComLib.Notifications.NotificationDefinitions)">
            <summary>
            Notification processor.
            </summary>
            <param name="config">Instance of notification settings.</param>
            <param name="emailService">Instance of email service.</param>
            <param name="messageDefs">Instance of notification definitions.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.Process(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Processes the notification message. Either just sends the data or transforms the
            data and then sends it.
            </summary>
            <param name="currentMessage">Notification message to process.</param>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.GetNextId">
            <summary>
            Simply used for generating unique filenames for testing purposes.
            </summary>
            <returns>Next id.</returns>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.OutputContent(ComLib.EmailSupport.NotificationMessage,System.String)">
            <summary>
            Write the message to file for debugging purposes.
            </summary>
            <param name="message"></param>
            <param name="htmlBody"></param>
        </member>
        <member name="T:ComLib.Notifications.Notifier">
            <summary>
            Notification services.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.Notifier.Init(ComLib.EmailSupport.IEmailService,ComLib.Notifications.NotificationSettings)">
            <summary>
            Initialize using default settings.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.Notifier.WelcomeNewUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send welcome email to new user.
            </summary>
            <param name="to">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="firstname">First name of user.</param>
            <param name="username">Username of user.</param>
            <param name="password">Password of user.</param>
        </member>
        <member name="M:ComLib.Notifications.Notifier.SendToFriend(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the website url to a friend.
            </summary>
            <param name="toEmail">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="friendName">Friend's name.</param>
            <param name="fromName">From name.</param>
            <param name="messageFromFriend">Message text.</param>
        </member>
        <member name="M:ComLib.Notifications.Notifier.SendToFriendPost(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send an email to a friend with a link to a post on the page.
            </summary>
            <param name="toEmail">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="toFirstname">Name of recipient.</param>
            <param name="fromName">Name of sender.</param>
            <param name="messageToFriend">Message text.</param>
            <param name="postTitle">Title of post.</param>
            <param name="postUrl">Title of url.</param>
        </member>
        <member name="M:ComLib.Notifications.Notifier.RemindUserPassword(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send remind account/password email to user.
            </summary>
            <param name="to">E-mail to.</param>
            <param name="subject">E-mail subject.</param>
            <param name="firstname">First name of user.</param>
            <param name="username">Username of user.</param>
            <param name="password">Password of user.</param>
        </member>
        <member name="M:ComLib.Notifications.Notifier.Process">
            <summary>
            Process the queue of notifications.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.Settings">
            <summary>
            Get/Set the settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.Queue">
            <summary>
            The notification message queue.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.MessageDefs">
            <summary>
            Message definitions.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.AccountService">
            <summary>
            The account services.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.MessageService">
            <summary>
            Messaging service for send feedback, post, links to site.
            </summary>
        </member>
        <member name="T:ComLib.Paging.IPagerBuilderWeb">
            <summary>
            Pager url mode builder interface.
            </summary>
        </member>
        <member name="M:ComLib.Paging.IPagerBuilderWeb.Build(System.Int32,System.Int32,System.Func{System.Int32,System.String})">
            <summary>
            Builds the entire html for the specified page index.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="totalPages">The total pages.</param>
            <param name="urlBuilder">The lamda to build the url for a specific page</param>
            <returns>Created html.</returns>
        </member>
        <member name="M:ComLib.Paging.IPagerBuilderWeb.Build(System.Int32,System.Int32,ComLib.Paging.PagerSettings,System.Func{System.Int32,System.String})">
            <summary>
            Builds the entire html for the specified page index.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="totalPages">The total pages.</param>
            <param name="settings">The settings for the pager</param>
            <param name="urlBuilder">The lamda to build the url for a specific page</param>
            <returns>Created html.</returns>
        </member>
        <member name="M:ComLib.Paging.IPagerBuilderWeb.Build(ComLib.Paging.Pager,ComLib.Paging.PagerSettings,System.Func{System.Int32,System.String})">
            <summary>
            Build the entire html for the pager.
            </summary>
            <param name="pager">Instance of pager.</param>
            <param name="settings">Pager settings.</param>
            <param name="urlBuilder">The lamda to build the url for a specific page</param>
            <returns>Created html.</returns>
        </member>
        <member name="T:ComLib.Paging.PagerBuilderWeb">
            <summary>
            Buider class that builds the pager in Url mode.
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerBuilderWeb.Build(System.Int32,System.Int32,System.Func{System.Int32,System.String})">
            <summary>
            Builds the entire html for the specified page index / total pages.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="totalPages">The total pages.</param>
            <param name="urlBuilder">The URL builder.</param>
            <returns>Created html.</returns>
        </member>
        <member name="M:ComLib.Paging.PagerBuilderWeb.Build(System.Int32,System.Int32,ComLib.Paging.PagerSettings,System.Func{System.Int32,System.String})">
            <summary>
            Builds the entire html for the specified page index / total pages.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="totalPages">The total pages.</param>
            <param name="settings">The settings for the pager.</param>
            <param name="urlBuilder">The URL builder.</param>
            <returns>Created html.</returns>
        </member>
        <member name="M:ComLib.Paging.PagerBuilderWeb.Build(ComLib.Paging.Pager,ComLib.Paging.PagerSettings,System.Func{System.Int32,System.String})">
            <summary>
            Build the entire html for the pager.
            </summary>
            <param name="pager">Instance of pager.</param>
            <param name="settings">Pager settings.</param>
            <param name="urlBuilder">The lamda to build the url for a specific page</param>
            <returns>Created html.</returns>
        </member>
        <member name="P:ComLib.Paging.PagerBuilderWeb.Instance">
            <summary>
            Get singleton instance.
            </summary>
            <returns>Returns the single instance of this class.</returns>
        </member>
        <member name="T:ComLib.Paging.IPagerCalculator">
            <summary>
            Interface for any calculator to process the page action.
            </summary>
        </member>
        <member name="M:ComLib.Paging.IPagerCalculator.Calculate(ComLib.Paging.Pager,ComLib.Paging.PagerSettings)">
            <summary>
            Calculate pages
            </summary>
            <param name="pager">Instance of pager.</param>
            <param name="settings">Pager settings.</param>
        </member>
        <member name="T:ComLib.Paging.PagerCalculator">
            <summary>
            Default implementation of a pager.
            This uses a calculation scheme where the rules are the following :
            
            1. All possible links include ( first, previous, page1, page2, pageX, next, last )
            2. The number of pages in the middle ( page1, page2 ) can be configured.
            3. If current page = 1 ( links first and previous are not applicable )
            4. If current page = last ( links last and next are not applicable )
            5. The number of pages in the middle is cycled.
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerCalculator.Calculate(ComLib.Paging.Pager,ComLib.Paging.PagerSettings)">
            <summary>
            Calculate the pager properties such as starting, ending, next, previous pages.
            </summary>
            <param name="pagerData">Pager data.</param>
            <param name="pagerSettings">Pager settings.</param>
        </member>
        <member name="M:ComLib.Paging.PagerCalculator.GetTotalRanges(System.Int32,System.Int32)">
            <summary>
            Get the total number of ranges.
            </summary>
            <param name="totalPages"></param>
            <param name="numberPagesToDisplay"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Paging.PagerCalculator.GetRange(System.Int32,System.Int32)">
            <summary>
            Get the total ranges.
            e.g.
            Total pages = 18
            
            1  - 5  = Range 1
            6  - 10 = Range 2
            11 - 15 = Range 3
            14 - 18 = Range 4
            </summary>
            <param name="currentPage">Current/Selected page.</param>
            <param name="numberPagesToDisplay">Number of pages to display in the middle.
            This does not include the first page link and last page link.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Models.PropInfo">
            <summary>
            This class is used to hold information about a property.
            </summary>
        </member>
        <member name="M:ComLib.Models.PropInfo.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="M:ComLib.Models.PropInfo.#ctor(System.String,System.Type)">
            <summary>
            Initialize using name of property and it's datatype.
            </summary>
            <param name="name">Property name.</param>
            <param name="dataType">Property data type.</param>
        </member>
        <member name="P:ComLib.Models.PropInfo.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.DataType">
            <summary>
            DataType of the property.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.DefaultValue">
            <summary>
            Default value for this property.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.RegEx">
            <summary>
            Regular expression to use for validations.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsKey">
            <summary>
            Is Primary key.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsRequired">
            <summary>
            If this is a required / not-null property.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsGetterOnly">
            <summary>
            Indicate if this property is only a getter, no setter.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CheckMinLength">
            <summary>
            Indicate if min length should be checked.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CheckMaxLength">
            <summary>
            Indicate if max length should be checked.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.MinLength">
            <summary>
            Maximum length for this property if string.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.MaxLength">
            <summary>
            Maximum length for this property if string.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsUnique">
            <summary>
            Is unique.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.ColumnName">
            <summary>
            Name if empty.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CreateCode">
            <summary>
            Whether or not to create this property in code.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CreateColumn">
            <summary>
            Whether or not to create this property in code.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsRegExConst">
            <summary>
            Indicates if the regular expression supplied is a constant.
            </summary>
        </member>
        <member name="T:ComLib.Models.Relation">
            <summary>
            Relationship to model.
            </summary>
        </member>
        <member name="M:ComLib.Models.Relation.#ctor(System.String)">
            <summary>
            Initialize with the model name.
            </summary>
            <param name="modelName">Name of model.</param>
        </member>
        <member name="P:ComLib.Models.Relation.ModelName">
            <summary>
            Get/set the model name.
            </summary>
        </member>
        <member name="P:ComLib.Models.Relation.ForeignKey">
            <summary>
            Get/set the foreign key.
            </summary>
        </member>
        <member name="P:ComLib.Models.Relation.Key">
            <summary>
            Get/set the key.
            </summary>
        </member>
        <member name="T:ComLib.Models.UISpec">
            <summary>
            This class is used to store information about the
            UI to be generated.
            </summary>
        </member>
        <member name="M:ComLib.Models.UISpec.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Default class constructor.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="createEditUI">Edit UI creation flag.</param>
            <param name="summaryUI">Summary UI creation flag.</param>
            <param name="detailsUI">Details UI creation flag.</param>
        </member>
        <member name="P:ComLib.Models.UISpec.CreateEditUI">
            <summary>
            Get/set whether to create edit user interface.
            </summary>
        </member>
        <member name="P:ComLib.Models.UISpec.SummaryUI">
            <summary>
            Get/set whether to create summary user interface.
            </summary>
        </member>
        <member name="P:ComLib.Models.UISpec.DetailsUI">
            <summary>
            Get/set whether to create details user interface.
            </summary>
        </member>
        <member name="P:ComLib.Models.UISpec.PropertyName">
            <summary>
            Get/set the property name.
            </summary>
        </member>
        <member name="T:ComLib.MapperSupport.Mapper">
            <summary>
            Maps objects from one datasource to the object(s) represented by generic Type. 
            Used primarily for :
            1. Converting files, in formats such as xml, csv, ini, containing serialized data representing object to the actual objects.
            2. Converting a dictionary of key/value pairs to objects with the key/values in the dictionary mapping to property/values in the object.
            </summary>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.Map``1(System.Collections.IDictionary)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.Map``1(System.Collections.IDictionary,ComLib.IErrors)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapConfigFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path to the file.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapFile``1(System.String,System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path to the file.</param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapIniFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapIniAs``1(System.String,System.Boolean,System.String,System.Func{System.String,``0})">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content">The content.</param>
            <param name="isPath">if set to <c>true</c> [is path].</param>
            <param name="dataTypeKeyName">Name of the data type key.</param>
            <param name="factoryMethod">The factory method.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapCsv``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapCsv``1(ComLib.CsvParse.CsvDoc)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapCsv``1(ComLib.CsvParse.CsvDoc,ComLib.IErrors)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapCsvFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapXmlFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapXml``1(System.String,ComLib.IErrors)">
            <summary>
            Maps the xml string to a list of items of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="contents"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapJsonFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapYamlFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapToCsv``1(System.Collections.Generic.IList{``0},System.String,ComLib.IErrors)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="path"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapToCsv``1(System.Collections.Generic.IList{``0},System.String,ComLib.IErrors,System.Collections.Generic.List{System.String})">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="path"></param>
            <param name="errors"></param>
            <param name="excludeProps"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Logging.LogEvent">
            <summary>
            A record in the log.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Level">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Message">
            <summary>
            Message that is logged.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.FinalMessage">
            <summary>
            This is the final message that is printed.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Error">
            <summary>
            Exception passed.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Args">
            <summary>
            Additional arguments passed by caller.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Computer">
            <summary>
            Name of the computer.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.CreateTime">
            <summary>
            Create time.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.ThreadName">
            <summary>
            The name of the currently executing thread that created this log entry.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.UserName">
            <summary>
            Name of the user.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Ex">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.LogType">
            <summary>
            The data type of the caller that is logging the event.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogEvent.#ctor">
            <summary>
            Enable default constructor.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogEvent.#ctor(ComLib.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Initalize log event using loglevel, message and exception
            </summary>
            <param name="level">Event log level.</param>
            <param name="message">Log message.</param>
            <param name="ex">Exception to log.</param>
        </member>
        <member name="T:ComLib.Logging.LogLevel">
            <summary>
            Level for the logging.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Message">
            <summary>
            Used to always log a message regardless of loglevel
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Debug">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Info">
            <summary>
            Info level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Warn">
            <summary>
            Warn level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Fatal">
            <summary>
            Fatal level
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogSettings">
            <summary>
            Settings for a logger.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogSettings.Level">
            <summary>
            Current log level.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogSettings.AppName">
            <summary>
            Application associated w/ logger.
            </summary>
        </member>
        <member name="T:ComLib.Macros.TokenType">
            <summary>
            Enums used for keeping state of parsing when parsing text containing macros.
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.None">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.StartTag">
            <summary>
            The start tag of the macro
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.EndTag">
            <summary>
            The end tag of the macro
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.Attr">
            <summary>
            An attribute of the macro
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.AttrKey">
            <summary>
            An attribute name
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.AttrVal">
            <summary>
            An attribute value
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.InnerHtml">
            <summary>
            The inner html inside a macro start and end tag.
            </summary>
        </member>
        <member name="F:ComLib.Macros.TokenType.Comment">
            <summary>
            A comment
            </summary>
        </member>
        <member name="T:ComLib.Macros.MacroDoc">
            <summary>
            Class to represent a Macro Document after having been parsed for macros.
            </summary>
        </member>
        <member name="F:ComLib.Macros.MacroDoc.RawContent">
            <summary>
            The raw content of the document before parsing for macros.
            </summary>
        </member>
        <member name="F:ComLib.Macros.MacroDoc.Content">
            <summary>
            The content of the document after marcros have been removed
            </summary>
        </member>
        <member name="F:ComLib.Macros.MacroDoc.Tags">
            <summary>
            The list of macro tags in the document. Each tag has a reference to it starting position.
            </summary>
        </member>
        <member name="T:ComLib.Macros.MacroDocParser">
            <summary>
            Parses a string / text for macros.
            </summary>
        </member>
        <member name="F:ComLib.Macros.MacroDocParser._openBracket">
            <summary>
            The character representing the opening bracket for a macro.
            </summary>
        </member>
        <member name="F:ComLib.Macros.MacroDocParser._closeBracket">
            <summary>
            The character representing the closing bracket for a macro.
            </summary>
        </member>
        <member name="F:ComLib.Macros.MacroDocParser._innerContent">
            <summary>
            Buffer to store the content of the text without macros.
            </summary>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.#ctor">
            <summary>
            Initialize using defaults.
            </summary>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="tagPrefix">$</param>
            <param name="openBracket">[</param>
            <param name="closeBracket">]</param>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.Parse(System.String)">
            <summary>
            Parses the content.
            </summary>
            <param name="content">Content to parse.</param>
            <returns>Parsed content.</returns>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.Parse(ComLib.Scanner,System.Boolean)">
            <summary>
            Parse using the supplied token reader.
            </summary>
            <param name="reader">Instance of token reader.</param>
            <param name="parseTagsOnly">True to parse tags only.</param>
            <returns>Parsed content.</returns>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.ParseTagStart(System.Boolean)">
            <summary>
            Parses the start tag.
            </summary>
            <param name="advance">True to advance a character
            before parsing.</param>
            <returns>Parsed tag.</returns>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.ParseTagEnd(System.Boolean)">
            <summary>
            Parses the end tag.
            </summary>
            <param name="advance">True to advance a character
            before parsing.</param>
            <returns>Parsed tag.</returns>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.ParseAttribute">
            <summary>
            Parses an attribute key/value pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Macros.MacroDocParser.ParseInnerHtml(System.Boolean)">
            <summary>
            Parses the innerhtml.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Information.InfoAttribute">
            <summary>
            Attribute used to define a widget.
            </summary>
        </member>
        <member name="T:ComLib.Feeds.IPublishable">
            <summary>
            Interface for items that can generated into syndication feeds(rss, atom).
            </summary>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Title">
            <summary>
            Gets the title of the object
            </summary>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.CreateDate">
            <summary>
            Gets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.UpdateDate">
            <summary>
            Gets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.GuidId">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.UrlRelative">
            <summary>
            Gets the relative link.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.UrlAbsolute">
            <summary>
            Gets the absolute link.
            </summary>
            <value>The absolute link.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Author">
            <summary>
            Gets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.IsPublished">
            <summary>
            Whether or not this is published.
            </summary>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.IsPublic">
            <summary>
            Whether or not this is publically available.
            </summary>
        </member>
        <member name="T:ComLib.Environments.EnvItem">
            <summary>
            Represents a single environment.
            </summary>
            <remarks>
            networkloc: "z:/env"
            localloc:   "c:/env"
            conn_dev2: "server:localhost, user=kishore, pass=kishore"
            
            env: name=Dev,   Type=Dev,  Inherits="",           DeepInherit=Yes  RefPath="${localloc}/dev.config",    
            env: name=Dev2,  Type=Dev,  Inherits="",           DeepInherit=Yes  RefPath="${localloc}/dev2.config",   
            env: name=Qa,    Type=Qa,   Inherits="Dev",        DeepInherit=Yes  RefPath="${localloc}/qa.config",     
            env: name=Uat,   Type=Uat,  Inherits="Qa",         DeepInherit=Yes  RefPath="${localloc}/uat.config",    
            env: name=Prod,  Type=Prod, Inherits="Uat",        DeepInherit=Yes  RefPath="${localloc}/prod.config",   
            env: name=Lon,   Type=Prod, Inherits="Prod",       DeepInherit=Yes  RefPath="${localloc}/london.config", 
            env: name=kish,  Type=Dev,  Inherits="Dev2,Prod",  DeepInherit=No,  RefPath="${conn_dev2}", 
            </remarks>
        </member>
        <member name="F:ComLib.Environments.EnvItem.Name">
            <summary>
            Dev or Qa, Name that uniquely identifies the environment.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvItem.EnvType">
            <summary>
            Type environment type for this environment.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvItem.Inherits">
            <summary>
            Environmental Inheritance path.
            e.g. Uat. 
            if this environment name is Prod.
            and this inherit path is "Uat;CommonDev;"
            then this will load Uat backed by CommonDev settings.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvItem.InheritsDeeply">
            <summary>
            e.g. Related to InheritPath.
            If Inherits from Env "UAT", this setting of true
            will also load all the dependent inherited files of UAT.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvItem.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvItem.#ctor(System.String,System.Boolean,ComLib.Environments.EnvType,System.String)">
            <summary>
            Initialize with the supplied values.
            </summary>
            <param name="name">"prod"</param>
            <param name="deepInherit"></param>
            <param name="envType">"Prod | Qa | Uat | Dev"</param>
            <param name="inherits"></param>
        </member>
        <member name="P:ComLib.Environments.EnvItem.IsSelectable">
            <summary>
            Whether or not this is a selectable "Concrete" environment that 
            a user can choose from. Similar to abstract/concrete classes.
            I.e. Prod_NY might be a selectable environment, but
            Prod_Shared might not be as it may be a common envrionment
            that concrete environments like "prod_ny", "prod_london" inherit from.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvItem.RefPath">
            <summary>
            Tag associated with environment.
            This can be used to store a reference to config files.
            e.g. prod.config.
            </summary>
        </member>
        <member name="T:ComLib.Data.DbSettings">
            <summary>
            This class contains database settings.
            </summary>
        </member>
        <member name="F:ComLib.Data.DbSettings.EnableTransactions">
            <summary>
            Enable transactions flag.
            </summary>
        </member>
        <member name="F:ComLib.Data.DbSettings.ParamPrefix">
            <summary>
            String to use when prefixing parameters.
            </summary>
        </member>
        <member name="T:ComLib.Data.DbBuilder">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="M:ComLib.Data.DbBuilder.BuildCommand(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Builds a command object with a multiple parameters.
            </summary>
            <param name="dbHelper"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DbBuilder.BuildCommand(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.String,System.Data.DbType,System.Object)">
            <summary>
            Builds a command object with a single parameter.
            </summary>
            <param name="dbHelper"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="paramName"></param>
            <param name="paramType"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.Database">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="T:ComLib.Data.IDatabase">
            <summary>
            Backward compatibility.
            </summary>
        </member>
        <member name="T:ComLib.Data.IDBHelper">
            <summary>
            Interface for a DatabaseHelper
            </summary>
        </member>
        <member name="M:ComLib.Data.IDBHelper.Execute``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Boolean,System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            Core method which all the 
            1. ExecuteScalar
            2. ExecuteNonQuery
            3. ExecuteReader
            4. ExecuteDataTable methods call.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="dbParameters"></param>
            <param name="useTransaction"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute non-query sql.
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteNonQueryText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute non-query sql.
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteNonQueryProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute non-query sql.
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteReader(System.String,System.Data.CommandType,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datareader.
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="action"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteReaderText(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datareader.
            </summary>
            <param name="commandText"></param>
            <param name="action"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteReaderProc(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datareader.
            </summary>
            <param name="commandText"></param>
            <param name="action"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return single scalar value.
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteScalarText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return single scalar value.
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteScalarProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return single scalar value.
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return dataset.
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataSetText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return dataset.
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataSetProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return dataset.
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datatable
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataTableText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datatable
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataTableProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datatable
            </summary>
            <param name="commandText"></param>
            <param name="dbParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.BuildInParam(System.String,System.Data.DbType,System.Object)">
            <summary>
            Build an input parameter.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.AddInParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.String,System.Data.DbType,System.Object)">
            <summary>
            Builds the input parameter and adds it to the list of parameters.
            </summary>
            <param name="parameters">list of parameters to add to after building.</param>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Data.IDBHelper.BuildOutParam(System.String,System.Data.DbType)">
            <summary>
            Build an input parameter.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.GetFactory">
            <summary>
            Get the database provider factory that creates con, cmd, params etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.GetConnection">
            <summary>
            Get a connection to the appropriate database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.GetCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
            Create a new dbcommand using the connection.
            </summary>
            <param name="con"></param>
            <param name="commmandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Data.IDBHelper.Connection">
            <summary>
            The underlying connection to the datastore.
            </summary>
        </member>
        <member name="F:ComLib.Data.Database._connection">
            <summary>
            Stores connection info.
            </summary>
        </member>
        <member name="F:ComLib.Data.Database._factory">
            <summary>
            Database provider factory.
            </summary>
        </member>
        <member name="F:ComLib.Data.Database._createFactory">
            <summary>
            Factory creation flag.
            </summary>
        </member>
        <member name="F:ComLib.Data.Database._settings">
            <summary>
            Database settings.
            </summary>
        </member>
        <member name="M:ComLib.Data.Database.#ctor">
            <summary>
            Default construction
            </summary>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(System.String)">
            <summary>
            Construct using only the connection string.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(System.String,System.String)">
            <summary>
            Initialize w/ connection string and provider.
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connectionString"></param>
            <param name="factory"></param>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.DbSettings,System.Data.Common.DbProviderFactory)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connection"></param>
            <param name="settings"></param>
            <param name="factory"></param>
        </member>
        <member name="M:ComLib.Data.Database.Init(ComLib.Data.ConnectionInfo,ComLib.Data.DbSettings,System.Data.Common.DbProviderFactory)">
            <summary>
            Initialize this dbhelper.
            </summary>
            <param name="connection">The connection information.</param>
            <param name="settings">Optional settings for this instance of DbHelper.</param>
            <param name="factory">Optional instance of the provider factory.
            e.g. If using oracle, supply this as OracleClientFactory.Instance</param>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteReaderText(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute the datareader.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="action"></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            IDataReader = db.ExecuteReader("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteReaderProc(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute the datareader.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="action">The lamda to call with the reader as a parameter.</param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            IDataReader = db.ExecuteReader("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteReader(System.String,System.Data.CommandType,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute the datareader.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="action"></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            IDataReader = db.ExecuteReader("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteNonQueryText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a non-query using sql text
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.ExecuteNonQuery("update users set isactive =1", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteNonQueryProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a non-query using command
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.ExecuteNonQuery("update users set isactive =1", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes a non-query using command
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.ExecuteNonQuery("update users set isactive =1", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteScalarText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a scalar query using sql text.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            object obj = db.ExecuteScalar("select count(*) from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteScalarProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a scalar query using a stored procedure.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            object obj = db.ExecuteScalar("select count(*) from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes a scalar query.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            object obj = db.ExecuteScalar("select count(*) from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataTableText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            executes
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataTable tbl = db.ExecuteDataTable("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataTableProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            executes
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataTable tbl = db.ExecuteDataTable("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            executes
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataTable tbl = db.ExecuteDataTable("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataSetText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored proc command and returns a dataset.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataSet set = db.ExecuteDataSet("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataSetProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored proc command and returns a dataset.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataSet set = db.ExecuteDataSet("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored proc command and returns a dataset.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataSet set = db.ExecuteDataSet("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetFactory">
            <summary>
            Get database provider factory so caller can create dbparams, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetConnection">
            <summary>
            Create a connection to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
            Create a dbCommand given the DbConnection.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.BuildInParam(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Data.Database.AddInParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="parameters"></param>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Data.Database.BuildOutParam(System.String,System.Data.DbType)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:ComLib.Data.Database.BuildOutParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.String,System.Data.DbType)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="parameters"></param>
            <param name="paramName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:ComLib.Data.Database.BuildOutParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.Data.Common.DbParameter)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>        
            <param name="parameters">List of parameters.</param>
            <param name="dbParam"></param>
        </member>
        <member name="M:ComLib.Data.Database.Execute``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            A template method to execute any command action.
            This is made virtual so that it can be extended to easily include Performance profiling.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <param name="executor"></param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.Execute(int)("Users_GrantAccessToAllUsers", CommandType.StoredProcedure, 
                                          null, delegate(DbCommand cmd) { cmd.ExecuteNonQuery(); } );
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteProc``1(System.String,System.Data.Common.DbParameter[],System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            A template method to execute any command action that is Stored Procedure based.
            This is made virtual so that it can be extended to easily include Performance profiling.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <param name="executor"></param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.Execute(int)("Users_GrantAccessToAllUsers", CommandType.StoredProcedure, 
                                          null, delegate(DbCommand cmd) { cmd.ExecuteNonQuery(); } );
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.Execute``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Boolean,System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            A template method to execute any command action.
            This is made virtual so that it can be extended to easily include Performance profiling.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <param name="useTransaction"></param>
            <param name="executor"></param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.Execute(int)("Users_GrantAccessToAllUsers", CommandType.StoredProcedure, 
                                          null, delegate(DbCommand cmd) { cmd.ExecuteNonQuery(); } );
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetSingleValue(System.Data.IDataReader,System.Boolean)">
            <summary>
            Gets a single value from the reader and closes it after reading
            the value if the close is true.
            </summary>
            <param name="reader"></param>
            <param name="close"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.InitFactory">
            <summary>
            Initialize the database factory.
            </summary>
        </member>
        <member name="P:ComLib.Data.Database.Settings">
            <summary>
            Database settings
            </summary>
        </member>
        <member name="P:ComLib.Data.Database.Connection">
            <summary>
            Get/Set the connection object.
            This is specifically made as a setter to
            1. Allow dependency injection
            2. Allow connections to multiple database with multiple instances of DbHelper.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.CaptchaSettings">
            <summary>
            Settings for the random text generator.
            </summary>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.Width">
            <summary>
            Gets or sets the allowed chars.
            </summary>
            <value>The allowed chars.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.NumChars">
            <summary>
            How many characters should it produce
            </summary>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.IsCaseSensitive">
            <summary>
            Whether or not Upper/Lower case sensitive is
            enabled when validating userinput against the generated text.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.CaptchaWeb">
            <summary>
            This class implements a Captcha generator 
            for web usage.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.CaptchaGenerator">
            <summary>
            Generates an Captcha image.
            Credit: http://www.brainjar.com/dotNet/CaptchaImage/
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.ICaptchaGenerator">
            <summary>
            This interface should be implemented by classes that
            provide Captcha generation functionality.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptchaGenerator.Generate(System.String)">
            <summary>
            Generate a Captcha image based on supplied text.
            </summary>
            <param name="randomText"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.CaptchaSupport.ICaptchaGenerator.Settings">
            <summary>
            Get/set the Captcha settings.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.CaptchaSupport.CaptchaGenerator"/> class.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaGenerator.Generate(System.String)">
            <summary>
            Generates the bitmap using a random text using the random text generator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaGenerator.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:ComLib.CaptchaSupport.ICaptcha">
            <summary>
            This interface should be implemented by classes
            that aim to provide Captcha generation and
            verification functionality. In essence, this
            interface defines a Captcha generation provider.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptcha.IsCorrect">
            <summary>
            Determines if the current Captcha is correct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptcha.IsCorrect(System.String)">
            <summary>
            Determines if the current Captcah is correct.
            </summary>
            <param name="userInput"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptcha.IsCorrect(System.String,System.String)">
            <summary>
            Determines if the current Captcha is correct.
            </summary>
            <param name="userInput"></param>
            <param name="encodedText"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptcha.Generate">
            <summary>
            Generates a new Captcha image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptcha.GenerateFromUrl">
            <summary>
            Generates a new Captcha image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptcha.GetRandomText">
            <summary>
            Returns random text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.ICaptcha.GetRandomTextEncoded">
            <summary>
            Returns random encoded text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="hiddenFieldName"></param>
            <param name="userInputTextFieldName"></param>
            <param name="urlParam"></param>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.Generate">
            <summary>
            Generate a new Bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.GenerateFromUrl">
            <summary>
            Generate a new BitMap using the encoded random text supplied in the url.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.GetRandomText">
            <summary>
            Get random text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.GetRandomTextEncoded">
            <summary>
            Get the random encoded text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.IsCorrect">
            <summary>
            Determine whether the captca image is correct based on the 
            1. user input text
            2. hidden encoded captcha text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.IsCorrect(System.String)">
            <summary>
            Determine whether the captca image is correct based on the 
            1. user input text
            2. hidden encoded captcha text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.IsCorrect(System.String,System.String)">
            <summary>
            Determine whether the captca image is correct based on the 
            1. user input text
            2. hidden encoded captcha text.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Authentication.AuthWin">
            <summary>
            <see cref="T:ComLib.Authentication.IAuth"/> implementation to provide Authentication service for DESKTOP based windows applications where there is just 1 user.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.IAuth">
            <summary>
            Interface for Authentication.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsAuthenticated">
            <summary>
            Determines whether the user is authenticted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsGuest">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.GetUser``1(System.String)">
            <summary>
            Get the user principal and cast it to an implementation class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsAdmin">
            <summary>
            Determine whether or not user is an admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsUser(System.String)">
            <summary>
            Determine if the logged in user is the same as the username supplied.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsUserOrAdmin(System.String)">
            <summary>
            Returns true if the logged in user is the same as the username supplied,
            or if the logged in user is an admin.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignIn(System.String)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username and remember the user.
            </summary>
            <param name="user"></param>
            <param name="rememberUser"></param>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.UserId">
            <summary>
            User's Id - If applicable.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.#ctor(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Initialize with the admin role name.
            </summary>
            <param name="adminRoleName"></param>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.GetUser``1(System.String)">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.IsAuthenticated">
            <summary>
            Determine if the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignIn(System.String)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username and remember user.
            </summary>
            <param name="user">username.</param>
            <param name="rememberUser"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWin.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWin.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWin.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="T:ComLib.Entities.ActiveRecordBase`1">
            <summary>
            <para>
            Provides only Active record support for IEntity
            1. Crud methods
            2. Find methods
            No validation supported.
            </para>
            </summary>
            <remarks>
            <para>
            If .NET supported multiple inheritance, this class would extend from
            both DomainObject, and ActiveRecord, however the IActiveRecord interface
            has to be implemented in this class.
            1. Possible alternatives are extension methods 
            2. delegation.
            </para>
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(ComLib.Entities.IEntityService{`0})">
            <summary>
            Initialize the behaviour of creating the service and repository.
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(ComLib.Entities.IEntityService{`0},System.Boolean)">
            <summary>
            Singleton service and repository with optional flag to indicate 
            whether or not to configure the repository.
            </summary>
            <param name="service"></param>
            <param name="configureRepository"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId">The connId to use when configuring the repository.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator</param>
            <param name="settings">The settings for the entity.</param>
            <param name="configureRepo">Whether or not the repository should be configured.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator"></param>
            <param name="settings"></param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator"></param>
            <param name="settings"></param>
            <param name="resources"></param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Create(`0)">
            <summary>
            Creates the entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Creates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entities"></param>
            <param name="checkFields"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Update(`0)">
            <summary>
            Updates the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Save(`0)">
            <summary>
            Saves the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Delete(`0)">
            <summary>
            Deletes the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.DeleteAll">
            <summary>
            Deletes all the entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Delete(System.Int32)">
            <summary>
            Delete the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Get(System.Int32)">
            <summary>
            Retrieve the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.GetAll">
            <summary>
            Retrieve all instances of model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.First(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter"></param>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using Criteria.
            </summary>
            <param name="criteria"></param>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">e.g. "UserNameLowered = 'kishore'"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(ComLib.Data.IQuery)">
            <summary>
            Get items by page using Criteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.DoEntityAction(`0,System.Action{ComLib.IActionContext,ComLib.Entities.IEntityService{`0}})">
            <summary>
            Performs the actual entity action specified by the delegate <paramref name="executor"/>
            </summary>
            <param name="entity"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.ActiveRecordBase`1.Moderators">
            <summary>
            Comma delimited string of roles that can moderate instances of this entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.ActiveRecordBase`1.Repository">
            <summary>
            Get the repository associated w/ this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.Example_Repository3_Versioned">
            <summary>
            Example of an Repository that versions the entities it stores.
            This is a decorated that can be used with any underlying repository
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Repository3_Versioned.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityVersioned">
            <summary>
            Persistant entity that can be versioned.
            NOTE: If you want to have a Entity that uses generics
            and therefore provides the Create(), Update(), Save(), Delete() methods
            on it's own then, it's better to implemented the IEntityVersioned interface in your
            class using partial classes. Also the IEntityVersioned only has 3 methods so it's 
            pretty lightweight.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityVersioned.IsLatestVersion">
            <summary>
            Whether or not this is the latest version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.EntityVersioned.Version">
            <summary>
            The current version of the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityVersioned.VersionRefId">
            <summary>
            Reference to latest/active entity if this is an older version of the entity.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Repository3_Versioned.Product.Cost">
            <summary>
            Cost of the product.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Repository3_Versioned.Product.Name">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Config">
            <summary>
            Example for the Configuration namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Config.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Config.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Config.SingleFile">
            <summary>
            Using a single file for configuration.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Config.Inheritance">
            <summary>
            This example shows how the prod.config configsource can be merged
            with the dev.config to "inherit" all it's settings.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_NamedQuery">
            <summary>
            Example for the NamedQueries namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_NamedQuery.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_NamedQuery.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_NamedQuery.Init(System.Object)">
            <summary>
            Configure the ActiveRecord for Accounts
            NOTES: - All service objects can be constructed with a repository, validator, settings object.            
                   - All service objects can be constructed with a fake repository ( in memory ) for testing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ComLib.ValidationExtensionMessages">
            <summary>
            This class is used to store validation error messages.
            </summary>
        </member>
        <member name="M:ComLib.ValidationExtensionMessages.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Default class constructor.
            </summary>
            <param name="TextLessThanMinLength">Message for text less than min length.</param>
            <param name="TextMoreThanMaxLength">Message for text more than max length..</param>
            <param name="TextNotMatchPattern">Message for text not matching pattern.</param>
            <param name="TextMustBeIn">Message for text must be in values.</param>
            <param name="TextNotValidNumber">Message for invalid number.</param>
            <param name="TextNotNumeric">Message for not numeric text.</param>
            <param name="NumberLessThan">Message for number less than.</param>
            <param name="NumberMoreThan">Message for number more than.</param>
            <param name="TextMustContainOnlyChars">Message for text must contain only chars.</param>
            <param name="TextMustContainOnlyCharsAndNumbers">Message for text must contain only chars and numbers.</param>
            <param name="TextInvalidDate">Message for invalid date.</param>
            <param name="DateLessThanMinDate">Message for date less than min date.</param>
            <param name="DateMoreThanMaxDate">Message for date more than max date.</param>
            <param name="TextInvalidTime">Message for invalid time.</param>
            <param name="TextInvalidUSPhone">Message for invalid us phone.</param>
            <param name="TextInvalidSSN">Message for invalid ssn.</param>
            <param name="TextInvalidEmail">Message for invalid email.</param>
            <param name="TextInvalidUrl">Message for invalid url.</param>
            <param name="TextInvalidUSZip">Message for invalid us zip code.</param>
            <param name="ObjectsAreNotEqual">Message for not equal objects.</param>
            <param name="ObjectsAreEqual">Message for equal objects.</param>
            <param name="IsNotSupplied">Message for not supplied.</param>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextLessThanMinLength">
            <summary>
            Message for text less than min length.
            Default is "Text supplied is less than min length ({0}).".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextMoreThanMaxLength">
            <summary>
            Message for text more than max length.
            Default is "Text supplied is more than max length ({0}).".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextNotMatchPattern">
            <summary>
            Message for text not matching pattern.
            Default is "Text supplied does not match expected pattern.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextMustBeIn">
            <summary>
            Message for text must be in values.
            Default is "Text must be in : {0}".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextNotValidNumber">
            <summary>
            Message for invalid number.
            Default is "Text supplied is not a valid number.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextNotNumeric">
            <summary>
            Message for not numeric text.
            Default is "Text supplied is not numeric.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.NumberLessThan">
            <summary>
            Message for number less than.
            Default is "Number supplied is less than {0}.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.NumberMoreThan">
            <summary>
            Message for number more than.
            Default is "Number supplied is more than {0}.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextMustContainOnlyChars">
            <summary>
            Message for text must contain only chars.
            Default is "Text supplied must only contain chars {0}".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextMustContainOnlyCharsAndNumbers">
            <summary>
            Message for text must contain only chars and numbers.
            Default is "Text supplied must only contain chars and numbers {0}".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextInvalidDate">
            <summary>
            Message for invalid date.
            Default is "Text supplied is not a valid date".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.DateLessThanMinDate">
            <summary>
            Message for date less than min date.
            Default is "Date supplied is less than minimum date {0}".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.DateMoreThanMaxDate">
            <summary>
            Message for date more than max date.
            Default is "Date supplied is more than maximum date {0}".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextInvalidTime">
            <summary>
            Message for invalid time.
            Default is "Text supplied is not a valid time.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextInvalidUSPhone">
            <summary>
            Message for invalid us phone.
            Default is "Text supplied is not a valid US phone number.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextInvalidSSN">
            <summary>
            Message for invalid ssn.
            Default is "Text supplied is not a valid social security number.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextInvalidEmail">
            <summary>
            Message for invalid email.
            Default is "Text supplied is not a valid email.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextInvalidUrl">
            <summary>
            Message for invalid url.
            Default is "Text supplied is not a valid url.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.TextInvalidUSZip">
            <summary>
            Message for invalid us zip code.
            Default is "Text supplied is not a valid US zipcode.".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.ObjectsAreNotEqual">
            <summary>
            Message for not equal objects.
            Default is "Objects supplied are not equal".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.ObjectsAreEqual">
            <summary>
            Message for equal objects.
            Default is "Objects supplied are equal".
            </summary>
        </member>
        <member name="P:ComLib.ValidationExtensionMessages.IsNotSupplied">
            <summary>
            Message for not supplied.
            Default is " is not supplied.".
            </summary>
        </member>
        <member name="T:ComLib.ValidationExtensionMessages.DefaultValues">
            <summary>
            Class to hold default message values.
            </summary>
        </member>
        <member name="T:ComLib.RegexPatterns">
            <summary>
            This class contains several common regular expressions.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.Alpha">
            <summary>
            Alphabetic regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.AlphaUpperCase">
            <summary>
            Uppercase Alphabetic regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.AlphaLowerCase">
            <summary>
            Lowercase Alphabetic regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.AlphaNumeric">
            <summary>
            Alphanumeric regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.AlphaNumericSpace">
            <summary>
            Alphanumeric and space regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.AlphaNumericSpaceDash">
            <summary>
            Alphanumeric and space and dash regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.AlphaNumericSpaceDashUnderscore">
            <summary>
            Alphanumeric plus space, dash and underscore regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.AlphaNumericSpaceDashUnderscorePeriod">
            <summary>
            Alphaumieric plus space, dash, period and underscore regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.Numeric">
            <summary>
            Numeric regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.Integer">
            <summary>
            Numeric regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.SocialSecurity">
            <summary>
            Ssn regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.Email">
            <summary>
            E-mail regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.Url">
            <summary>
            Url regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.ZipCodeUS">
            <summary>
            US zip code regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.ZipCodeUSWithFour">
            <summary>
            US zip code with four digits regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.ZipCodeUSWithFourOptional">
            <summary>
            US zip code with optional four digits regex.
            </summary>
        </member>
        <member name="F:ComLib.RegexPatterns.PhoneUS">
            <summary>
            US phone regex.
            </summary>
        </member>
        <member name="T:ComLib.PagedList`1">
            <summary>
            Paged list to represent the page index, size, total records, and total pages
            in addition to the items.
            </summary>
            <typeparam name="T">Type of items to hold in the paged list.</typeparam>
        </member>
        <member name="F:ComLib.PagedList`1.Empty">
            <summary>
            Empty/ null object.
            </summary>
        </member>
        <member name="M:ComLib.PagedList`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Initialize w/ items, page index, size and total records.
            </summary>
            <param name="items">The items representing the list.</param>
            <param name="pageIndex">Page index to start at.</param>
            <param name="pageSize">Page size to start with.</param>
            <param name="totalRecords">Total number of records to start with.</param>
        </member>
        <member name="P:ComLib.PagedList`1.PageSize">
            <summary>
            Get/set the size of a page.
            </summary>
        </member>
        <member name="P:ComLib.PagedList`1.PageIndex">
            <summary>
            Get/set the page index.
            </summary>
        </member>
        <member name="P:ComLib.PagedList`1.TotalCount">
            <summary>
            Get/set the total number of items in the list.
            </summary>
        </member>
        <member name="P:ComLib.PagedList`1.TotalPages">
            <summary>
            Get/set the total number of pages.
            </summary>
        </member>
        <member name="T:ComLib.AutoMapperSettings">
            <summary>
            Configuration settings for mapper
            </summary>
        </member>
        <member name="F:ComLib.AutoMapperSettings.Default">
            <summary>
            Default settings.
            </summary>
        </member>
        <member name="M:ComLib.AutoMapperSettings.#ctor">
            <summary>
            Default initialization
            </summary>
        </member>
        <member name="M:ComLib.AutoMapperSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="catchErrors">Whether or not to catch errors.</param>
            <param name="isCaseSensitive">Whether or not to consider case sensitivity in mapping properties</param>
            <param name="mapNestedObjects">Whether or not to map nested objects</param>
            <param name="namedFilter">A filter used as a prefix on the source properties to map. eg. p_age: p_ is the prefix.</param>
            <param name="removeNameFilterWhenMapping">Whether or not to remove the name filter from the destination property when mapping.
                e.g. mapping from source "p_Name" with prefix "p_" and remove "p_" when mapping to destination "Name".
            </param>
        </member>
        <member name="F:ComLib.AutoMapperSettings.CatchErrors">
            <summary>
            Whether or not to catch errors.
            </summary>
        </member>
        <member name="F:ComLib.AutoMapperSettings.IsCaseSensitive">
            <summary>
            Whether or not to consider case sensitivity in mapping properties
            </summary>
        </member>
        <member name="F:ComLib.AutoMapperSettings.NameFilter">
            <summary>
            Filter for source properties ( used to only map source properties that have this in their name as a prefix )
            </summary>
        </member>
        <member name="F:ComLib.AutoMapperSettings.RemoveNameFilterWhenMapping">
            <summary>
            Whether or not to remove the name filter from the destination property when mapping.
                e.g. mapping from source "p_Name" with prefix "p_" and remove "p_" when mapping to destination "Name".
            </summary>
        </member>
        <member name="F:ComLib.AutoMapperSettings.MapNestedObjects">
            <summary>
            Whether or not to map nested objects
            </summary>
        </member>
        <member name="F:ComLib.AutoMapperSettings.NestedObjectSeparator">
            <summary>
            The characther used to separted nested object names. e.g. "Address.City" "." is separator.
            </summary>
        </member>
        <member name="F:ComLib.AutoMapperSettings.AutoCreateNestedObjects">
            <summary>
            Whether or not to create nested objects if the types are null.
            </summary>
        </member>
        <member name="T:ComLib.Lang.FunctionCallStatement">
            <summary>
            Function call statement.
            </summary>
        </member>
        <member name="F:ComLib.Lang.FunctionCallStatement.Exp">
            <summary>
            The function call expression.
            </summary>
        </member>
        <member name="M:ComLib.Lang.FunctionCallStatement.#ctor(ComLib.Lang.Expression)">
            <summary>
            Initialize
            </summary>
            <param name="exp"></param>
        </member>
        <member name="M:ComLib.Lang.FunctionCallStatement.Execute">
            <summary>
            Execute the function.
            </summary>
        </member>
        <member name="T:ComLib.Lang.Parser">
            <summary>
            Parses script in terms of sequences of Statements and Expressions;
            Each statement and expression is a sequence of Tokens( see Lexer )
            Main method is Parse(script) and ParseStatement();
            
            1. var name = "kishore";
            2. if ( name == "kishore" ) print("true");
            
            Statements:
            
            VALUE:         TYPE:
            1. AssignmentStatement ( "var name = "kishore"; )
            2. IfStatement ( "if (name == "kishore" ) { print ("true"); }
            </summary>
        </member>
        <member name="M:ComLib.Lang.Parser.Parse(System.String,ComLib.Lang.Scope)">
            <summary>
            Processes the script
            </summary>
            <param name="script">Script text</param>
            <param name="scope">Scope object</param>
        </member>
        <member name="M:ComLib.Lang.Parser.Execute">
            <summary>
            Executes all the statements
            </summary>
        </member>
        <member name="M:ComLib.Lang.Parser.ParseVar">
            <summary>
            // 1. var name;
            2. var age = 21;
            3. var canDrink = age >= 21;
            4. var canVote = CanVote(age);
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Parser.ParseAssignment(System.Boolean,System.Boolean,System.String)">
            <summary>
            // 1. var name;
            2. var age = 21;
            3. var canDrink = age >= 21;
            4. var canVote = CanVote(age);
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Parser.ParseWhile">
            <summary>
            Parses a while statment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Parser.Expect(ComLib.Lang.Token,System.Boolean)">
            <summary>
            Expect the token supplied and advance to next token
            </summary>
            <param name="token"></param>
            <param name="advance">Whether or not to advance to the next token after expecting token</param>
        </member>
        <member name="M:ComLib.Lang.Parser.ExpectId(System.Boolean)">
            <summary>
            Expect identifier
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Parser.IsEndOfStatementOrEndOfScript(ComLib.Lang.Token)">
            <summary>
            End of statement script.
            </summary>
            <param name="endOfStatementToken"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Parser.IsEndOfStatement(ComLib.Lang.Token)">
            <summary>
            Whether at end of statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Parser.IsEndOfScript">
            <summary>
            Whether at end of script
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Lang.Parser.Scope">
            <summary>
            Get the scope
            </summary>
        </member>
        <member name="T:ComLib.TypeHelper">
            <summary>
            This class provides basic operations that deal with system types.
            </summary>
        </member>
        <member name="M:ComLib.TypeHelper.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:ComLib.TypeHelper.IsNumeric(System.Object)">
            <summary>
            Determines whether the supplied object is of a numeric type.
            </summary>
            <param name="val">Object to check.</param>
            <returns>True if the supplied object is of a numeric type.</returns>
        </member>
        <member name="M:ComLib.TypeHelper.IsNumeric(System.Type)">
            <summary>
            Determines whether objects of the supplied type are numeric.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if objects of the supplied type are numeric.</returns>
        </member>
        <member name="M:ComLib.TypeHelper.IsBasicType(System.Type)">
            <summary>
            Determines whether the type represents a basic type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if this is a basic type.</returns>
        </member>
        <member name="M:ComLib.TypeHelper.Join(System.Object[])">
            <summary>
            Converts an array of objects to a comma-separated string representation.
            </summary>
            <param name="vals">Array of objects.</param>
            <returns>Comma-separated string representation of the array of objects.</returns>
        </member>
        <member name="T:ComLib.ConfigSource">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:ComLib.ConfigSource.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.ConfigSource.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.ConfigSource.Load">
            <summary>
            Load from datasource.
            </summary>
        </member>
        <member name="M:ComLib.ConfigSource.Save">
            <summary>
            Save to the datasource.
            </summary>
        </member>
        <member name="E:ComLib.ConfigSource.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:ComLib.ConfigSource.SourcePath">
            <summary>
            The source file path.
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.TwitterSupport.Tweet">
            <summary>
            Tweet
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.TwitterSupport.Tweet.Id">
            <summary>
            Twitter user id
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.TwitterSupport.Tweet.User">
            <summary>
            User name.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.TwitterSupport.Tweet.Text">
            <summary>
            Text of the tweet
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.TwitterSupport.Tweet.Content">
            <summary>
            Content of the tweet
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.TwitterSupport.Tweet.Published">
            <summary>
            When the tweet was published
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.TwitterSupport.Tweet.Link">
            <summary>
            A link to the tweet
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.TwitterSupport.Tweet.Author">
            <summary>
            An author of the tweet
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.TwitterSupport.Tweet.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.TwitterSupport.Tweet.#ctor(System.String,System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="id"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="published"></param>
            <param name="url"></param>
            <param name="author"></param>
        </member>
        <member name="T:ComLib.Web.Services.TwitterSupport.Twitter">
            <summary>
            Twitter class for getting tweets
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.TwitterSupport.Twitter.GetFeed(System.String,System.Int32)">
            <summary>
            Get the latest tweets from twitter for the specified username.
            </summary>
            <param name="username"></param>
            <param name="maxEntries"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.ValidationSupport.ValidatorWithRules">
            <summary>
            Base class for any validator.
            </summary>
        </member>
        <member name="T:ComLib.IValidatorWithRules">
            <summary>
            Interface for a validator that supports validation rules.
            </summary>
        </member>
        <member name="M:ComLib.IValidatorWithRules.Add(System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Adds a validation rule.
            </summary>
            <param name="rule">Validation rule to add.</param>
        </member>
        <member name="M:ComLib.IValidatorWithRules.Add(System.String,System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Adds a named validation rule.
            </summary>
            <param name="ruleName">Rule name.</param>
            <param name="rule">Validation rule to add.</param>
        </member>
        <member name="M:ComLib.IValidatorWithRules.RemoveAt(System.Int32)">
            <summary>
            Removes a validation rule by its index.
            </summary>
            <param name="ndx">Validation rule index.</param>
        </member>
        <member name="M:ComLib.IValidatorWithRules.Remove(System.String)">
            <summary>
            Removes a validation rule by its name.
            </summary>
            <param name="ruleNname">Name of rule to remove.</param>
        </member>
        <member name="P:ComLib.IValidatorWithRules.Count">
            <summary>
            Gets the number of validation rules.
            </summary>
        </member>
        <member name="P:ComLib.IValidatorWithRules.Item(System.Int32)">
            <summary>
            Gets a validation rule.
            </summary>
            <param name="ndx">Index of validation rule.</param>
            <returns>Validation rule.</returns>
        </member>
        <member name="F:ComLib.ValidationSupport.ValidatorWithRules._rules">
            <summary>
            List with validation rules.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.ValidationSupport.ValidatorWithRules"/> class.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.#ctor(System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.ValidationSupport.ValidatorWithRules"/> class
            with a lamda validator.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Add(System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Add new validation rule.
            </summary>
            <param name="rule">Rule function.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Add(System.String,System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Add new validation rule.
            </summary>
            <param name="ruleName">Rule name.</param>
            <param name="rule">Rule function.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.RemoveAt(System.Int32)">
            <summary>
            Remove at the specified index.
            </summary>
            <param name="ndx">The NDX.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Remove(System.String)">
            <summary>
            Remove with the specified name.
            </summary>
            <param name="name">Rule name.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Clear">
            <summary>
            Clear all the rules.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validates all the rules in the internal rule list.
            </summary>
            <param name="validationEvent">Validation event.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="P:ComLib.ValidationSupport.ValidatorWithRules.Item(System.Int32)">
            <summary>
            Gets the validation rule at the specified index.
            </summary>
            <value></value>
            <param name="ndx">Rule index.</param>
            <returns>Validation rule.</returns>
        </member>
        <member name="P:ComLib.ValidationSupport.ValidatorWithRules.Count">
            <summary>
            Number of rules.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:ComLib.LocationSupport.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.Address"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initalize with data.
            </summary>
            <param name="venue">The venue.</param>
            <param name="street">The street.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="stateAbbr">The state abbr.</param>
            <param name="zip">The zip.</param>
        </member>
        <member name="M:ComLib.LocationSupport.Address.Set(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set the various fields of the address.
            </summary>
            <param name="venue">The venue.</param>
            <param name="street">The street.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="stateAbbr">The state abbr.</param>
            <param name="zip">The zip.</param>
            <param name="country">The country.</param>
        </member>
        <member name="M:ComLib.LocationSupport.Address.Clear">
            <summary>
            Default to empty
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Address.ToString">
            <summary>
            Single line format of address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Address.ToOneLine">
            <summary>
            Converts the address to a single line address separating the street,city,state,zip,country by ",".
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Address.ToOneLine(System.String)">
            <summary>
            Converts the address to a single line address separating the street,city,state,zip,country by ",".
            </summary>
            <param name="displayLevel">The display level. "Venue", "Street", "City", "State", "Country"</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Empty">
            <summary>
            Empty address.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Address.CityId">
            <summary>
            Gets or sets the city id.
            </summary>
            <value>The city id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.StateId">
            <summary>
            Gets or sets the state id.
            </summary>
            <value>The state id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.CountryId">
            <summary>
            Gets or sets the country id.
            </summary>
            <value>The country id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Zip">
            <summary>
            Gets or sets the zip.
            </summary>
            <value>The zip.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.StateAbbr">
            <summary>
            Gets or sets the state abbr.
            </summary>
            <value>The state abbr.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Street">
            <summary>
            Gets or sets the street.
            </summary>
            <value>The street.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Venue">
            <summary>
            Gets or sets the street.
            </summary>
            <value>The street.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.IsOnline">
            <summary>
            Is Online.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Address.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.IsEmpty">
            <summary>
            Whether or not there is any data for city, zip, state, country.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Address.FullAddress">
            <summary>
            Set the full address. (venue), (street), (city), (state), (zip), (country)
            </summary>
        </member>
        <member name="T:ComLib.Data.SelectField">
            <summary>
            Represents a field in a select clause.
            </summary>
        </member>
        <member name="F:ComLib.Data.SelectField.Field">
            <summary>
            Represented field.
            </summary>
        </member>
        <member name="F:ComLib.Data.SelectField.Alias">
            <summary>
            Field alias.
            </summary>
        </member>
        <member name="M:ComLib.Data.SelectField.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:ComLib.Data.SelectField.ToString(System.Boolean,System.String,System.String)">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <param name="surround">True to surround alias with text.</param>
            <param name="left">Left surround text.</param>
            <param name="right">Right surround text.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:ComLib.Data.OrderByClause">
            <summary>
            Represents one entry to order by.
            </summary>
        </member>
        <member name="F:ComLib.Data.OrderByClause.Field">
            <summary>
            Field name.
            </summary>
        </member>
        <member name="F:ComLib.Data.OrderByClause.Ordering">
            <summary>
            Ordering information.
            </summary>
        </member>
        <member name="M:ComLib.Data.OrderByClause.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:ComLib.Data.OrderByClause.ToString(System.Boolean,System.String,System.String)">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <param name="surround">True to surround alias with text.</param>
            <param name="left">Left surround text.</param>
            <param name="right">Right surround text.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:ComLib.Data.Condition">
            <summary>
            Represents a condition entry.
            </summary>
        </member>
        <member name="F:ComLib.Data.Condition.ConditionType">
            <summary>
            And | Or
            </summary>
        </member>
        <member name="F:ComLib.Data.Condition.Field">
            <summary>
            Condition field.
            </summary>
        </member>
        <member name="F:ComLib.Data.Condition.Comparison">
            <summary>
            Type of comparison.
            </summary>
        </member>
        <member name="F:ComLib.Data.Condition.Value">
            <summary>
            Value to compare to.
            </summary>
        </member>
        <member name="M:ComLib.Data.Condition.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="M:ComLib.Data.Condition.#ctor(ComLib.Data.ConditionType)">
            <summary>
            Creates an instance of this class using a condition type.
            </summary>
            <param name="condition">Condition type to use.</param>
        </member>
        <member name="M:ComLib.Data.Condition.#ctor(ComLib.Data.ConditionType,System.String,System.String,System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="condition">Condition type to use.</param>
            <param name="key">Field name.</param>
            <param name="assignment">Comparison type.</param>
            <param name="val">Value to compare to.</param>
        </member>
        <member name="M:ComLib.Data.Condition.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:ComLib.Data.Condition.ToString(System.Boolean,System.String,System.String)">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <param name="surround">True to surround alias with text.</param>
            <param name="left">Left surround text.</param>
            <param name="right">Right surround text.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:ComLib.Data.ConditionType">
            <summary>
            Enumeration to represent condition types
            used when constructing statements.
            </summary>
        </member>
        <member name="F:ComLib.Data.ConditionType.And">
            <summary>
            AND condition.
            </summary>
        </member>
        <member name="F:ComLib.Data.ConditionType.Or">
            <summary>
            OR condition.
            </summary>
        </member>
        <member name="F:ComLib.Data.ConditionType.None">
            <summary>
            No condition.
            </summary>
        </member>
        <member name="T:ComLib.Data.OrderByType">
            <summary>
            Enumeration that represents type of ordering.
            </summary>
        </member>
        <member name="F:ComLib.Data.OrderByType.Asc">
            <summary>
            Ascending ordering.
            </summary>
        </member>
        <member name="F:ComLib.Data.OrderByType.Desc">
            <summary>
            Descending ordering.
            </summary>
        </member>
        <member name="T:ComLib.Data.Eq">
            <summary>
            Enumeration representing the comparison operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.Less">
            <summary>
            Less-than operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.LessEqual">
            <summary>
            Less-or-equal operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.Equals">
            <summary>
            Equals operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.More">
            <summary>
            More-than operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.MoreEqual">
            <summary>
            More-or-equal-than operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.NotEqual">
            <summary>
            Not-equal operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.In">
            <summary>
            In operator.
            </summary>
        </member>
        <member name="F:ComLib.Data.Eq.NotIn">
            <summary>
            Not-in operator.
            </summary>
        </member>
        <member name="T:ComLib.Patterns.ICommand">
            <summary>
            Command.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.ICommand.Execute">
            <summary>
            Execute
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Patterns.ICommandContextual">
            <summary>
            Command with contextual method signature.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.ICommandContextual.Execute(ComLib.IActionContext)">
            <summary>
            Execute with contextual information and return bool/message.
            </summary>
            <param name="context">Action context.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="T:ComLib.OrmLite.IOrmLiteBuilder">
            <summary>
            Interface to be implemented by
            ORM lite builder classes.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.IOrmLiteBuilder.BuildInsert">
            <summary>
            Creates Insert statements for all entity properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.OrmLite.IOrmLiteBuilder.BuildUpdate">
            <summary>
            Creates Update statements for all entity properties.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.OrmLite.IOrmLiteBuilder.Entity">
            <summary>
            Get/set the entity to use.
            </summary>
        </member>
        <member name="P:ComLib.OrmLite.IOrmLiteBuilder.IdentityRetrievalStatement">
            <summary>
            Returns statement that retrieves id of inserted entity.
            </summary>
        </member>
        <member name="T:ComLib.OrmLite.OrmLiteBuilder">
            <summary>
            This class provides an implementation of a lightweight ORM builder.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmLiteBuilder.BuildInsert">
            <summary>
            Generate an very generic single table insert statement that includes all the properties
            of the entity.
            </summary>
            <returns>String with Insert statement.</returns>
        </member>
        <member name="M:ComLib.OrmLite.OrmLiteBuilder.BuildUpdate">
            <summary>
            Generate a generic single table update statement that includes
            all the properties of the entity.
            </summary>
            <returns>String with Update statement.</returns>
        </member>
        <member name="M:ComLib.OrmLite.OrmLiteBuilder.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the entity's property via reflection
            and converts the value to appropriatedly escaped string value.
            </summary>
            <param name="entity">The entity.</param>
            <param name="prop">The prop.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="P:ComLib.OrmLite.OrmLiteBuilder.Entity">
            <summary>
            Entity to build sql insert/update for.
            </summary>
        </member>
        <member name="P:ComLib.OrmLite.OrmLiteBuilder.IdentityRetrievalStatement">
            <summary>
            Provide the statement for getting the inserted entity id(sql identity).
            </summary>
        </member>
        <member name="T:ComLib.OrmLite.OrmSqlStaticBuilder">
            <summary>
            Orm sql builder.
            </summary>
        </member>
        <member name="F:ComLib.OrmLite.OrmSqlStaticBuilder._databaseType">
            <summary>
            TYpe of database provider.
            </summary>
        </member>
        <member name="F:ComLib.OrmLite.OrmSqlStaticBuilder._ctx">
            <summary>
            Context information for generation.
            </summary>
        </member>
        <member name="F:ComLib.OrmLite.OrmSqlStaticBuilder._modelName">
            <summary>
            Model name.
            </summary>
        </member>
        <member name="F:ComLib.OrmLite.OrmSqlStaticBuilder._tableName">
            <summary>
            Table name.
            </summary>
        </member>
        <member name="F:ComLib.OrmLite.OrmSqlStaticBuilder._tabCount">
            <summary>
            Number of tabs to use after a new line.
            </summary>
        </member>
        <member name="F:ComLib.OrmLite.OrmSqlStaticBuilder._tab">
            <summary>
            Concantenated tab characters.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.#ctor">
            <summary>
            Unitialized instance.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.#ctor(ComLib.Models.ModelContext,System.String,System.String,System.Int32)">
            <summary>
            Initialize this instance.
            </summary>
            <param name="ctx">Context with generation information.</param>
            <param name="modelName">Name of model.</param>
            <param name="tableName">Name of table to target.</param>
            <param name="tabCount">Number of tabs after each new line.</param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Init(ComLib.Models.ModelContext,System.String,System.String,System.Int32)">
            <summary>
            Initialize this instance.
            </summary>
            <param name="ctx">Context with generation information.</param>
            <param name="modelName">Name of model.</param>
            <param name="tableName">Name of table to target.</param>
            <param name="tabCount">Number of tabs after each new line.</param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Insert">
            <summary>
            Generate the sql for insert.
            </summary>
            <returns>String with Insert statement.</returns>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Update">
            <summary>
            Generate the sql for update.
            </summary>
            <returns>String with Update statement.</returns>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.SetupColumns(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Setup the columns.
            </summary>
            <param name="columnNames">List with the column names.</param>
            <param name="columnValues">List with the column values.</param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Process(System.Action{System.String,ComLib.Models.Model,ComLib.Models.PropInfo})">
            <summary>
            Process the model, by handling all it's properties, compositions, and includes and calling
            the delegate given  to handle the properties.
            </summary>
            <param name="propHandler">Delegate to handle the properties.</param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.GetValue(System.String,ComLib.Models.PropInfo)">
            <summary>
            Get the value.
            </summary>
            <param name="objectPropName">Property name.</param>
            <param name="prop">Instance of property info.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:ComLib.OrmLite.OrmSqlStaticBuilder.IdentityRetrievalStatement">
            <summary>
            Provide the statement for getting the inserted entity id(sql identity).
            </summary>
        </member>
        <member name="T:ComLib.OrmLite.OrmSqlStaticBuilderFactory">
            <summary>
            This is a software factory to generate an instance of 
            ORM SQL static builder based on a provider name.
            
            Currently, only an ORM SQL builder for System.Data.SqlClient
            is supported and returned by default.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilderFactory.GetBuilder(System.String)">
            <summary>
            Return an instance of an ORM SQL builder
            based on a database provider name.
            </summary>
            <param name="providerName">Name of database provider.</param>
            <returns>Instance of ORM SQL builder.</returns>
            <remarks>Currently, an instance of OrmSqlStaticBuilderSqlServer
            is always returned.</remarks>
        </member>
        <member name="T:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer">
            <summary>
            Sql builder for Sql Server.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer.#ctor">
            <summary>
            Unitialized instance.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer.#ctor(ComLib.Models.ModelContext,System.String,System.String,System.Int32)">
            <summary>
            Initialize this instance.
            </summary>
            <param name="ctx">Context with generation information.</param>
            <param name="modelName">Name of model.</param>
            <param name="tableName">Name of table to target.</param>
            <param name="tabCount">Number of tabs after each new line.</param>
        </member>
        <member name="P:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer.IdentityRetrievalStatement">
            <summary>
            Provide the statement for getting the inserted entity id(sql identity).
            </summary>
        </member>
        <member name="T:ComLib.Calendars.CalendarUtils">
            <summary>
            Helper class for holidays.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalendarUtils.InterpretHolidays(System.Collections.Generic.List{ComLib.Calendars.Holiday},System.Int32)">
            <summary>
            Converts the holiday items into DateTime objects for the specified year.
            </summary>
            <param name="holidays"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarUtils.GetUnitedStatesHolidays">
            <summary>
            Get United States holidays.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Extensions.StringExtensions">
            <summary>
            This static class contains several common String extension methods.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.Times(System.String,System.Int32)">
            <summary>
            Multiply a string N number of times.
            </summary>
            <param name="str">String to multiply.</param>
            <param name="times">Number of times to multiply the string.</param>
            <returns>Original string multiplied N times.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.IncreaseTo(System.String,System.Int32,System.Boolean)">
            <summary>
            Increases the string to the maximum length specified.
            If the string is already greater than maxlength, it is truncated if the flag truncate is true.
            </summary>
            <param name="str">The STR.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="truncate">if set to <c>true</c> [truncate].</param>
            <returns>Increased string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.IncreaseRandomly(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Increases the string to the maximum length specified.
            If the string is already greater than maxlength, it is truncated if the flag truncate is true.
            </summary>
            <param name="str">The STR.</param>
            <param name="minLength">String minimum length.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="truncate">if set to <c>true</c> [truncate].</param>
            <returns>Randomly increased string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="txt">String to truncate.</param>
            <param name="maxChars">Maximum string length.</param>
            <returns>Truncated string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.TruncateWithText(System.String,System.Int32,System.String)">
            <summary>
            Truncate the text supplied by number of characters specified by <paramref name="maxChars"/>
            and then appends the suffix.
            </summary>
            <param name="txt">String to truncate.</param>
            <param name="maxChars">Maximum string length.</param>
            <param name="suffix">Suffix to append to string.</param>
            <returns>Truncated string with suffix.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToBytesAscii(System.String)">
            <summary>
            Convert the text  to bytes.
            </summary>
            <param name="txt">Text to convert to bytes.</param>
            <returns>ASCII bytes representing the string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToBytes(System.String)">
            <summary>
            Convert the text to bytes using the system default code page.
            </summary>
            <param name="txt">Text to convert to bytes.</param>
            <returns>Bytes representing the string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToBytesEncoding(System.String,System.Text.Encoding)">
            <summary>
            Convert the text to bytes using a specified encoding.
            </summary>
            <param name="txt">Text to convert to bytes.</param>
            <param name="encoding">Encoding to use during the conversion.</param>
            <returns>Bytes representing the string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.StringFromBytesASCII(System.Byte[])">
            <summary>
            Converts an ASCII byte array to a string.
            </summary>
            <param name="bytes">ASCII bytes.</param>
            <returns>String representation of ASCII bytes.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.StringFromBytes(System.Byte[])">
            <summary>
            Converts a byte array to a string using the system default code page.
            </summary>
            <param name="bytes">Byte array.</param>
            <returns>String representation of bytes.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.StringFromBytesEncoding(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts a byte array to a string using a specified encoding.
            </summary>
            <param name="bytes">Byte array.</param>
            <param name="encoding">Encoding to use during the conversion.</param>
            <returns>String representation of bytes.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToBoolObject(System.String)">
            <summary>
            Converts "yes/no/true/false/0/1"
            </summary>
            <param name="txt">String to convert to boolean.</param>
            <returns>Boolean converted from string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToBool(System.String)">
            <summary>
            Converts "yes/no/true/false/0/1"
            </summary>
            <param name="txt">String to convert to boolean.</param>
            <returns>Boolean converted from string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToIntObject(System.String)">
            <summary>
            Converts a string to an integer and returns it as an object.
            </summary>
            <param name="txt">String to convert to integer.</param>
            <returns>Integer converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToInt(System.String)">
            <summary>
            Converts a string to an integer.
            </summary>
            <param name="txt">String to convert to integer.</param>
            <returns>Integer converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToLongObject(System.String)">
            <summary>
            Converts a string to a long and returns it as an object.
            </summary>
            <param name="txt">String to convert to long.</param>
            <returns>Long converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToLong(System.String)">
            <summary>
            Converts a string to a long.
            </summary>
            <param name="txt">String to convert to long.</param>
            <returns>Long converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDoubleObject(System.String)">
            <summary>
            Converts a string to a double and returns it as an object.
            </summary>
            <param name="txt">String to convert to double.</param>
            <returns>Double converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDouble(System.String)">
            <summary>
            Converts a string to a double.
            </summary>
            <param name="txt">String to convert from double.</param>
            <returns>Double converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToFloatObject(System.String)">
            <summary>
            Converts a string to a float and returns it as an object.
            </summary>
            <param name="txt">String to convert to float.</param>
            <returns>Float converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToFloat(System.String)">
            <summary>
            Converts a string as a float and returns it.
            </summary>
            <param name="txt">String to convert to float.</param>
            <returns>Float converted from string.</returns>
            <remarks>The method takes into starting monetary symbols like $.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToNumber``1(System.String,System.Func{System.String,``0},``0)">
            <summary>
            Converts to a number using the callback.
            </summary>
            <typeparam name="T">Type to convert to.</typeparam>
            <param name="txt">String to convert.</param>
            <param name="callback">Conversion callback method.</param>
            <param name="defaultValue">Default conversion value.</param>
            <returns>Instance of type converted from string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToTimeObject(System.String)">
            <summary>
            Converts a string to a timespan instance and returns it as an object.
            </summary>
            <param name="txt">String to convert to a timespan instance.</param>
            <returns>Timespan instance converted from string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToTime(System.String)">
            <summary>
            Converts a string to a timespan instance.
            </summary>
            <param name="txt">String to convert to timespan instance.</param>
            <returns>Timespan instance converted from string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDateTimeObject(System.String)">
            <summary>
            Converts a string to a datetime instance.
            </summary>
            <param name="txt">String to conevert to datetime instance.</param>
            <returns>Datetime instance converted from string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            Converts a string to a datetime instance.
            </summary>
            <param name="txt">String to convert to datetime instance.</param>
            <returns>Datetime instance converted from string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.IsHex(System.String)">
            <summary>
            Determines whether the string contains valid hexadecimal characters only.
            </summary>
            <param name="txt">String to check.</param>
            <returns>True if the string contains valid hexadecimal characters.</returns>
            <remarks>An empty or null string is considered to <b>not</b> contain
            valid hexadecimal characters.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.IsBinary(System.String)">
            <summary>
            Determines whether the string contains valid binary characters only.
            </summary>
            <param name="txt">String to check.</param>
            <returns>True if the string contains valid binary characters.</returns>
            <remarks>An empty or null string is considered to <b>not</b> contain
            valid binary characters.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.DecimalToHex(System.String)">
            <summary>
            Returns the hexadecimal representation of a decimal number.
            </summary>
            <param name="txt">Hexadecimal string to convert to decimal.</param>
            <returns>Decimal representation of string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.DecimalToBinary(System.String)">
            <summary>
            Returns the binary representation of a binary number.
            </summary>
            <param name="txt">Decimal string to convert to binary.</param>
            <returns>Binary representation of string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.HexToDecimal(System.String)">
            <summary>
            Returns the decimal representation of a hexadecimal number.
            </summary>
            <param name="txt">Hexadecimal string to convert to decimal.</param>
            <returns>Decimal representation of string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.HexToBinary(System.String)">
            <summary>
            Returns the binary representation of a hexadecimal number.
            </summary>
            <param name="txt">Binary string to convert to hexadecimal.</param>
            <returns>Hexadecimal representation of string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.HexToByteArray(System.String)">
            <summary>
            Converts a hexadecimal string to a byte array representation.
            </summary>
            <param name="txt">Hexadecimal string to convert to byte array.</param>
            <returns>Byte array representation of the string.</returns>
            <remarks>The string is assumed to be of even size.</remarks>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ByteArrayToHex(System.Byte[])">
            <summary>
            Converts a byte array to a hexadecimal string representation.
            </summary>
            <param name="b">Byte array to convert to hexadecimal string.</param>
            <returns>String representation of byte array.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.BinaryToHex(System.String)">
            <summary>
            Returns the hexadecimal representation of a binary number.
            </summary>
            <param name="txt">Binary string to convert to hexadecimal.</param>
            <returns>Hexadecimal representation of string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.BinaryToDecimal(System.String)">
            <summary>
            Returns the decimal representation of a binary number.
            </summary>
            <param name="txt">Binary string to convert to decimal.</param>
            <returns>Decimal representation of string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ReplaceChars(System.String,System.String,System.String)">
            <summary>
            Replaces the characters in the originalChars string with the
            corresponding characters of the newChars string.
            </summary>
            <param name="txt">String to operate on.</param>
            <param name="originalChars">String with original characters.</param>
            <param name="newChars">String with replacement characters.</param>
            <example>For an original string equal to "123456654321" and originalChars="35" and
            newChars "AB", the result will be "12A4B66B4A21".</example>
            <returns>String with replaced characters.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.PreFixWith(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Prefixes all items in the list w/ the prefix value.
            </summary>
            <param name="items">The items.</param>
            <param name="prefix">The prefix.</param>
            <returns>List with prefixes.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.IsNotApplicableValue(System.String,System.Boolean)">
            <summary>
            Determines whether or not the string value supplied represents a "not applicable" string value by matching on na, n.a., n/a etc.
            </summary>
            <param name="val">String to check.</param>
            <param name="useNullOrEmptyStringAsNotApplicable">True to use null or empty string check.</param>
            <returns>True if the string value represents a "not applicable" string.</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.Levenshtein(System.String,System.String)">
            <summary>
            Use the Levenshtein algorithm to determine the similarity between
            two strings. The higher the number, the more different the two
            strings are.
            TODO: This method needs to be rewritten to handle very large strings
            See <a href="http://www.merriampark.com/ld.htm"></a>.
            See <a href="http://en.wikipedia.org/wiki/Levenshtein_distance"></a>.
            </summary>
            <param name="source">Source string to compare</param>
            <param name="comparison">Comparison string</param>
            <returns>0 if both strings are identical, otherwise a number indicating the level of difference</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.SimplifiedSoundex(System.String)">
            <summary>
            Calculate the simplified soundex value for the specified string.
            See <a href="http://en.wikipedia.org/wiki/Soundex"></a>.
            See <a href="http://west-penwith.org.uk/misc/soundex.htm"></a>.
            </summary>
            <param name="source">String to calculate</param>
            <returns>Soundex value of string</returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.SimplifiedSoundex(System.String,System.Int32)">
            <summary>
            Calculate the simplified soundex value for the specified string.
            See <a href="http://en.wikipedia.org/wiki/Soundex"></a>.
            See <a href="http://west-penwith.org.uk/misc/soundex.htm"></a>.
            </summary>
            <param name="source">String to calculate</param>
            <param name="length">Length of soundex value (typically 4)</param>
            <returns>Soundex value of string</returns>
        </member>
        <member name="T:ComLib.Extensions.LatinWordExtensions">
            <summary>
            Collection of extension utility methods useful for processing latin
            text.
            </summary>
        </member>
        <member name="F:ComLib.Extensions.LatinWordExtensions.WhiteSpaceCharacters">
            <summary>
            A very liberal list of whitespace characters used in unicode.
            Char.isWhitespace() only checks for latin1 values, this list is
            more comprehensive and should not be used unintelligently for
            stripping whitespace because it may make the target language
            unreadable.
            </summary>
        </member>
        <member name="F:ComLib.Extensions.LatinWordExtensions.EnglishInitialsExclusionWords">
            <summary>
            Small list of english words that commonly excluded from abbreviations
            and initials.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.IsDelimiter(System.Char,System.Char[])">
            <summary>
            Determines whether the specified char is delimiter.
            </summary>
            <param name="c">Character to match</param>
            <param name="delimiters">A array of delimiters or null for default whitespace lookup</param>
            <returns>
            	<c>true</c> if the specified char is delimiter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.Initials(System.String)">
            <summary>
            Creates initials from the first characters in each word (as separated
            by whitespace) in the specified phrase.
            </summary>
            <example>
            <code>
            var initials = "end of file".Initials(); // "eof"
            </code>
            </example>
            <param name="phrase">Phrase to initialize</param>
            <returns>string containing the first initials of the specified phrase</returns>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.Initials(System.String,System.Char[])">
            <summary>
            Creates initials from the first characters in each word (as separated
            by delimiters) in the specified phrase.
            </summary>
            <example>
            <code>
            var initials = "end,of,file".Initials(new char[] {','}); // "eof"
            </code>
            </example>
            <param name="phrase">Phrase to initialize</param>
            <param name="delimiters">Array of characters used to delimite words, if null then default whitespace matching is used.</param>
            <returns>string containing the first initials of the specified phrase</returns>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.Initials(System.String,System.Char[],System.String[])">
            <summary>
            Creates initials from the first characters in each word (as separated
            by delimiters) in the specified phrase.
            </summary>
            <example>
            <code>
            var initials = "end of file".Initials(null, new string[] {"of"}); // ef
            </code>
            </example>
            <param name="phrase">Phrase to initialize</param>
            <param name="delimiters">Array of characters used to delimite words, if null then default whitespace matching is used.</param>
            <param name="exclusions">Words to excluded from initials (e.g. 'the', 'an', etc)</param>
            <returns>string containing the first initials of the specified phrase</returns>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.Wrap(System.String,System.Int32)">
            <summary>
            Word wraps string to specified line length without justification.
            Words that exceed line length will not have line break added.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="lineLength">Number of characters in line</param>
            <returns>Word wrapped string</returns>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.Wrap(System.String,System.Int32,System.String)">
            <summary>
            Word wraps string to specified line length without justification.
            Words that exceed line length will not have line break added.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="lineLength">Number of characters in line</param>
            <param name="newLineMarker">Character to use for new lines, if null Environment.NewLine</param>
            <returns>Word wrapped string</returns>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.NormalizeWhitespace(System.String)">
            <summary>
            Normalizes the whitespace in a string by transforming all whitespace
            characters that repeat in succession to a single default whitespace
            character.
            </summary>
            <param name="text">The text to normalize</param>
            <returns>Normalized string</returns>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.NormalizeWhitespace(System.String,System.Char)">
            <summary>
            Normalizes the whitespace in a string by transforming all whitespace
            characters that repeat in succession to a single default whitespace
            character.
            </summary>
            <param name="text">The text to normalize</param>
            <param name="whitespaceChar">The whitespace character to replace all other whitespace with</param>
        </member>
        <member name="M:ComLib.Extensions.LatinWordExtensions.NormalizeWhitespace(System.String,System.Char,System.Char[])">
            <summary>
            Normalizes the whitespace in a string by transforming all whitespace
            characters that repeat in succession to a single default whitespace
            character.
            </summary>
            <param name="text">The text to normalize</param>
            <param name="whitespaceChar">The whitespace character to replace all other whitespace with</param>
            <param name="whitespace">Array of whitespace characters to match</param>
            <returns>Normalized string</returns>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceDb">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="appName"></param>
            <param name="configName"></param>
            <param name="connectionString">Connection to a database that contains the log events table</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="appName"></param>
            <param name="configName"></param>
            <param name="connectionString">Connection to a database that contains the log events table</param>
            <param name="doLoad"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.#ctor(System.String,System.String,ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem},System.Boolean)">
            <summary>
            Constructor taking the IRepository that will handle CRUD operations
            of log messages to the Database.
            Also, the repo provided can be a FAKE( In-Memory ) implementation which
            is useful in testing.
            </summary>
            <param name="appName"></param>
            <param name="configName"></param>
            <param name="repo"></param>
            <param name="doLoad"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Init(System.String,System.String,ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem},System.Boolean)">
            <summary>
            Initialize.
            </summary>
            <param name="appName">"MyApplication"</param>
            <param name="configName">"dev.config,qa.config"</param>
            <param name="repo"></param>
            <param name="doLoad"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Init">
            <summary>
            Initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Load">
            <summary>
            Load from database.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Save">
            <summary>
            Save to the database.
            </summary>
        </member>
        <member name="E:ComLib.Configuration.ConfigSourceDb.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDb.SourcePath">
            <summary>
            The source path. "dev.config".
            </summary>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderValidation">
            <summary>
            Builds the validation for the model, this includes it's properties and
            it's composite objects.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.Process(ComLib.Models.ModelContext)">
            <summary>
            Create the ORM mappings in xml file.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForModel(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Build the properties.
            </summary>
            <param name="ctx"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Builds the validation code for all entire object, taking into account
            all the validations for each property.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForStringProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for string properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForIntProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for int properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForDateTimeProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for datetime properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="buffer"></param>        
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForStringRegExProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for int properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="buffer"></param>        
        </member>
        <member name="T:ComLib.Categories.CategoryLookUp">
            <summary>
            Category look up class.
            This contains all the categories / subcategories available.
            </summary>
        </member>
        <member name="T:ComLib.Patterns.CompositeLookup`1">
            <summary>
            Category look up class.
            This contains all the categories / subcategories available.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initialzie the lookup
            </summary>
            <param name="allCategories">List with all categories.</param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.GetByName(System.String,System.String)">
            <summary>
            Get category by parent,child name.
            </summary>
            <param name="parentName">Name of parent.</param>
            <param name="childName">Name of child.</param>
            <returns>Found node.</returns>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.Children(System.Int32)">
            <summary>
            Get children given the parent id.
            </summary>
            <param name="id">Id of parent.</param>
            <returns>Collection of parent's children.</returns>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.Initilaize(System.Collections.Generic.IList{`0})">
            <summary>
            Store the categories appropriately.
            </summary>
            <param name="allNodes">List with all nodes.</param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.StoreById(`0)">
            <summary>
            Store by the id.
            [2] = Painting
            </summary>
            <param name="node">Node to store.</param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.StoreByName(`0)">
            <summary>
            Builds a fully qualified name.
            Parent.Child.GrandChild etc.
            Art.Painting.Watercolor
            </summary>
            <param name="node">Node to store.</param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.BuildKey(System.String,System.String)">
            <summary>
            Build category key.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeLookup`1.Item(System.Int32)">
            <summary>
            Returns the category associated with the id.
            </summary>
            <param name="id">Category id.</param>
            <returns>Category designated by id.</returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeLookup`1.Item(System.String)">
            <summary>
            Get by fully qualified name.
            e.g. "Art.Painting.WaterColor"
            </summary>
            <param name="fullyQualifiedName">Qualified name.</param>
            <returns>Node designated by name.</returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeLookup`1.RootNodes">
            <summary>
            Returns a readonly collection of the root categories.
            </summary>
        </member>
        <member name="M:ComLib.Categories.CategoryLookUp.#ctor(System.Collections.Generic.IList{ComLib.Categories.Category})">
            <summary>
            Initialzie the lookup
            </summary>
            <param name="allCategories"></param>
        </member>
        <member name="M:ComLib.Categories.CategoryKey.BuildKey(ComLib.Categories.Category)">
            <summary>
            Build key for category.
            
            If root, just the the category name.
                e.g. "Art"
            
            If sub-category, parent/sub-cat name
                e.g. "Art,Sculpture"
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.CategoryKey.BuildKey(System.String,System.String)">
            <summary>
            Build category key.
            </summary>
            <param name="categoryName"></param>
            <param name="subCategoryName"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Categories.Category">
            <summary>
            Summary description for Category
            </summary>
        </member>
        <member name="T:ComLib.Patterns.CompositeWithIdAndName`1">
            <summary>
            Compositie object with id and name.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
        </member>
        <member name="T:ComLib.Patterns.Composite`1">
            <summary>
            Composite object.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
        </member>
        <member name="F:ComLib.Patterns.Composite`1.RootCategoryParentCategoryId">
            <summary>
            Id of root parent.
            </summary>
        </member>
        <member name="F:ComLib.Patterns.Composite`1._childrenList">
            <summary>
            List with children elements.
            </summary>
        </member>
        <member name="F:ComLib.Patterns.Composite`1._parent">
            <summary>
            Parent element.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.#ctor">
            <summary>
            Creates a new instance of this class
            with an empty list of children.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.Add(`0)">
            <summary>
            Add a child node.
            </summary>
            <param name="node">Child node to add.</param>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.Remove">
            <summary>
            Remove the last node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specific index.
            </summary>
            <param name="ndx">Node index.</param>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.Clear">
            <summary>
            Remove all the elements.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.Count">
            <summary>
            Number of children.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.HasChildren">
            <summary>
            Determine if this has children.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.Children">
            <summary>
            Children.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.Parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.#ctor">
            <summary>
            Default name to empty.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.Add(`0)">
            <summary>
            Add node.
            </summary>
            <param name="node">Node to add.</param>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.Remove">
            <summary>
            Remove the last node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specific index.
            </summary>
            <param name="ndx">Node index.</param>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.Clear">
            <summary>
            Remove all the elements.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.InternalRemove(System.Int32)">
            <summary>
            Remove from lookups.
            </summary>
            <param name="ndx">Node index.</param>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Id">
            <summary>
            Id of the node.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.ParentId">
            <summary>
            Parent id.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Name">
            <summary>
            Name of the node.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.IsRoot">
            <summary>
            Return whether or not this is a root category.
            Which does not have a parent.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Item(System.String)">
            <summary>
            Return node by name.
            </summary>
            <param name="name">Node name.</param>
            <returns>Node designated by the name.</returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Item(System.Int32)">
            <summary>
            Return by id.
            </summary>
            <param name="id">Node index.</param>
            <returns>Node designated by the index.</returns>
        </member>
        <member name="M:ComLib.Categories.Category.#ctor">
            <summary>
            Default Initialization
            </summary>
        </member>
        <member name="M:ComLib.Categories.Category.#ctor(System.Int32,System.DateTime,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="categoryId"></param>
            <param name="addedDate"></param>
            <param name="addedBy"></param>
            <param name="parentCategoryId"></param>
            <param name="categoryTitle"></param>
            <param name="categoryDescription"></param>
            <param name="imageUrl"></param>
            <param name="parentTitle"></param>
        </member>
        <member name="P:ComLib.Categories.Category.Description">
            <summary>
            Description of category
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.ParentName">
            <summary>
            Name of parent category
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.OrderNum">
            <summary>
            Used for ordering.
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.ImageUrl">
            <summary>
            Image Url of the image associated with this category.
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.Url">
            <summary>
            Applicable url.
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Account">
            <summary>
            Example for the Account namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Account.Execute">
            <summary>
            Run the sample application.
            </summary>		
        </member>
        <member name="M:ComLib.Samples.Example_Account.Init(System.Object)">
            <summary>
            Configure the ActiveRecord for Accounts
            NOTES: - All service objects can be constructed with a repository, validator, settings object.            
                   - All service objects can be constructed with a fake repository ( in memory ) for testing.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ComLib.SimpleStateHelper">
            <summary>
            This class contains utility methods for saving an object state.
            </summary>
        </member>
        <member name="M:ComLib.SimpleStateHelper.LoadState(System.Object,System.String,System.String,System.String,System.String)">
            <summary>
            Load the state into the properties of <paramref name="objToSave"/>
            </summary>
            <param name="objToSave">The obj to save.</param>
            <param name="state">The state as a string.
            e.g.
            line #: propertyname,value
            line1 : Title,Learn how to program in asp.net mvc./r/n
            line2 : Cost,30/r/n
            line3 : Content,learn how to program in asp.net using commonlibrary.net CMS which is an
                  : ASP.NET MVC CMS using commonlibrary.net/r/n
            line6 : Url,1,http://commonlibrarynetcms.codeplex.com/r/n
            </param>
            <param name="includeProps">The include props.</param>
            <param name="excludeProps">The exclude props.</param>
            <param name="stringClobProps">The string clob props.</param>
        </member>
        <member name="M:ComLib.SimpleStateHelper.CreateState(System.Object,System.String,System.String,System.String)">
            <summary>
            Saves all the extended settings into a simple multi-line key/value pair.
            This also handles the case for stringclobs.
            </summary>
            <param name="objToSave">The obj to save.</param>
            <param name="includeProps">The include props.</param>
            <param name="excludeProps">The exclude props.</param>
            <param name="stringClobProps">The string clob props.</param>
            <returns>String with property keys and values.</returns>
        </member>
        <member name="T:ComLib.SimpleStateMap">
            <summary>
            Container for storing properties that should be included/excluded during saving of an objects state.
            </summary>
        </member>
        <member name="F:ComLib.SimpleStateMap.IncludeProps">
            <summary>
            Properties that should be included when saving state.
            </summary>
        </member>
        <member name="F:ComLib.SimpleStateMap.ExcludeProps">
            <summary>
            Properties that should be excluded when saving state.
            </summary>
        </member>
        <member name="F:ComLib.SimpleStateMap.StringClobProps">
            <summary>
            Properties that represent long strings.
            </summary>
        </member>
        <member name="F:ComLib.SimpleStateMap.Props">
            <summary>
            All instance/get/set properties.
            </summary>
        </member>
        <member name="F:ComLib.SimpleStateMap.AllPropMap">
            <summary>
            All instance/get/set properties as a map.
            </summary>
        </member>
        <member name="M:ComLib.SimpleStateMap.ToPropStateMap(System.Type,System.String,System.String,System.String)">
            <summary>
            Toes the prop state map.
            </summary>
            <param name="type">The type.</param>
            <param name="includePropsDelimeted">The include props delimeted.</param>
            <param name="excludePropsDelimted">The exclude props delimted.</param>
            <param name="stringClobPropsDelimited">The string clob props delimited.</param>
            <returns>Instance of simple state map with property configuration.</returns>
        </member>
        <member name="T:ComLib.Lang.ForLoopExpression">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopExpression.Variable">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopExpression.StartExpression">
            <summary>
            Expression representing the start value.
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopExpression.CheckOp">
            <summary>
            Operator for condition check in loop ndx >= 4
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopExpression.CheckExpression">
            <summary>
            Expression representing the bound value ndx > = 4 
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopExpression.IncrementOp">
            <summary>
            The operator to increment by ++ or +=
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopExpression.IncrementExpression">
            <summary>
            The expression if not ++ but += then the number after +=
            </summary>
        </member>
        <member name="M:ComLib.Lang.ForLoopExpression.Evaluate">
            <summary>
            Execute each expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.VariableExpression">
            <summary>
            Variable expression data
            </summary>
        </member>
        <member name="T:ComLib.Lang.ValueExpression">
            <summary>
            Variable expression data
            </summary>
        </member>
        <member name="F:ComLib.Lang.ValueExpression.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="F:ComLib.Lang.ValueExpression.DataType">
            <summary>
            Datatype of the variable.
            </summary>
        </member>
        <member name="F:ComLib.Lang.ValueExpression.Value">
            <summary>
            Value of the variable.
            </summary>
        </member>
        <member name="M:ComLib.Lang.VariableExpression.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Lang.VariableExpression.#ctor(System.String,ComLib.Lang.Scope)">
            <summary>
            Initialize
            </summary>
            <param name="scope">Scope containing objects</param>
            <param name="name">Variable name</param>
        </member>
        <member name="F:ComLib.Lang.VariableExpression.Scope">
            <summary>
            Scope containing variables
            </summary>
        </member>
        <member name="M:ComLib.Lang.VariableExpression.Evaluate">
            <summary>
            Evaluate
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.VariableExpression.EvaluateAs``1">
            <summary>
            Evaluate
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.GroupExpression">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.GroupExpression.#ctor(ComLib.Lang.Expression,ComLib.Lang.Operator,ComLib.Lang.Expression)">
            <summary>
            Initialize
            </summary>
            <param name="left">Left hand expression</param>
            <param name="op">Operator</param>
            <param name="right">Right expression</param>
        </member>
        <member name="F:ComLib.Lang.GroupExpression.Left">
            <summary>
            Left hand expression
            </summary>
        </member>
        <member name="F:ComLib.Lang.GroupExpression.Op">
            <summary>
            Operator * - / + % 
            </summary>
        </member>
        <member name="F:ComLib.Lang.GroupExpression.Right">
            <summary>
            Right hand expression
            </summary>
        </member>
        <member name="M:ComLib.Lang.GroupExpression.Evaluate">
            <summary>
            Evaluate * / + - % 
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.StringHelper">
            <summary>
            String helper methods.
            </summary>
        </member>
        <member name="M:ComLib.StringHelper.ReadLines(System.String)">
            <summary>
            Read all the lines in the string.
            </summary>
            <param name="text">Text with lines.</param>
            <returns>List of lines in text.</returns>
        </member>
        <member name="M:ComLib.StringHelper.GetDelimitedChars(System.String,System.String,System.Char)">
            <summary>
            Get delimited chars from a string.
            </summary>
            <param name="rawText">search-classes-workshops-4-1-1-6</param>
            <param name="excludeText">search-classes-workshops</param>
            <param name="delimiter">-</param>
            <returns>Array with delimited chars.</returns>
        </member>
        <member name="M:ComLib.StringHelper.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="txt">String to truncate.</param>
            <param name="maxChars">Maximum string length.</param>
            <returns>String truncated to length.</returns>
        </member>
        <member name="M:ComLib.StringHelper.TruncateWithText(System.String,System.Int32,System.String)">
            <summary>
            Truncate the text supplied by number of characters specified by <paramref name="maxChars"/>
            and then appends the suffix.
            </summary>
            <param name="txt">Text to truncate.</param>
            <param name="maxChars">Maximum text length.</param>
            <param name="suffix">Suffix to append.</param>
            <returns>Truncated string with appended suffix.</returns>
        </member>
        <member name="M:ComLib.StringHelper.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Join string enumeration items.
            </summary>
            <param name="items">List of items to join to a string.</param>
            <param name="delimeter">Delimiter between items.</param>
            <returns>Joined items.</returns>
        </member>
        <member name="M:ComLib.StringHelper.GetOriginalOrEmptyString(System.String)">
            <summary>
            If null returns empty string.
            Else, returns original.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Original text or empty string.</returns>
        </member>
        <member name="M:ComLib.StringHelper.GetDefaultStringIfEmpty(System.String,System.String)">
            <summary>
            Returns the defaultval if the val string is null or empty.
            Returns the val string otherwise.
            </summary>
            <param name="val">Val string.</param>
            <param name="defaultVal">Default value.</param>
            <returns>Val string or default value if val is null or empty.</returns>
        </member>
        <member name="M:ComLib.StringHelper.ConvertToSentanceCase(System.String,System.Char)">
            <summary>
            Convert the word(s) in the sentence to sentence case.
            UPPER = Upper
            lower = Lower
            MiXEd = Mixed
            </summary>
            <param name="s">Sentence.</param>
            <param name="delimiter">Delimiter.</param>
            <returns>Original string as sentence case.</returns>
        </member>
        <member name="M:ComLib.StringHelper.GetIndexOfSpacer(System.String,System.Int32,System.Boolean@)">
            <summary>
            Get the index of a spacer ( space" " or newline )
            </summary>
            <param name="txt">Text to look into.</param>
            <param name="currentPosition">Starting position to start looking after.</param>
            <param name="isNewLine">True if a new line is found instead of a space.</param>
            <returns>Index of spacer.</returns>
        </member>
        <member name="M:ComLib.StringHelper.ConvertBoolToYesNo(System.Boolean)">
            <summary>
            Convert boolean value to "Yes" or "No"
            </summary>
            <param name="b">Boolean value to convert.</param>
            <returns>Yes/No based on boolean value.</returns>
        </member>
        <member name="M:ComLib.StringHelper.ConvertToString(System.Object[])">
            <summary>
            Converts to string.
            </summary>
            <param name="args">The args.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:ComLib.StringHelper.ToMap(System.String,System.Char)">
            <summary>
            Convert to delimited text to a dictionary.
            </summary>
            <param name="delimitedText">"1,2,3,4,5"</param>
            <param name="delimeter">','</param>
            <returns>Dictionary with delimited text and tokens.</returns>
        </member>
        <member name="M:ComLib.StringHelper.ToMap(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Map a set of keyvalue pairs to a dictionary.
            </summary>
            <param name="delimitedText">e.g. "city=Queens, state=Ny, zipcode=12345, country=usa"</param>
            <param name="keyValuePairDelimiter">","</param>
            <param name="keyValueDelimeter">"="</param>
            <param name="makeKeysCaseSensitive">Flag to make the keys case insensitive, which
            converts the keys to lowercase if set to true.</param>
            <param name="trimValues">Flag to trim the values in the key-value pairs.</param>
            <returns>Dictionary with text and tokens.</returns>
        </member>
        <member name="M:ComLib.StringHelper.ToStringArray(System.String,System.Char)">
            <summary>
            Parses a delimited list of items into a string[].
            </summary>
            <param name="delimitedText">"1,2,3,4,5,6"</param>
            <param name="delimeter">','</param>
            <returns>String array with list of items in string.</returns>
        </member>
        <member name="M:ComLib.StringHelper.Substitute(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Substitute the placeholders ${name} where name is the key in <paramref name="subsitutions"/>
            and replace it with the value associated with the key.
            </summary>
            <param name="subsitutions">The subsitutions.</param>
            <param name="contentPlaceholders">The content placeholders.</param>
            <returns>String after substitutions were made.</returns>
        </member>
        <member name="M:ComLib.StringHelper.Substitute(System.String,System.Func{System.String,System.String},System.String)">
            <summary>
            Substitute parameters in an input text in the format ${name} with another value
            </summary>
            <param name="input">The input text containing parameters to substitute e.g. In "abc_${month}_${year}_123" "month" and "year" are the parameters</param>
            <param name="substitutor">Callback function to get the value substituted value for a parameter </param>
            <param name="pattern">The Regex pattern to represent the parameters. default is (?&lt;name>\$\{.+?\})</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelper.DoFixedLengthPrinting(System.Collections.IDictionary,System.Int32,System.Action{System.String,System.Object})">
            <summary>
            Finds the maximum length of a key and padd all the rest of the keys to be 
            the same fixed length, and calls the delegate supplied.
            </summary>
            <param name="keyValues">The key value pairs.</param>
            <param name="extraPadding">Additional number of chars to pad to the keys.</param>
            <param name="printer">The delegate to call to print to.</param>
        </member>
        <member name="M:ComLib.StringHelper.GetFixedLengthString(System.String,System.Int32,System.String)">
            <summary>
            Builds a fixed length string with the maxChars provided.
            </summary>
            <param name="text">Current string to start with.</param>
            <param name="maxChars">Maximum number of characters.</param>
            <param name="paddingChar">Padding character.</param>
            <returns>Final created string.</returns>
        </member>
        <member name="F:ComLib.StringHelper.LineBreakingCharacters">
            <summary>
            A liberal list of line breaking characters used in unicode. Typically,
            LF and CR are the only characters supported in C#.
            </summary>
        </member>
        <member name="F:ComLib.StringHelper.DosLineSeparator">
            <summary>
            DOS/Windows style line breaks (CR+LF)
            </summary>
        </member>
        <member name="F:ComLib.StringHelper.UnixLineSeparator">
            <summary>
            Unix style line breaks (LF)
            </summary>
        </member>
        <member name="F:ComLib.StringHelper.MacOs9Separator">
            <summary>
            Commodore, TRS-80, Apple II, Apple MacOS9 style line breaks (CR)
            </summary>
        </member>
        <member name="F:ComLib.StringHelper.UnicodeSeparator">
            <summary>
            Unicode line separator - not widely supported
            </summary>
        </member>
        <member name="M:ComLib.StringHelper.ConvertLineSeparators(System.IO.TextReader,System.IO.TextWriter,System.Char[])">
            <summary>
            Converts from a liberal list of unicode line separators to the
            specified line separator.
            </summary>
            <param name="reader">TextReader to read from</param>
            <param name="writer">TextReader to write to</param>
            <param name="separator">Line break separator.</param>
        </member>
        <member name="M:ComLib.StringHelper.ConvertLineSeparators(System.String,System.Char[])">
            <summary>
            Converts from a liberal list of unicode line separators to the
            specified line separator.
            </summary>
            <example>
            // Convert line breaks to current environment's default
            var text = "blah blah...";
            ConvertLineSeparators(text, Environment.NewLine.ToCharArray());
            </example>
            <param name="text">Source text</param>
            <param name="separator">Line break separator.</param>
            <returns>String with normalized line separators</returns>
        </member>
        <member name="T:ComLib.Try">
            <summary>
            Wrapper class to simplify lines of code around Try/Catch blocks with various customized behaviour.
            </summary>
        </member>
        <member name="M:ComLib.Try.CatchLog(System.Action)">
            <summary>
            Calls the action and logs any exception that occurrs
            </summary>
            <param name="action">Action to execute inside a try/catch.</param>
        </member>
        <member name="M:ComLib.Try.CatchLog(System.String,System.Action)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
        </member>
        <member name="M:ComLib.Try.CatchLogRethrow(System.Action)">
            <summary>
            Calls the action and logs any exception that occurrs and rethrows the exception.
            <param name="action">Action to execute in a try/catch.</param>
            </summary>
        </member>
        <member name="M:ComLib.Try.CatchLog(System.String,System.Action,System.Action{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="logger">The logger to use</param>
        </member>
        <member name="M:ComLib.Try.Catch(System.Action,System.Action{System.Exception})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action">The function to call.</param>
            <param name="exceptionHandler">The action to use for handling the exception</param>
        </member>
        <member name="M:ComLib.Try.CatchHandle(System.String,System.Action,System.Action{System.Exception},System.Action)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="exceptionHandler">The action to use for handling the exception</param>
            <param name="finallyHandler">The action to use in the finally block</param>
        </member>
        <member name="M:ComLib.Try.CatchLogGet``1(System.String,System.Func{``0})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:ComLib.Try.CatchLogGet``1(System.String,System.Boolean,System.Func{``0},System.Action{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <typeparam name="T">Type of return item.</typeparam>
            <param name="errorMessage">Error message to log.</param>
            <param name="rethrow">Whether or not to rethrow</param>
            <param name="action">The function to call.</param>
            <param name="logger">The logger to use</param>
            <returns>Returned result.</returns>
        </member>
        <member name="M:ComLib.Try.CatchLogGetBoolResult``1(System.String,System.Func{``0})">
            <summary>
            Get a boolmessage item after running the action.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <returns>Returned result.</returns>
        </member>
        <member name="M:ComLib.Try.CatchLogGetBoolResult``1(System.String,System.Func{``0},System.Action{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <typeparam name="T">Type of return item.</typeparam>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="logger">Logger object.</param>
            <returns>Return item.</returns>
        </member>
        <member name="M:ComLib.Try.TryCatchLogGetBoolMessageItem(System.String,System.Func{ComLib.BoolMessageItem},System.Action{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="logger">Logger object.</param>
            <returns>Return item.</returns>
        </member>
        <member name="M:ComLib.Try.HandleException(System.Exception)">
            <summary>
            Handle the highest level application exception.
            </summary>
            <param name="ex">Exception to handle.</param>
        </member>
        <member name="M:ComLib.Try.CatchLogGetBoolResultEx(System.String,System.String,System.Action)">
            <summary>
            Runs the action, logs an error and returns boolMessageEx that wraps up all there values.
            Bool flag for successful call without excpetion, errorMessage if there was an exception, 
            and the exception itself if it occurred.
            </summary>
            <param name="message">Success message</param>
            <param name="errorMessage">Failure message</param>
            <param name="action">Action to run</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:ComLib.Try.CatchLogReturnBoolResultEx(System.String,System.String,System.Func{ComLib.BoolMessageEx})">
            <summary>
            Runs the action, logs an error and returns boolMessageEx that wraps up all there values.
            Bool flag for successful call without excpetion, errorMessage if there was an exception, 
            and the exception itself if it occurred.
            </summary>
            <param name="message">Success message</param>
            <param name="errorMessage">Failure message</param>
            <param name="action">Action to run</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:ComLib.Try.GetBoolResultEx(System.String,System.String,System.Func{ComLib.BoolMessageEx})">
            <summary>
            Runs the action, logs an error and returns boolMessageEx that wraps up all there values.
            Bool flag for successful call without excpetion, errorMessage if there was an exception, 
            and the exception itself if it occurred.
            </summary>
            <param name="message">Success message</param>
            <param name="errorMessage">Failure message</param>
            <param name="action">Action to run</param>
            <returns>Error message.</returns>
        </member>
        <member name="P:ComLib.Try.Logger">
            <summary>
            Initialize logging lamda.
            </summary>
        </member>
        <member name="T:ComLib.Web.WebUtils">
            <summary>
            This class provides helper methods for the <see cref="N:ComLib.Web"/> namespace.
            </summary>
        </member>
        <member name="M:ComLib.Web.WebUtils.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileContentsRemote(System.String)">
            <summary>
            Get a remote web file.
            </summary>
            <param name="file">The remote URL</param>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileContentsLocal(System.String)">
            <summary>
            Retrieve local file contents.
            </summary>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetContentOfFile(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile">Path to input file.</param>
            <returns>String with file contents.</returns>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetContentOfFileAsBytes(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile">Path to input file.</param>
            <returns>Byte array with file contents.</returns>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetContentOfFileAsBytes(System.Web.HttpPostedFileBase)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile">Path to input file.</param>
            <returns>Byte array with file contents.</returns>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileExtension(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Gets the file extension of the file.
            </summary>
            <param name="inputFile">Path to file.</param>
            <returns>File extension.</returns>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileExtensionAsFormat(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the file extension as a image format.
            </summary>
            <param name="inputFile">Path to image file.</param>
            <returns>The format of the image file.</returns>
        </member>
        <member name="T:ComLib.Web.WebSecurityUtils">
            <summary>
            Security util.
            </summary>
        </member>
        <member name="M:ComLib.Web.WebSecurityUtils.IsSelfRequest(System.Web.HttpContext,System.String@,System.String)">
            <summary>
            Determines if the request being made is from the same host.
            Otherwise, most likely someone is leeching the image.
            </summary>
            <param name="requestDeniedImagePath">"~/images/backoff.gif"</param>
            <param name="ctx">Current http contenxt.</param>
            <param name="path">Physical path.</param>
            <returns>True of is being made from the same host.</returns>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.HandlerBase">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.#ctor">
            <summary>
            Default construction. Initialize.
            </summary>
        </member>
        <member name="F:ComLib.Web.HttpHandlers.HandlerBase._content">
            <summary>
            The content to write back to the response.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom 
            HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides 
            references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.SetHeaders(System.Web.HttpContext,System.Object,System.Int32)">
            <summary>
            Sets the context.
            </summary>
            <param name="context">Http context.</param>
            <param name="contextbag">Context bag.</param>
            <param name="hashcode">Hash code.</param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.Init">
            <summary>
            Allows for initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.WriteContent(System.Web.HttpContext)">
            <summary>
            Write the response content.
            </summary>
            <param name="context">Http context.</param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.GetFile(System.String)">
            <summary>
            Get the css file.
            </summary>
            <param name="fileName">CSS file.</param>
            <returns>CSS file.</returns>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.Extension">
            <summary>
            The extension for this handler.
            e.g. .css.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.ExtensionForContent">
            <summary>
            Used to set content type.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.ConfigSectionName">
            <summary>
            The name of the section to use for this specific handler.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.Config">
            <summary>
            Configuration settings as IDictionary.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:ComLib.Entities.RepositoryInMemory`1">
            <summary>
            UNIT - Test  Implementation.
            
            NOTE: This is only used for UNIT-TESTS:
            The real repository is RepositorySql which actually connects to a database.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.#ctor">
            <summary>
            Initializes a new instance with default settings and settings public instance properties excluding "IsValid", "Errors", and "Settings" as searchable.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.#ctor(System.String)">
            <summary>
            Initializes a new instance using comma delimited list of properties that can be indexed(searched)
            </summary>
            <param name="columnsToIndexDelimited">Delimited list of columns.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="cloneEntityOnGet">True to return cloned entity on retrieval as opposed to simply returning the entity since it's in memory</param>
            <param name="columnsToIndexDelimited">Delimited list of columns that can be searched/indexed.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Init(System.Boolean,System.String)">
            <summary>
            Initializes using settings supplied
            </summary>
            <param name="cloneEntityOnGet">True to return cloned entity on retrieval as opposed to simply returning the entity since it's in memory</param>
            <param name="columnsToIndexDelimited">Delimited list of columns.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Create(`0)">
            <summary>
            Create an entity.
            </summary>
            <param name="entity">Instance of entity.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Get(System.Object)">
            <summary>
            Retrieve the entity by it's key/id.
            </summary>
            <param name="id">Id to entity.</param>
            <returns>Matching entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetAll">
            <summary>
            Retrieve all the entities.
            </summary>
            <returns>List with all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetAllItems">
            <summary>
            Retrieve all the entities into a non-generic list.
            </summary>
            <returns>List with all entities.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Update(`0)">
            <summary>
            Update the entity.
            </summary>
            <param name="entity">Entity to update.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Delete(System.Object)">
            <summary>
            Delete the entitiy by it's key/id.
            </summary>
            <param name="id">Id of entity to delete.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.DeleteAll">
            <summary>
            Delete all entities from the repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Delete(ComLib.Data.IQuery)">
            <summary>
            Delete using the Criteria object.
            </summary>
            <param name="criteria">Criteria for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression">Expression to use for deletion.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.First(ComLib.Data.IQuery)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="criteria">Filter to match.</param>
            <returns>First matched item.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(ComLib.Data.IQuery)">
            <summary>
            Find by query
            </summary>
            <param name="criteria">Criteria to match.</param>
            <returns>List of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(System.String,System.Boolean)">
            <summary>
            Find entities by the query. 
            </summary>
            <param name="queryString">"Id = 23"</param>
            <param name="isFullSql">Whether or not the query contains "select from {table} "
            This shuold be removed from this datatable implementation.</param>
            <returns>List of found items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="criteria">Criteria object representing filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>Paged list with found items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">Filter to use.</param>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns>Paged list with found items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page based on latest / most recent create date.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns>Paged list with found items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.InternalGroup``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Group(date)(CreateDate)
            </summary>
            <typeparam name="TGroup">Type of group.</typeparam>
            <param name="columnName">Name of column to group by.</param>
            <param name="criteria">Inclusion criteria.</param>
            <returns>List with key/value pairs.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Group(ComLib.Data.IQuery,System.String[])">
            <summary>
            Get datatable using mutliple columns in group by and criteria/filter.
            </summary>
            <param name="criteria">Group criteria.</param>
            <param name="columnNames">Array with names of columns to include in the result.</param>
            <returns>Data table with data of matching items.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.InternalDistinct``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Get the distinct values in the specified column.
            </summary>
            <typeparam name="TVal">Type of values to return.</typeparam>
            <param name="columnName">Column name.</param>
            <param name="criteria">Filter to apply before getting distinct columns.</param>
            <returns>List of distinct values.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Increment(System.String,System.Int32,System.Int32)">
            <summary>
            Increments the field specified by the expression.
            </summary>
            <param name="fieldName">The fieldname.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Decrement(System.String,System.Int32,System.Int32)">
            <summary>
            Decrements the field specified by the expression.
            </summary>
            <param name="fieldName">The fieldname.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ToTable">
            <summary>
            Get Table containing all the records.
            </summary>
            <returns>Data table with all records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ToTable(ComLib.Data.IQuery)">
            <summary>
            Get datatable using the IQuery filter
            </summary>
            <param name="criteria">Criteria to match.</param>
            <returns>Data table with matching records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ToTableBySql(System.String)">
            <summary>
            Get datatable using the IQuery filter
            </summary>
            <param name="sql">Sql criteria to match.</param>
            <returns>Data table with matching records.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetRow(System.Object)">
            <summary>
            Retrieve the entity by it's key/id.
            </summary>
            <param name="id">Entity id.</param>
            <returns>Data row with entity data.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ExecuteAggregateWithFilter``1(System.String,System.String,System.String)">
            <summary>
            Just change how the query is used. The existing Count, Min, Max base methods can stay the same.
            </summary>
            <typeparam name="TResult">Type of result to return.</typeparam>
            <param name="funcName">Name of aggregation function to run.</param>
            <param name="columnName">Column name.</param>
            <param name="filter">Filter to apply before running aggregate function.</param>
            <returns>Matching result.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetNextId">
            <summary>
            Gets the next id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.TransferData(System.Data.DataRow,`0)">
            <summary>
            Transfer the entity data into the DataRow and the entity itself.
            </summary>
            <param name="row"></param>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Map(System.Data.DataRow[])">
            <summary>
            Maps the DataRows into a list of the typed Entities.
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Map(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Maps the enumerable collection of datarows into a List of entities.
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LocationSupport.LocationSettings">
            <summary>
            This class is used to hold configuration settings
            that define how location information will be handled.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationSettings.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheCountryList">
            <summary>
            Get/set whether country list is cached.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheStateList">
            <summary>
            Get/set whether state list is cached.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheCityList">
            <summary>
            Get/set whether city list is cached.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheCountryLookup">
            <summary>
            Get/set whether country lookup is cached.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheStateLookup">
            <summary>
            Get/set whether the state lookup is cached.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheCityLookup">
            <summary>
            Get/set whether the city lookup is cached.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheTimeForCountriesInSeconds">
            <summary>
            Get/set the cache timeout, in seconds, for countries.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheTimeForStatesInSeconds">
            <summary>
            Get/set the cache timeout, in seconds, for states.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationSettings.CacheTimeForCitiesInSeconds">
            <summary>
            Get/set the cache timeout, in seconds, for cities.
            </summary>
        </member>
        <member name="T:ComLib.IO.IniDocument">
            <summary>
            IniDocument to handle loading and writing(not yet done)
            of ini files.
            
            This class can load a MULTI-LINE ini file into a dictionary like data structure.
            
            [BlogPost1]
            Title : Introduction to Oil painting class.
            Description : "Learn how to paint using
            oil, in this beginners class for painting enthusiats."
            Url : http://www.knowledgedrink.com
            </summary>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.Collections.Generic.IList{ComLib.ConfigSection})">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="sections"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="name"></param>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the ini document with the string or file path.
            </summary>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the ini document with the string or file path.
            </summary>
            <param name="name"></param>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.Init(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize.
            </summary>
            <param name="name"></param>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.Load">
            <summary>
            Load settings.
            </summary>
        </member>
        <member name="M:ComLib.IO.IniDocument.Save">
            <summary>
            Save the document to file.
            </summary>
        </member>
        <member name="M:ComLib.IO.IniDocument.Save(System.String)">
            <summary>
            Save the document to the filepath specified.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:ComLib.IO.IniDocument.SourcePath">
            <summary>
            Source path of this file.
            </summary>
        </member>
        <member name="T:ComLib.IO.IniSection">
            <summary>
            Class to represent an IniSection/Group and which also stores the entries
            associated under the section/group.
            e.g. 
            [group1]
            key1 = value1
            key2 = value2
            </summary>
        </member>
        <member name="M:ComLib.IO.IniSection.Clone">
            <summary>
            Create shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.IniSection.ToString">
            <summary>
            Return the ini format of the contents.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.IO.IniLineType">
            <summary>
            The type of the ini line type.
            </summary>
        </member>
        <member name="T:ComLib.IO.IniParserConstants">
            <summary>
            Parser constants.
            </summary>
        </member>
        <member name="T:ComLib.IO.IniParserSettings">
            <summary>
            Settings for the parser.
            </summary>
        </member>
        <member name="F:ComLib.IO.IniParserSettings.MaxLenghtOfComment">
            <summary>
            The maximum length of a comment.
            </summary>
        </member>
        <member name="F:ComLib.IO.IniParserSettings.MaxLengthOfGroup">
            <summary>
            The maximum length of a group name [group]
            </summary>
        </member>
        <member name="F:ComLib.IO.IniParserSettings.MaxLengthOfKey">
            <summary>
            The maximum length of a key key:.
            </summary>
        </member>
        <member name="F:ComLib.IO.IniParserSettings.MaxLenghtOfValueSingleLine">
            <summary>
            The maximum length of a value in a single line.
            </summary>
        </member>
        <member name="F:ComLib.IO.IniParserSettings.IsCaseSensitive">
            <summary>
            Whether or not the groups/keys are case-sensitive
            </summary>
        </member>
        <member name="T:ComLib.IO.IIniParser">
            <summary>
            Interface for an IniParser, This is a parser that supports
            parsing multiple lines for the values.
            e.g. 
            
            [post1]
            title: My first post
            description: " This is a ini parser that can handle
            parsing multiples lines for the value. "
            
            </summary>
        </member>
        <member name="M:ComLib.IO.IIniParser.Parse(System.String)">
            <summary>
            Parse the ini content.
            </summary>
            <param name="iniContent"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.IO.IIniParser.Settings">
            <summary>
            Settings for the parser.
            </summary>
        </member>
        <member name="P:ComLib.IO.IIniParser.Errors">
            <summary>
            List of errors
            </summary>
        </member>
        <member name="T:ComLib.IO.IniParser">
            <summary>
            Parser.
            Terms:
            1. Char - a single char whether it's space, doublequote, singlequote, etc.
            2. Token - a collection of chars that make up a valid word/word-boundary.
                e.g.
                1. abc, 
                2. -format:csv
                3. -file:"c:/my files/file1.txt"
                4. loc:'c:/my files/file1.txt'
                5. -format:csv
            </summary>
        </member>
        <member name="M:ComLib.IO.IniParser.#ctor">
            <summary>
            Create new instance with default settings
            </summary>
        </member>
        <member name="M:ComLib.IO.IniParser.Parse(System.String)">
            <summary>
            Parse the text and convert into list of params.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.IniParser.Init(System.String)">
            <summary>
            Initialize the reader and the stack.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ComLib.IO.IniParser.StoreGroup">
            <summary>
            Store the current group
            </summary>
        </member>
        <member name="M:ComLib.IO.IniParser.StoreKeyValue">
            <summary>
            Store the current key value.
            </summary>
        </member>
        <member name="M:ComLib.IO.IniParser.ValidateText">
            <summary>
            Confirm that the input text is valid text
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.IO.IniParser.Settings">
            <summary>
            The settings for the parser.
            </summary>
        </member>
        <member name="P:ComLib.IO.IniParser.Errors">
            <summary>
            List of errors.
            </summary>
        </member>
        <member name="T:ComLib.Calendars.Calendar">
            <summary>
            Provides static access to all the <see cref="T:ComLib.Calendars.ICalendar"/> functionality using the Holiday calendar service initialized.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.Calendar.Init(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32,System.Int32)">
            <summary>
            Initialize the Holiday calendar data provider and calendar code.
            </summary>
            <param name="calendarCode">"country='US', province='NewYork', ref='some value to indicate source'"</param>
            <param name="provider">The underlying holiday dates provider.</param>
            <param name="startYear">Used for initialization. Loads holidays from the starting year.</param>
            <param name="endYear">Used for initialization. Loads holidays up to the ending year.</param>
        </member>
        <member name="M:ComLib.Calendars.Calendar.IsHolidayDataAvailable(System.Int32)">
            <summary>
            Indicates if there is holiday data available for the
            specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.IsBusinessDay(System.DateTime)">
            <summary>
            Determine if the date is a business date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.Holidays(System.Int32)">
            <summary>
            Get the holidays for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.Weekends(System.Int32)">
            <summary>
            Get the weekends in the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.BusinessDays(System.Int32)">
            <summary>
            Get the business dates for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.NextBusinessDate(System.DateTime)">
            <summary>
            Get the next business date after the date supplied.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.PreviousBusinessDate(System.DateTime)">
            <summary>
            Get the last 
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.FirstBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the first business date of the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.FirstBusinessDateOfYear(System.Int32)">
            <summary>
            Get the first business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.LastBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the last business date fo the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.LastBusinessDateOfYear(System.Int32)">
            <summary>
            Get the last business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.Calendar.CalendarCode">
            <summary>
            Calendar code used to indentify which holiday calendar data source to use.
            e.g. "country='US', province='NewYork', ref='some value to indicate source'";
            </summary>
        </member>
        <member name="P:ComLib.Calendars.Calendar.HolidayProvider">
            <summary>
            Holiday data provider.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManagerDefaultLocalized">
            <summary>
            Localized error manager.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.ILocalizedExceptionManager">
            <summary>
            Localization based
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ILocalizedExceptionManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Converts all the <paramref name="args"/>
            to a string to put into the error.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="M:ComLib.Exceptions.ILocalizedExceptionManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception)">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
        </member>
        <member name="M:ComLib.Exceptions.ILocalizedExceptionManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerDefaultLocalized.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception)">
            <summary>
            Handles the error by added it it the validation errors, and logging it.
            </summary>
            <param name="errorDescriptor"></param>
            <param name="resources"></param>
            <param name="errors"></param>
            <param name="ex"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerDefaultLocalized.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception,System.String[])">
            <summary>
            Handle the error by formatting the error message first and then adding it
            to the validation errors. Then add it to the log.
            </summary>
            <param name="errorDescriptor"></param>
            <param name="resources"></param>
            <param name="errors"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerDefaultLocalized.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,System.Exception,System.String[])">
            <summary>
            Handles the error by added it it the validation errors, and logging it.
            </summary>
            <param name="errorDescriptor"></param>
            <param name="resources"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="T:ComLib.Diagnostics.IDiagnosticsService">
            <summary>
            Interface to be implemented by a diagnostics service.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.FilterOn(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Filter the diagnostics on the list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="groupNames">"MachineInfo,AppDomain,Drives"</param>
            <param name="include">Whether or the the groups supplied should be
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.FilterOn(System.Boolean,System.String)">
            <summary>
            Filter the diagnostics on the supplied comma delimited list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="groupNamesDelimited">"MachineInfo,AppDomain,Drives"</param>
            <param name="include">Whether or the the groups supplied should be
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.FilterOn(System.Boolean,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Filter the diagnostics on the supplied list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="include">Whether or the the groups supplied should be
            <param name="groups">Array with groups.</param>
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.GetData">
            <summary>
            Get all diagnostic information about currently running process
            and machine information.
            </summary>
            <returns>Diagnostic information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.GetDataTextual">
            <summary>
            Get all diagnostic information about currently running process
            and machine information.
            </summary>
            <returns>Diagnostic information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.WriteInfo(System.String)">
            <summary>
            Write all the diagnostic info to file.
            </summary>
            <param name="filePath">Path to file.</param>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.WriteInfo(System.String,System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="path">Path of file to write information to.</param>
            <param name="referenceMessage">Reference message.</param>
            <param name="commaDelimitedGroups">String with comma-delimited list of groups.</param>
        </member>
        <member name="M:ComLib.Diagnostics.IDiagnosticsService.WriteInfo(System.String,System.String,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="path">Path of file to write information to.</param>
            <param name="referenceMessage">Reference message.</param>
            <param name="groups">Array with groups.</param>
        </member>
        <member name="P:ComLib.Diagnostics.IDiagnosticsService.GroupNames">
            <summary>
            The names of the groups representing what can be diagnosed.
            </summary>
        </member>
        <member name="P:ComLib.Diagnostics.IDiagnosticsService.GroupNamesAll">
            <summary>
            The names of the groups representing what can be diagnosed.
            </summary>
        </member>
        <member name="T:ComLib.Data.RowMapperTableBased`1">
            <summary>
            Abstract class for mapping a DataTable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Data.RowMapperTableBased`1.MapRows(System.Data.DataTable)">
            <summary>
            Maps all the rows using DataTable.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.RowMappingContext`3">
            <summary>
            Context used when mapping a row.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRowId"></typeparam>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.IsRowIdStringBased">
            <summary>
            Just used for contextual information at the moment.
            </summary>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.Source">
            <summary>
            The Datasource. e.g. Xmldocument, Inidocument, Csvdocument.
            </summary>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.RowId">
            <summary>
            The Row id, either a sting, int or some other object.
            </summary>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.ValidationResults">
            <summary>
            Collect the errors during the mapping.
            </summary>
        </member>
        <member name="T:ComLib.Data.RowMapperContextual`3">
            <summary>
            Row Mapper with contextual information.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRowId"></typeparam>
        </member>
        <member name="M:ComLib.Data.RowMapperContextual`3.MapRows(ComLib.Data.RowMappingContext{`0,`1,`2})">
            <summary>
            Map rows with more extensive error capturing.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.RowMapperContextual`3.MapRow(ComLib.Data.RowMappingContext{`0,`1,`2})">
            <summary>
            Map row with more extensive error capturing.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.RowMapperHelper">
            <summary>
            Helper class for row mapping.
            </summary>
        </member>
        <member name="M:ComLib.Data.RowMapperHelper.MapRows``1(System.String,System.String,System.Func{System.Data.DataTable,System.Int32,``0},System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Maps all the rows using DataTable.
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="rowmapper"></param>
            <param name="onAfterRowsMapped"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.RowMapperHelper.MapRows``1(System.Data.DataTable,System.Func{System.Data.DataTable,System.Int32,``0},System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Maps all the rows using DataTable.
            </summary>
            <param name="table"></param>
            <param name="rowmapper"></param>
            <param name="onAfterRowsMapped"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.RowMapperHelper.MapRows``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,System.Int32,``0},System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Map all the rows to IList of objects T using DataReader
            </summary>
            <param name="reader"></param>
            <param name="rowmapper"></param>
            <param name="onAfterRowsMapped"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.RowMapperHelper.MapRows``1(System.String,System.String,System.Func{System.Data.IDataReader,System.Int32,``0},System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Map all the rows to IList of objects T using DataReader
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="rowmapper"></param>
            <param name="onAfterRowsMapped"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.DbExecute">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="M:ComLib.Data.DbExecute.Execute``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.String)">
            <summary>
            Execute a non-query with a single output value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper"></param>
            <param name="commandText">E.g. Storedprocedure : Posts_DeleteExpired</param>
            <param name="commandType">Type of the command.</param>
            <param name="outputParamName">The name of the output parameter. E.g. @TotalRows</param>
            <param name="dbParameters">Input parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DbExecute.Execute(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.String,System.Data.DbType,System.Object)">
            <summary>
            Execute a non-query with a single input parameter.
            </summary>
            <param name="dbHelper"></param>
            <param name="commandText">E.g. Storedprocedure : Posts_DeleteByUser</param>
            <param name="commandType">Type of the command.</param>
            <param name="paramName">E.g. "@UserName"</param>
            <param name="paramType">E.g. DbType.String</param>
            <param name="paramValue">E.g. "kreddy"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DbExecute.Execute(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.String[])">
            <summary>
            Executes the non-query and returns a dictionary of all the output parameters.
            </summary>
            <param name="dbHelper"></param>
            <param name="commandText">StoredProc : Posts_PerformActivation</param>
            <param name="commandType">StoredProc</param>
            <param name="dbParameters">Array of all input parameters to the proc.</param>
            <param name="outputParamNames">Array of output parameter names.
            e.g. "@TotalRecordsUpdated", @TotalProductTypesUpdated"</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.DictionaryBidirectional`2">
            <summary>
            Dictionary for bidirectional lookup.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.#ctor">
            <summary>
            Create new instance with empty bi-directional lookups.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`1,`0})">
            <summary>
            Initialize using existing forward and reverse lookups.
            </summary>
            <param name="forward"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Add(`0,`1)">
            <summary>
            Add to key/value for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.ContainsKey(`0)">
            <summary>
            Determine if the key is contain in the forward lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Remove(`0)">
            <summary>
            Remove the key for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value from the forward lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to bi-directional lookup.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Clear">
            <summary>
            Clears keys/value for bi-directional lookup.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine if the item is in the forward lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the array of key/value pairs for both bi-directionaly lookups.
            TO_DO: This needs to be unit-tested since, I don't think I'm handling
            the _reverseMap correctly.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the item from bi-directional lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.ContainsValue(`1)">
            <summary>
            Determine whether or not the reverse lookup contains the key
            represented by the value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.ContainsReverseLookup(`1)">
            <summary>
            Determine whether or the reverse lookup ( value ) exists.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.KeyFor(`1)">
            <summary>
            Determine whether or the reverse lookup ( value ) exists.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Keys">
            <summary>
            Get a list of all the keys in the forward lookup.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Values">
            <summary>
            Get the collection of values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Item(`0)">
            <summary>
            Set the key / value for bi-directional lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.IsReadOnly">
            <summary>
            Get whether or not this is read-only.
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionarySet`1">
            <summary>
            2 Level Tree like dictionary.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Add(`0,`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.TryGetValue(`0,`0@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Add(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Contains(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.CopyTo(System.Collections.Generic.KeyValuePair{`0,`0}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Remove(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Union(ComLib.Collections.ISet{`0})">
            <summary>
            Unions the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Intersect(ComLib.Collections.ISet{`0})">
            <summary>
            Intersects the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.ExclusiveOr(ComLib.Collections.ISet{`0})">
            <summary>
            Exclusives the or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Minus(ComLib.Collections.ISet{`0})">
            <summary>
            Minuses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeFile">
            <summary>
            Class to encapsulate a code file.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.CodeFile.Name">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.CodeFile.File">
            <summary>
            File information.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.CodeFile.QualifiedName">
            <summary>
            Qualified (alternate) name for file.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.CodeFile.Folder">
            <summary>
            Folder where file resides.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.CodeFile.OutputFolder">
            <summary>
            Output folder.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeFile.#ctor(System.String,System.IO.FileInfo,System.String,System.String)">
            <summary>
            Default class constructor.
            </summary>
            <param name="name">Name of file.</param>
            <param name="file">File information.</param>
            <param name="folder">Name of folder.</param>
            <param name="newName">Qualified name.</param>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderUtils">
            <summary>
            This class contains utility methods for code generation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderUtils.GetFiles(ComLib.Models.ModelContext,System.String,System.String)">
            <summary>
            Get the list of files to process.
            </summary>
            <param name="ctx"></param>
            <param name="inputPattern"></param>
            <param name="codeTemplateFolder"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderUtils.WriteFiles(System.Collections.Generic.Dictionary{System.String,ComLib.CodeGeneration.CodeFile},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Writes out generated files.
            </summary>
            <param name="templateFiles">Dictionary of files to generate.</param>
            <param name="subs">List of key/value pairs of substitutions.</param>
            <param name="codePath"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.TypeMap">
            <summary>
            Class to expose mapping between types of different data sources.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap.SqlServer">
            <summary>
            Key to use for getting sqlserver type map for .net types.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap.SqlClient">
            <summary>
            Key to use for getting sqlclient type map.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap.NetFormatToCSharp">
            <summary>
            .NET format types to csharp short names.
            e.g. Int32 to int.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap.NetFormatToCSharpType">
            <summary>
            .NET format types to csharp short names.
            e.g. System.Int32 to Type.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap._typeMaps">
            <summary>
            Dictionary with static type mappings.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.#cctor">
            <summary>
            Initialize basic datatypes.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.RegisterTypeMap(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Register a specific type map.
            </summary>
            <param name="mapName"></param>
            <param name="typeMap"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.RegisterDefaultTypeMaps">
            <summary>
            Registers the default type mappings for :
            1. .NET Types to Sql Server types.
            2. .NET typeof(Type).FullName to short names.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.Get``1(System.String,System.String)">
            <summary>
            Get a mapping and cast to specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.ContainsKey(System.String,System.String)">
            <summary>
            Return true of false if the specified key is the typemap associated with source.
            </summary>
            <param name="source">"sqlserver"</param>
            <param name="key">"Int32"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.IsBasicNetType(System.Type)">
            <summary>
            Is the type a basic datatype( int, bool, long, double, datetime, string )?
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CaptchaSupport.Captcha">
            <summary>
            This class provides a default Captcha implementation
            for web usage.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.Init(ComLib.CaptchaSupport.ICaptcha)">
            <summary>
            Initialize captcha provider.
            </summary>
            <param name="captcha"></param>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.GetRandomText">
            <summary>
            Get random text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.GetRandomTextEncoded">
            <summary>
            Get encoded random text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.IsCorrect">
            <summary>
            Determine if the current captcha is correct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.IsCorrect(System.String)">
            <summary>
            Determine if the current captcha is correct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.IsCorrect(System.String,System.String)">
            <summary>
            Determine if the current captcha is correct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.Generate">
            <summary>
            Create a new Captcha image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.GenerateFromUrl">
            <summary>
            Create a new Captcha image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.Generate(System.String)">
            <summary>
            Create a new captcha image using the random text supplied.
            </summary>
            <param name="randomText"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Caching.CacheSettings">
            <summary>
            Cache settings for the Cache instance.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.PrefixForCacheKeys">
            <summary>
            Used to prefix all the cache keys.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.UsePrefix">
            <summary>
            Indicates if using prefixes.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.DefaultCachePriority">
            <summary>
            Default cache item priority.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.DefaultSlidingExpirationEnabled">
            <summary>
            Default flag indicating if sliding expiration is enabled.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.DefaultTimeToLive">
            <summary>
            Default amount of time to keep item in cache.
            10 mins.
            </summary>
        </member>
        <member name="T:ComLib.Caching.CacheItemDescriptor">
            <summary>
            Descriptor class to describe/display the
            contents of an item in the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheItemDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initialize the read-only properties.
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:ComLib.Caching.CacheItemDescriptor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize the read-only properties.
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="serializedData"></param>
        </member>
        <member name="P:ComLib.Caching.CacheItemDescriptor.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheItemDescriptor.ItemType">
            <summary>
            CacheItemType
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheItemDescriptor.Data">
            <summary>
            Get the serialzied data.
            </summary>
        </member>
        <member name="T:ComLib.Automation.ScriptHelper">
            <summary>
            Contains helper methods for script
            </summary>
        </member>
        <member name="M:ComLib.Automation.ScriptHelper.LoadXml(System.String)">
            <summary>
            Tries to load the content as an xml document.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.CommandHelper">
            <summary>
            Helper class for commands.
            </summary>
        </member>
        <member name="M:ComLib.Automation.CommandHelper.BuildUnKnownCommandResult(System.String,System.Int32,System.String)">
            <summary>
            Builds a command result representing an unknown command
            </summary>
            <param name="name"></param>
            <param name="index"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.CommandHelper.BuildMethodCallNotSupportedResult(System.String,System.Int32)">
            <summary>
            Builds a command result representing an invalid command call with methods on a command that does not support methods
            </summary>
            <param name="name"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.Command">
            <summary>
            Base class for an individual command.
            </summary>
        </member>
        <member name="F:ComLib.Automation.Command._isScopeSupported">
            <summary>
            Whether or not scope is supported for the command which indicates to the script to enter into a new scope.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Command.InitScope(ComLib.Automation.Scope)">
            <summary>
            Initialize the scope for variables.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:ComLib.Automation.Command.Execute(ComLib.Automation.CommandContext)">
            <summary>
            Executes the command.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Command.Get``1(System.String)">
            <summary>
            Get variable value from either it's scope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Command.GetOrConvertTo``1(System.String)">
            <summary>
            Get either the value of the variable name supplied if it's a variable name or returns the value converted to the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">e.g. "firstname" will return value of variable named firstname. or "12" will return int 12.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Command.DoExecute(ComLib.Automation.CommandContext)">
            <summary>
            Execute the command.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Automation.Command.RefKey">
            <summary>
            Reference id used in scripts to uniquely refer to a specific command.
            This can be supplied in the script.
            </summary>
        </member>
        <member name="P:ComLib.Automation.Command.Script">
            <summary>
            The script this command is a part of.
            </summary>
        </member>
        <member name="P:ComLib.Automation.Command.IsScopeSupported">
            <summary>
            Whether or not scope is supported for the command which indicates to the script to enter into a new scope.
            </summary>
        </member>
        <member name="T:ComLib.Arguments.ArgsUsage">
            <summary>
            Arguments utility class.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildUsingReciever(System.Object)">
            <summary>
            Build a string showing what arguments are expected.
            This is done by inspecting the argattributes on all the
            properties of the supplied object.
            </summary>
            <param name="argsReciever"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildUsingReciever(System.Object,System.String,System.String)">
            <summary>
            Build a string showing what arguments are expected.
            This is done by inspecting the argattributes on all the
            properties of the supplied object.
            </summary>
            <param name="argsReciever"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute})">
            <summary>
            Build usage of the arguments.
            </summary>
            <param name="argsList"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(ComLib.Arguments.ArgsSchema)">
            <summary>
            Build usage of the arguments using the schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(System.String,System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.String,System.String)">
            <summary>
            Build descriptive usage showing arguments and sample runs.
            </summary>
            <param name="appName"></param>
            <param name="argAttributes"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildSampleRuns(System.String,System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.String,System.String)">
            <summary>
            Build a sample run.
            </summary>
            <param name="appName">Application name</param>
            <param name="argAttributes">List of args</param>
            <param name="prefix">Prefix used for the arguments</param>
            <param name="separator">Separator used between arg and it's value</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildSampleRuns(System.Collections.Generic.IList{System.String})">
            <summary>
            Build a sample runs using examples provided rather from the schema.
            </summary>
            <param name="examples"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildDescriptive(System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Build a string showing argument usage.
            </summary>
            <param name="argAttributes">The argument definitions.</param>
            <param name="examples">Examples of command line usage.</param>
            <param name="prefix">Prefix for the command line named args. e.g. "-"</param>
            <param name="separator">Separator for named args key/value pairs. e.g. ":".</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildArgs(System.Int32,System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.String,System.String)">
            <summary>
            Build the usage for arguments only.
            </summary>
            <param name="paddingLength"></param>
            <param name="argAttributes"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.Func{ComLib.Arguments.ArgAttribute,System.String})">
            <summary>
            Build a string showing what arguments are expected.
            This is done by inspecting the argattributes on all the
            properties of the supplied object.
            </summary>
            <param name="argAttributes"></param>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Show(System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.List{System.String})">
            <summary>
            Return a string that shows how this should be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.ShowUsingReciever(System.Object,System.String,System.String)">
            <summary>
            Show usage using reciever.
            </summary>
            <param name="reciever"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.ShowError(System.String)">
            <summary>
            Shows the error on the console.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ComLib.Arguments.ArgAttribute">
            <summary>
            Attribute to apply to properties of an object which can 
            recieve the argument values supplied to a program.
            This also describes named arguments.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Description">
            <summary>
            Describes the argument name.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.DataType">
            <summary>
            Date type of the argument.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IsCaseSensitive">
            <summary>
            Indicates if argument is case sensitive.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IsRequired">
            <summary>
            Indicates if is required.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IndexPosition">
            <summary>
            The index position of any un-named args.
            As in index 0 = a, 1 = b in "-config:Prod a b c"
            where a, b, c are unnamed arguments and -config:Prod is a named argument.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Interpret">
            <summary>
            Flag to indicate if this value should be interpreted.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IsUsedOnlyForDevelopment">
            <summary>
            Whether or not this is used only for development.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Example">
            <summary>
            Example value.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.ExampleMultiple">
            <summary>
            Example of mutliple various values.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Tag">
            <summary>
            Used to group various arguments.
            e.g. The tag can be used to separate base/derived argument defintions.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor">
            <summary>
            Allow initialize via named property initializers.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.String,System.String,System.String,System.Type,System.Boolean,System.Object,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name">The name of the argument</param>
            <param name="alias">A short alias for the argument</param>
            <param name="description">Description for the argument</param>
            <param name="dataType">The datatype for the argument</param>
            <param name="isRequired">Whether or not the argument is required</param>
            <param name="defaultValue">A default value</param>
            <param name="example">An example for the argument value</param>
            <param name="exampleMultiple">A string of multiple examples for the argument value</param>
            <param name="interpret">Whether or not the argument value can be interpreted</param>
            <param name="isCaseSensitive">Whether or not the argument is case sensitive</param>
            <param name="onlyForDevelopment">Whether or not the argument is for development purposes only</param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.Int32,System.String,System.Type,System.Boolean,System.Object,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize using description.
            </summary>
            <param name="indexPosition">Index position for the argument</param>
            <param name="description">Description for the argument</param>
            <param name="dataType">The datatype for the argument</param>
            <param name="isRequired">Whether or not the argument is required</param>
            <param name="defaultValue">A default value</param>
            <param name="example">An example for the argument value</param>
            <param name="exampleMultiple">A string of multiple examples for the argument value</param>
            <param name="interpret">Whether or not the argument value can be interpreted</param>
            <param name="isCaseSensitive">Whether or not the argument is case sensitive</param>
            <param name="onlyForDevelopment">Whether or not the argument is for development purposes only</param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.Init(System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Object,System.Boolean,System.String,System.String)">
            <summary>
            Initialize all the properties.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
            <param name="onlyForDevelopment"></param>
            <param name="example"></param>
            <param name="exampleMultiple"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.ToString">
            <summary>
            Build the usage for this argument.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.ArgAttribute.Name">
            <summary>
            Name of the argument.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgAttribute.NameLowered">
            <summary>
            The name in lowercase.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgAttribute.Alias">
            <summary>
            Short alias to represent the name.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgAttribute.AliasLowered">
            <summary>
            The alias in lowercase
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgAttribute.IsNamed">
            <summary>
            Whether or not this is a named arg as opposed to a position/index based argument.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgAttribute.IsAliased">
            <summary>
            Wehther or not the argument is aliased
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Errors">
            <summary>
            Example for the Errors extensions.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Errors.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Scripts">
            <summary>
            Example for the ScriptsSupport namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Scripts.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Lang.Variable">
            <summary>
            Represents a variable in the script
            </summary>
        </member>
        <member name="F:ComLib.Lang.Variable.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="F:ComLib.Lang.Variable.Value">
            <summary>
            Value of the variable
            </summary>
        </member>
        <member name="F:ComLib.Lang.Variable.DataType">
            <summary>
            Type of the variable
            </summary>
        </member>
        <member name="T:ComLib.Lang.LangException">
            <summary>
            Exception used in script parsing
            </summary>
        </member>
        <member name="F:ComLib.Lang.LangException.LineNumber">
            <summary>
            Line number of exception
            </summary>
        </member>
        <member name="F:ComLib.Lang.LangException.ScriptPath">
            <summary>
            The path to the script that caused the exception
            </summary>
        </member>
        <member name="F:ComLib.Lang.LangException.ErrorType">
            <summary>
            THe type of error.
            </summary>
        </member>
        <member name="F:ComLib.Lang.LangException.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:ComLib.Lang.LangException.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initialize
            </summary>
            <param name="errorType"></param>
            <param name="error"></param>
            <param name="scriptpath"></param>
            <param name="lineNumber"></param>
        </member>
        <member name="T:ComLib.FileHelper">
            <summary>
            This class provides various file helper methods.
            </summary>      
        </member>
        <member name="M:ComLib.FileHelper.GetOriginalExtension(System.String,System.String)">
            <summary>
            Gets the orginal extension from a renamed extension. e.g. file.xml.config return .xml instead of .config. file.xml returns .xml.
            </summary>
            <param name="path">/config/users.csv.config</param>
            <param name="appendedExtension">The extra extension appended to the file. e.g. ".config"</param>
            <returns>String with original extension.</returns>
        </member>
        <member name="M:ComLib.FileHelper.PrependText(System.String,System.IO.FileInfo)">
            <summary>
            Prepend some text to a file.
            </summary>
            <param name="text">Text to prepend to a file.</param>
            <param name="file">File where text will be prepended.</param>
        </member>
        <member name="M:ComLib.FileHelper.GetVersion(System.String)">
            <summary>
            Get the file version information.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>String with the file version.</returns>
        </member>
        <member name="M:ComLib.FileHelper.GetSizeInBytes(System.String)">
            <summary>
            Get file size in bytes.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>File size in bytes.</returns>
        </member>
        <member name="M:ComLib.FileHelper.GetSizeInKilo(System.String)">
            <summary>
            Get file size in kilobytes.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>File size in kilobytes.</returns>
        </member>
        <member name="M:ComLib.FileHelper.GetSizeInMegs(System.String)">
            <summary>
            Get file size in megs.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>File size in megabytes.</returns>
        </member>
        <member name="T:ComLib.DictionaryOrdered`2">
            <summary>
            This class implements an ordered dictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key.</typeparam>
            <typeparam name="TValue">Type of dictionary value.</typeparam>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.#ctor">
            <summary>
            Creates a new instance of this class
            without any key/value pairs.
            </summary>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.Add(`0,`1)">
            <summary>
            Add to key/value for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.ContainsKey(`0)">
            <summary>
            Determine if the key is contain in the forward lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.Remove(`0)">
            <summary>
            Remove the key from the ordered dictionary.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value from the forward lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to ordered lookup.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.Clear">
            <summary>
            Clears keys/value for bi-directional lookup.
            </summary>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine if the item is in the forward lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the array of key/value pairs for both ordered dictionary.
            TO_DO: This needs to implemented.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.Insert(System.Int32,`0,`1)">
            <summary>
            Insert key/value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.IndexOfKey(`0)">
            <summary>
            Get the index of the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.DictionaryOrdered`2.RemoveAt(System.Int32)">
            <summary>
            Remove the key/value item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:ComLib.DictionaryOrdered`2.Keys">
            <summary>
            Get a list of all the keys in the forward lookup.
            </summary>
        </member>
        <member name="P:ComLib.DictionaryOrdered`2.Values">
            <summary>
            Get the collection of values.
            </summary>
        </member>
        <member name="P:ComLib.DictionaryOrdered`2.Item(`0)">
            <summary>
            Set the key / value for bi-directional lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.DictionaryOrdered`2.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="P:ComLib.DictionaryOrdered`2.IsReadOnly">
            <summary>
            Get whether or not this is read-only.
            </summary>
        </member>
        <member name="P:ComLib.DictionaryOrdered`2.Item(System.Int32)">
            <summary>
            Get/set the value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Authentication.UserPrincipal">
            <summary>
            Custom prinical class with additional propertes to identity user.
            </summary>
        </member>
        <member name="F:ComLib.Authentication.UserPrincipal._empty">
            <summary>
            Empty/null value.
            </summary>
        </member>
        <member name="F:ComLib.Authentication.UserPrincipal._identity">
            <summary>
            The user identity used for authentication.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor">
            <summary>
            Create a new default instance.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor(System.Int32,System.String,System.String,System.Security.Principal.IIdentity)">
            <summary>
            Create new instance using supplied user information.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="userRolesDelimitedByComma"></param>
            <param name="identity"></param>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create new instance using supplied user information.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="userRolesDelimitedByComma"></param>
            <param name="authType"></param>
            <param name="isAuthenicated"></param>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor(System.Int32,System.String,System.String[],System.Security.Principal.IIdentity)">
            <summary>
            Create new instance using supplied user information.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="roles"></param>
            <param name="identity"></param>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.IsInRole(System.String)">
            <summary>
            Determines if this user is in the role supplied.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.Init(System.Int32,System.String,System.String[],System.Security.Principal.IIdentity)">
            <summary>
            Initializes this instance with the specified parameters.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="roles"></param>
            <param name="identity"></param>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Empty">
            <summary>
            Get the empty value.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Identity">
            <summary>
            Identity of the principal. 
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.UserId">
            <summary>
            Id of the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Name">
            <summary>
            Username.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Roles">
            <summary>
            Comma delimited string of users roles.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.ILocationService">
            <summary>
            Location service to parse locatiion data.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.Parse(System.String)">
            <summary>
            Parses string for either the zip or city/state.
            e.g.
                City:  "Bronx", "Stamford"
                State: "NY", "NJ", "California"
                CityState: "Queens,New York"
                Country: "USA"
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.CreateCity(System.String,System.String,System.String)">
            <summary>
            Create a city in the underlying datastore using the fields supplied
            </summary>
            <param name="name">Name of the city</param>
            <param name="state">Name of the state the city is in</param>
            <param name="country">Name of the country the city is in</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.CreateCountry(System.String)">
            <summary>
            Create a country with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.CreateCountry(System.String,System.String,System.Boolean)">
            <summary>
            Create the country using the name, alias.
            </summary>
            <param name="name">Country name</param>
            <param name="alias">Alias for the country</param>
            <param name="isAlias">Whether or not creating an alias.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.CreateState(System.String,System.String,System.String)">
            <summary>
            Create the state.
            </summary>
            <param name="name">Name of the state.</param>
            <param name="abbreviation">Abbreviation used for the state.</param>
            <param name="country">Name of the country this state belongs to.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.Country(System.String)">
            <summary>
            Get the country with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.StatesFor(System.String)">
            <summary>
            Get the states for the specified country
            </summary>
            <param name="countryname"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.CitiesFor(System.String,System.String)">
            <summary>
            Get the states for the specified country
            </summary>
            <param name="countryname"></param>
            <param name="states"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.Cities">
            <summary>
            Cities repository
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.States">
            <summary>
            States repository.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.Countries">
            <summary>
            Countries repository.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.CitiesLookup">
            <summary>
            Get the cities lookup
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.CitiesList">
            <summary>
            Get the city list.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.CountriesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.CountriesList">
            <summary>
            Get the country lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.StatesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.StatesList">
            <summary>
            Get the states list.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.ILocationService.Settings">
            <summary>
            Get the location settings.
            </summary>
        </member>
        <member name="T:ComLib.Scheduling.Tasks.TaskAttribute">
            <summary>
            Attribute used to define a widget.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Tasks.TaskAttribute.StartTime">
            <summary>
            The start time of the task
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Tasks.TaskAttribute.EndTime">
            <summary>
            End time of the task
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Tasks.TaskAttribute.Interval">
            <summary>
            Interval in seconds of the task
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Tasks.TaskAttribute.IsOnDemand">
            <summary>
            Whether or not this is on-demand.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Tasks.TaskAttribute.MaxIterations">
            <summary>
            Maximum number of times this can run.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Tasks.TaskAttribute.Repeat">
            <summary>
            Whether or not this can repeat.
            </summary>
        </member>
        <member name="T:ComLib.MediaSupport.MediaHelper">
            <summary>
            Helper class for checking media formats ( audio, video, image ).
            </summary>
        </member>
        <member name="M:ComLib.MediaSupport.MediaHelper.#cctor">
            <summary>
            Initialize the formats for audio, video, image.
            </summary>
        </member>
        <member name="M:ComLib.MediaSupport.MediaHelper.IsAudioFormat(System.String)">
            <summary>
            Whether or not the format supplied is an audio format.
            </summary>
            <param name="format">Name of format.</param>
            <returns>True if it's an audio format.</returns>
        </member>
        <member name="M:ComLib.MediaSupport.MediaHelper.IsVideoFormat(System.String)">
            <summary>
            Whether or not the format supplied is an audio format.
            </summary>
            <param name="format">Name of format.</param>
            <returns>True if it's a video format.</returns>
        </member>
        <member name="M:ComLib.MediaSupport.MediaHelper.IsImageFormat(System.String)">
            <summary>
            Whether or not the format supplied is an audio format.
            </summary>
            <param name="format">Name of format.</param>
            <returns>True if it's an image format.</returns>
        </member>
        <member name="T:ComLib.Entities.EntityCreationType">
            <summary>
            Specifies how to create the service for the entity.
            If set to IocWithNamingConvention names will have to be :
            1. Service      "(EntityName)Service"
            2. Repository   "(EntityName)Repository"
            3. Validator    "(EntityName)Valdiator"
            4. Controller   "(EntityName)Controller"
            5. Settings     "(EntityName)Settings"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityCreationType.IocWithNamingConvention">
            <summary>
            Ioc with naming convention.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityCreationType.Factory">
            <summary>
            Factory generation.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityRegistrationContext">
            <summary>
            This represents whether or not to create a Service/Repository/Validator
            and how to create it.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Name">
            <summary>
            The prefix used for naming all the various components in the DomainModel
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.ConnectionId">
            <summary>
            Id of the connection string to use.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.EntityType">
            <summary>
            The type of the entity.
            Post or CommonLibrary.NamedQuery
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.ActionContextType">
            <summary>
            Get the type of the context used for an entity service.
            e.g. type that extends IActionContext
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Service">
            <summary>
            Singleton service.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Repository">
            <summary>
            Singleton repository
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Validator">
            <summary>
            Validator for the entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Settings">
            <summary>
            The settings object for the type.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Resources">
            <summary>
            Resource strings for the object.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.FactoryMethodForService">
            <summary>
            Reference to the factory-like method for creating the entityService.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.FactoryMethodForRepository">
            <summary>
            Factory for the repository.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.FactoryMethodForValidator">
            <summary>
            Validator creator.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsSingletonService">
            <summary>
            Singleton service.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsSingletonRepository">
            <summary>
            Singleton repository.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsSingletonValidator">
            <summary>
            Singleton validator.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsRepositoryConfigurationRequired">
            <summary>
            Does the repository need to be configured w/ the connection?
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.CreationMethod">
            <summary>
            The approach used to create the components used in the ActiveRecord DomainModel.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnBeforeValidate">
            <summary>
            True if before validate callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnBeforeValidateCreate">
            <summary>
            True if before validate create callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnBeforeValidateUpdate">
            <summary>
            True if before validate update callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnBeforeCreate">
            <summary>
            True if before create callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnBeforeUpdate">
            <summary>
            True if before update callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnBeforeSave">
            <summary>
            True if before save callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnBeforeDelete">
            <summary>
            True if before delete callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterInitialize">
            <summary>
            True if before initialize callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterValidate">
            <summary>
            True if after validate callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterValidateCreate">
            <summary>
            True if after validate create callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterValidateUpdate">
            <summary>
            True if after validate update callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterCreate">
            <summary>
            True if after create callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterUpdate">
            <summary>
            True if after update callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterSave">
            <summary>
            True if after save callback exists.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.HasOnAfterDelete">
            <summary>
            True if after delete callback exists.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityRegistrationContext.#ctor">
            <summary>
            Allow default construction.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityRegistrationContext.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Entities.EntityRegistrationContext"/> class.
            </summary>
            <param name="entityName"></param>
            <param name="entityType"></param>
            <param name="contextType"></param>
        </member>
        <member name="P:ComLib.Entities.EntityRegistrationContext.IsExceptionThrownOnCrudFailure">
            <summary>
            Gets or sets a value indicating whether this instance is exception thrown.
            </summary>
            <value><c>true</c> if this instance is exception thrown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Entities.EntityRegistrationContext.IsEntityErrorCollectionPopulated">
            <summary>
            Gets or sets a value indicating whether this instance is entity error collection populated.
            </summary>
            <value><c>true</c> if this instance is entity error collection populated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Entities.EntityRegistrationContext.IsEntityErrorCollectionClearedBeforePopulation">
            <summary>
            Gets or sets a value indicating whether this instance is entity error collection cleared first.
            </summary>
            <value><c>true</c> if this instance is entity error collection cleared first; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComLib.Cryptography.ICrypto">
            <summary>
            Cryptography interface to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.ICrypto.Encrypt(System.String)">
            <summary>
            Encrypts a string.
            </summary>
            <param name="plaintext"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.ICrypto.Decrypt(System.String)">
            <summary>
            Decrypt the encrypted text.
            </summary>
            <param name="base64Text">The encrypted base64 text</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.ICrypto.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.ICrypto.Settings">
            <summary>
            Options for encryption.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigItem">
            <summary>
            An entity to represent the config item in a persistant store.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItem.Create``1(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create the config entry.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="app">Application name.</param>
            <param name="name">Config name</param>
            <param name="section">Section name.</param>
            <param name="key">Key name</param>
            <param name="val">Value</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItem.Update(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create the config entry.
            </summary>
            <param name="app">Application name.</param>
            <param name="name">Config name</param>
            <param name="section">Section name.</param>
            <param name="key">Key name</param>
            <param name="val">Value</param>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.App">
            <summary>
            Application name. 
            To associate config settings from a different application.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Name">
            <summary>
            Dev.config
            </summary> 
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Section">
            <summary>
            AppSettings
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Key">
            <summary>
            PageSize
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Val">
            <summary>
            15
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.ValType">
            <summary>
             Int | bool | double etc.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigItemRepository">
            <summary>
            Generic repository for persisting ConfigItem.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Entities.RepositorySql`1"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Entities.RepositorySql`1"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Entities.RepositorySql`1"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db">The helper.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize the rowmapper
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.Create(ComLib.Configuration.ConfigItem)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.Update(ComLib.Configuration.ConfigItem)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Configuration.ConfigItemRepository.ConfigItemRowMapper">
            <summary>
            RowMapper for ConfigItem.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigItemValidator">
            <summary>
            Validator for ConfigItem
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.DictionaryMultiValue`2">
            <summary>
            Dictionary based class to allow multiple values for a specific key.
            e.g. "searchsettings" = list{ setting1, setting2, setting3, .. settingN }
            where setting1 and setting2 both are associated with keys.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Get(`0)">
            <summary>
            Returns the entire list associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Add(`0,`1)">
            <summary>
            Add the key-value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Item(`0)">
            <summary>
            Returns the first of the multiple values associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionaryStringExtensions">
            <summary>
            Extensions to Non-Generic Dictionary
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetInt``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a int.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetBool``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a bool.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetString``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a string.
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetDouble``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a double.
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetDateTime``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a datetime.
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetLong``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a long.
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.CommandParameterAttribute">
            <summary>
            Attribute used to define a command class used in automation.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Location">
            <summary>
            Example for the LocationSupport namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Location.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Location.Init">
            <summary>
            Initialize with data.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Scheduler">
            <summary>
            Example for the Scheduling namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Scheduler.Init(System.Object)">
            <summary>
            initialize the completed status of tasks to false.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Samples.Example_Scheduler.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Scheduler.ShutDown">
            <summary>
            Shutdown dependent services.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Paging">
            <summary>
            Example for the Paging namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Paging.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.AutoMapper">
            <summary>
            Class to automatically map values from one source to another source.
            </summary>
        </member>
        <member name="F:ComLib.AutoMapper.DefaultSettings">
            <summary>
            Default settings
            </summary>
        </member>
        <member name="M:ComLib.AutoMapper.Map``1(System.Collections.IDictionary,``0)">
            <summary>
            Map item from IDictionary to the type supplied.
            </summary>
            <typeparam name="T">The type to map</typeparam>
            <param name="map">The dictionary of key/value pairs to map from</param>
            <param name="item">The destination object to map values to</param>
        </member>
        <member name="M:ComLib.AutoMapper.Map``1(System.Collections.IDictionary,``0,ComLib.AutoMapperSettings,System.Collections.Generic.IList{System.String})">
            <summary>
            Map item from IDictionary to the type supplied using the settings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="item"></param>
            <param name="settings"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.AutoMapper.Map``1(System.Xml.XmlNode,``0,ComLib.AutoMapperSettings,System.Collections.Generic.IList{System.String})">
            <summary>
            Map item from IDictionary to the type supplied using the settings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="item"></param>
            <param name="settings"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LexSettings">
            <summary>
            Settings for Lex parser.
            </summary>
        </member>
        <member name="F:ComLib.LexSettings.QuotesChars">
            <summary>
            Tokens used to enclose other tokens.
            </summary>
        </member>
        <member name="F:ComLib.LexSettings.EscapeChar">
            <summary>
            Escape char
            </summary>
        </member>
        <member name="F:ComLib.LexSettings.WhiteSpaceChars">
            <summary>
            Chars used as white space.
            </summary>
        </member>
        <member name="F:ComLib.LexSettings.EolChars">
            <summary>
            New line tokens.
            </summary>
        </member>
        <member name="T:ComLib.Lang.ForLoopStatement">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.ForLoopStatement.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Lang.ForLoopStatement.#ctor(ComLib.Lang.Statement,ComLib.Lang.Expression,ComLib.Lang.Statement)">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopStatement.Start">
            <summary>
            Start statement.
            </summary>
        </member>
        <member name="F:ComLib.Lang.ForLoopStatement.Increment">
            <summary>
            Increment statement.
            </summary>
        </member>
        <member name="M:ComLib.Lang.ForLoopStatement.Execute">
            <summary>
            Execute each expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.ExpressionHelper">
            <summary>
            This class provides helper expression methods.
            </summary>
        </member>
        <member name="M:ComLib.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExpressionHelper.GetPropertyName(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExpressionHelper.GetPropertyNameAndValue(System.Linq.Expressions.Expression{System.Func{System.Object}},System.String@)">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <param name="exp"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExpressionHelper.Build``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
        </member>
        <member name="M:ComLib.RepositoryExpressionTypeHelper.GetText(System.Linq.Expressions.ExpressionType)">
            <summary>
            Get the sql text equivalent of the expression type.
            </summary>
            <param name="expType"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.ScriptsSupport.Script">
            <summary>
            Script object
            </summary>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.Script.#ctor">
            <summary>
            Default
            </summary>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.Script.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initalize 
            </summary>
            <param name="name">Script name.</param>
            <param name="url">Script URL.</param>
            <param name="dependsOn">Script dependency.</param>
            <param name="version">Script version.</param>
        </member>
        <member name="F:ComLib.Web.ScriptsSupport.Script.Name">
            <summary>
            Name of the script.
            </summary>
        </member>
        <member name="F:ComLib.Web.ScriptsSupport.Script.Url">
            <summary>
            Url of the script.
            </summary>
        </member>
        <member name="F:ComLib.Web.ScriptsSupport.Script.Version">
            <summary>
            Version of the script.
            </summary>
        </member>
        <member name="F:ComLib.Web.ScriptsSupport.Script.DependsOn">
            <summary>
            The other scripts this depends on.
            </summary>
        </member>
        <member name="F:ComLib.Web.ScriptsSupport.Script.Tag">
            <summary>
            The html tag.
            </summary>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.CssHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.#cctor">
            <summary>
            Static initialization.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.Init(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Set the configuration settings as an IDictionary.
            </summary>
            <param name="sectionname">Section name</param>
            <param name="useSection">Whether or not to use the section name.</param>
            <param name="config">Configuration settings.</param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.GetFile(System.String)">
            <summary>
            Get the css file.
            </summary>
            <param name="fileName">CSS file.</param>
            <returns>CSS file.</returns>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.RemoveWhitespace(System.String)">
            <summary>
            Removes whitespace from .css file.
            </summary>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.ImageHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.#cctor">
            <summary>
            Static initialization.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.Init(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Set the configuration settings as an IDictionary.
            </summary>
            <param name="sectionname">Section name</param>
            <param name="useSection">Whether or not to use the section name.</param>
            <param name="config">Configuration settings.</param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.InitExternalHandler(System.Func{System.Web.HttpContext,System.Boolean},System.Action{System.Web.HttpContext})">
            <summary>
            Initialize the external handler.
            </summary>
            <param name="externalImageHandlerCheck">Image handler check method.</param>
            <param name="externalImageHandler">Image handler.</param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Handle the request for the image file.
            </summary>
            <param name="context">Http context.</param>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.ImageHandler.EnableLogging">
            <summary>
            Enable logging.
            </summary>
        </member>
        <member name="T:ComLib.Subs.ISubstitutionService">
            <summary>
            This interface must be implemented by classes
            that want to provide a substitution service.
            </summary>
        </member>
        <member name="M:ComLib.Subs.ISubstitutionService.Register(System.String,System.Collections.Generic.IDictionary{System.String,System.Func{System.String,System.String}})">
            <summary>
            Register a custom substitution for a group.
            </summary>
            <param name="group">Substitution group.</param>
            <param name="interpretedVals">Substitution to register.</param>
        </member>
        <member name="M:ComLib.Subs.ISubstitutionService.Substitute(System.Collections.Generic.List{System.String})">
            <summary>
            Performs substitutions on all strings contained in the list.
            </summary>
            <param name="names">List with strings for substitution.</param>
        </member>
        <member name="P:ComLib.Subs.ISubstitutionService.Item(System.String)">
            <summary>
            Get the interpreted value of the function call.
            </summary>
            <param name="funcCall">Function call to use.</param>
            <returns>Interpreted value.</returns>
        </member>
        <member name="T:ComLib.Scheduling.Scheduler">
            <summary>
            This class implements a task scheduler.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Schedule(System.String,ComLib.Scheduling.Trigger,System.Boolean,System.Action)">
            <summary>
            Schedules the specified task via a delegate.
            </summary>
            <param name="name">Task name.</param>
            <param name="trigger">Task trigger.</param>
            <param name="start">True to start task.</param>
            <param name="methodToExecute">Action to execute.</param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Schedule(System.String,ComLib.Scheduling.Trigger,System.Action)">
            <summary>
            Schedules the specified task via a delegate.
            </summary>
            <param name="name">Task name.</param>
            <param name="trigger">Task trigger.</param>
            <param name="methodToExecute">Action to execute.</param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Schedule(System.String,ComLib.Scheduling.Trigger,System.Action,System.Action{ComLib.Scheduling.Task})">
            <summary>
            Schedules the specified task via a lamda and also get notification when it completes.
            </summary>
            <param name="name">Task name.</param>
            <param name="trigger">Task trigger.</param>
            <param name="methodToExecute">Action to execute.</param>
            <param name="onCompletedAction">Action to execute on task completion.</param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Pause(System.String)">
            <summary>
            Pauses the task.
            </summary>
            <param name="name">Name of task to pause.</param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Run(System.String)">
            <summary>
            Run the task.
            </summary>
            <param name="name">Name of task to run.</param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Resume(System.String)">
            <summary>
            Resumes the task.
            </summary>
            <param name="name">Name of task to resume.</param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Delete(System.String)">
            <summary>
            Delete task.
            </summary>
            <param name="name">Name of task to delete.</param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.GetNames">
            <summary>
            Gets all the active tasks in the schedule.
            BUG: Currently does not return the task name that are associated 
            with the group name.
            </summary>
            <returns>Array with active task names.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.PauseAll">
            <summary>
            Pause all tasks.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.ResumeAll">
            <summary>
            Resume all tasks.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.GetStatuses">
            <summary>
            return a list of all the statuses of all tasks.
            </summary>
            <returns>List with statuses of all tasks.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.GetStatus(System.String)">
            <summary>
            Get the status of the task specified by name.
            </summary>
            <param name="name">Name of task.</param>
            <returns>Task status.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.ShutDown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Scheduler.IsStarted">
            <summary>
            Is started.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Scheduler.IsShutDown">
            <summary>
            Is shut down.
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositoryExtensions">
            <summary>
            This class provides helper methods for the Repository namespace.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryExtensions.Get``2(ComLib.Entities.IRepository{``0},System.Int32,System.String)">
            <summary>
            Gets the specified entity and loads the TRelation. Defaults the foreign key to typeof(TRelation).Name + Id.
            Defaults the Property name to typeof(TRelation).
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <typeparam name="TRelation">The type of the relation.</typeparam>
            <param name="repo">The repo.</param>
            <param name="id">The id.</param>
            <param name="foreignKey">The foreign key.</param>
            <returns>Specified entity.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryExtensions.Get``2(ComLib.Entities.IRepository{``0},System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the specified entity and loads the 1-to-Many TRelation. Defaults the foreign key to typeof(TRelation).Name + Id.
            Defaults the Property name to typeof(TRelation)"s".
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <typeparam name="TRelation">The type of the relation.</typeparam>
            <param name="repo">The repo.</param>
            <param name="id">The id.</param>
            <param name="foreignKey">The foreign key.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Specified entity.</returns>
        </member>
        <member name="T:ComLib.Data.IQuery`1">
            <summary>
            Interface for query.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.IQuery">
            <summary>
            Interface to be implemented by query providers.
            </summary>
        </member>
        <member name="M:ComLib.Data.IQuery.AddCondition(System.String,System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Adds a new AND condition to the query.
            </summary>
            <param name="field">Conditional field.</param>
            <param name="comparison">Comparison expression.</param>
            <param name="val">Value to check against.</param>
        </member>
        <member name="M:ComLib.Data.IQuery.Complete">
            <summary>
            Completes this condition construction.
            </summary>
        </member>
        <member name="P:ComLib.Data.IQuery.Data">
            <summary>
            Get/set the query information.
            </summary>
        </member>
        <member name="P:ComLib.Data.IQuery.Builder">
            <summary>
            Get/set the query builder.
            </summary>
        </member>
        <member name="M:ComLib.Data.IQuery`1.AddCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Adds a condition to the query.
            </summary>
            <param name="exp">Expression to extract field name.</param>
            <param name="comparison">Comparison expression.</param>
            <param name="val">Value to compare against.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Adds columns to a select statement.
            </summary>
            <param name="colExpressions">Expressions to retrieve column names.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds a WHERE clause to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an AND condition to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an OR condition to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an Order-By clause to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds a descending order clause to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Select(System.String[])">
            <summary>
            Adds columns to a select statement.
            </summary>
            <param name="cols">Array with columns to add.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Select(System.String)">
            <summary>
            Adds a column to a select statement.
            </summary>
            <param name="field">Name of field to add.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.As(System.String)">
            <summary>
            Adds an AS clause to the query.
            </summary>
            <param name="alias">Alias to use.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.From(System.String)">
            <summary>
            Designates the table to operate on.
            </summary>
            <param name="tableName">Name of table.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Where(System.String)">
            <summary>
            Adds a WHERE condition to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.And(System.String)">
            <summary>
            Adds an AND operation to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Or(System.String)">
            <summary>
            Adds an OR operation to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.In``1(System.Object[])">
            <summary>
            Adds an IN condition to the query.
            </summary>
            <typeparam name="TParam">Type of parameter.</typeparam>
            <param name="vals">Array with values to check for.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.NotIn``1(System.Object[])">
            <summary>
            Adds a NOT-IN condition to the query.
            </summary>
            <typeparam name="TParam">Type of parameter.</typeparam>
            <param name="vals">Array with values to check for.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Null">
            <summary>
            Adds a null comparison condition to the query.
            </summary>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.NotNull">
            <summary>
            Adds a not-null comparison condition to the query.
            </summary>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Like(System.String)">
            <summary>
            Adds a LIKE condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Like(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a LIKE condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <param name="addWildcardPrefix">True to add a wildcard prefix.</param>
            <param name="addWildcardSuffix">True to add a wildcard suffix.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Is(System.Object)">
            <summary>
            Adds an equality condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Not(System.Object)">
            <summary>
            Adds an inequality condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.LessThan(System.Object)">
            <summary>
            Adds a less-than comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.LessEqual(System.Object)">
            <summary>
            Adds a less-or-equal-than comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.MoreThan(System.Object)">
            <summary>
            Adds a greater-than comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.MoreEqual(System.Object)">
            <summary>
            Adds a greater-or-equal comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.OrderBy(System.String)">
            <summary>
            Adds an ascending order-by clause to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>this instance.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.OrderByDescending(System.String)">
            <summary>
            Adds a descending order-by clause to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.Limit(System.Int32)">
            <summary>
            Limits the query result to a number of records.
            </summary>
            <param name="maxRecords">Number of records to limit.</param>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="M:ComLib.Data.IQuery`1.End">
            <summary>
            Completes the query.
            </summary>
            <returns>Instance of implementation class used.</returns>
        </member>
        <member name="T:ComLib.Data.IQueryBuilder">
            <summary>
            Interface to be implemented by query builder implementors.
            </summary>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.Build">
            <summary>
            Builds the full markup for the criteria provided.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.Build(System.String)">
            <summary>
            Builds the full markup fro the criteria provided using the from source supplied.
            </summary>
            <param name="from">From.</param>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildSelect">
            <summary>
            Builds only the "select fields" markup.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildSelect(System.Boolean)">
            <summary>
            Builds only the select fields marketup with conditional flag indicating whether or not
            to include the markup's select statement.
            </summary>
            <param name="includeSelect">if set to <c>true</c> [include select statement].</param>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildLimit">
            <summary>
            Builds the limit.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildConditions">
            <summary>
            Builds the conditions.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildConditions(System.Boolean)">
            <summary>
            Builds the conditions.
            </summary>
            <param name="includeWhere">if set to <c>true</c> [include where].</param>
            <returns>String with created conditions.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildConditionsAndOrdering(System.Boolean,System.Boolean)">
            <summary>
            Builds the conditions.
            </summary>
            <param name="includeWhere">True to include WHERE clause.</param>
            <param name="includeOrderBy">True to include ORDER-BY clause.</param>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildOrderBy">
            <summary>
            Builds the order by.
            </summary>
            <returns>String with created order-by.</returns>
        </member>
        <member name="M:ComLib.Data.IQueryBuilder.BuildOrderBy(System.Boolean)">
            <summary>
            Builds the order by.
            </summary>
            <param name="includeOrderBy">if set to <c>true</c> [include order by].</param>
            <returns>String with created order-by.</returns>
        </member>
        <member name="P:ComLib.Data.IQueryBuilder.Criteria">
            <summary>
            The criteria API.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationContext">
            <summary>
            Notification context.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationContext.Values">
            <summary>
            Values.
            These are used to replace the place holders in the template files.
            e.g.
            key = "message.to" replaces "${message.to}" 
            in the template file with the value associated with "message.to" 
            in this dictionary.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationContext.#ctor">
            <summary>
            Allow default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialize using supplied values.
            </summary>
            <param name="values">Dictionary with values to use for initialization.</param>
        </member>
        <member name="T:ComLib.Maps.GeoAddressViewModel">
            <summary>
            View model for a GeoAddress.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.Maps.GeoAddress,ComLib.Maps.GeoProvider,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="address">The address.</param>
            <param name="provider">The provider.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.LocationSupport.Address,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="providerName">Name of provider.</param>
            <param name="providerSourceUrl">Source url of provider.</param>
            <param name="providerApiKey">API key of provider.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.LocationSupport.Address,ComLib.Maps.GeoProvider,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="provider">The provider.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.LocationSupport.Address,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.Init(ComLib.Maps.GeoAddress,ComLib.Maps.GeoProvider,System.Int32,System.Int32)">
            <summary>
            Inits with the data supplied.
            </summary>
            <param name="address">The address.</param>
            <param name="provider">The provider.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Provider">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Width">
            <summary>
            Gets or sets the width in pixels to show the map.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Height">
            <summary>
            Gets or sets the height in pixels to show the map.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:ComLib.Maps.GeoProvider">
            <summary>
            The geo provider to use.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoProvider.Init(ComLib.Maps.GeoProvider)">
            <summary>
            Inits the current geoprovider with the one specified.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.Name">
            <summary>
            Gets or sets the provider "bing" | "google"
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.SourceUrl">
            <summary>
            Gets or sets the provider http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.ApiKey">
            <summary>
            Api key used for provider
            </summary>
        </member>
        <member name="T:ComLib.Maps.GeoAddress">
            <summary>
            GeoAddress, can be either address based or Latitude/Longitude based.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddress"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddress"/> class.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.IsAddressBased">
            <summary>
            Gets or sets a value indicating whether this instance is address based.
            </summary>
            <value>
            	<c>true</c> if this instance is address based; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.FullAddress">
            <summary>
            Gets the full address.
            </summary>
            <value>The full address.</value>
        </member>
        <member name="T:ComLib.MapperSupport.MapperXml`1">
            <summary>
            Mapper for sourcing data from Ini files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.MapperSupport.MapperXml`1.Map(System.Object,ComLib.IErrors)">
            <summary>
            Map the objects.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperXml`1.Map(ComLib.IErrors)">
            <summary>
            Map the ini file
            </summary>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperXml`1.MapFromFile(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="filepath"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperXml`1.MapFromText(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="content"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.MapperSupport.MapperXml`1.SupportedFormat">
            <summary>
            Get the supported format of the data source.
            </summary>
        </member>
        <member name="T:ComLib.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for dictionaries.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.ConvertTo``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.IDictionary,System.String)">
            <summary>
            Get typed value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.GetOrDefault``1(System.Collections.IDictionary,System.String,``0)">
            <summary>
            Get using default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Get section key value.
            </summary>
            <param name="d"></param>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Get typed section key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.GetOrDefault``1(System.Collections.IDictionary,System.String,System.String,``0)">
            <summary>
            Get section/key value if present, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Section(System.Collections.IDictionary,System.String)">
            <summary>
            Get a IDictionary.
            </summary>
            <param name="d"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Contains(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Whether the section/key is there.
            </summary>
            <param name="d"></param>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Get typed value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.GetOrDefault``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Get using default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Get section key value.
            </summary>
            <param name="d"></param>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Get typed section key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,``0)">
            <summary>
            Get section/key value if present, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.GetSection(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Get a IDictionary.
            </summary>
            <param name="d"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Contains(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Whether the section/key is there.
            </summary>
            <param name="d"></param>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Extensions.DecimalExtensions">
            <summary>
            Collection of utility extension methods related to the decimal data
            type.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.DecimalExtensions.DigitAtPosition(System.Decimal,System.Int32)">
            <summary>
            Method that finds a digit at an arbirary position of a decimal.
            <param name="number">The number.</param>
            <param name="position">The position of the digit to the right of the decimal (1-n).</param>
            <returns>Digit at position</returns>
            <example>
            var number = 1.2459m;
            var digit = number.DigitAtPosition(3); // value is 5
            </example>
            <remarks>See also http://stackoverflow.com/questions/2923510/what-is-the-best-way-to-find-the-digit-at-n-position-in-a-decimal-number/2924042#2924042. </remarks>
            </summary>
        </member>
        <member name="M:ComLib.Extensions.DecimalExtensions.Pow(System.Decimal,System.Decimal)">
            <summary>
            Returns a specified decimal number to a specified power. This method
            performs slower than the Math.Pow() method, but in some circumstances
            it is more accurate.
            </summary>
            <param name="number">A decimal number to be raised to a power</param>
            <param name="exponent">A decimal number that specifies a power</param>
            <returns>The exponential value of the base number</returns>
        </member>
        <member name="T:ComLib.Entities.Management.EntityServiceContext">
            <summary>
            Context information for performing CRUD operations at the Service <see cref="T:ComLib.Entities.EntityService`1"/>
            level on any Domain Entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceContext.EntityName">
            <summary>
            The fully-qualified name of the entity on which the action is being performed on.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceContext.PropValues">
            <summary>
            List of key/value pairs corresponding the properties on the Entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Management.EntityServiceContext.#ctor(System.String,System.Int32)">
            <summary>
            Store the id and/or entityName.
            </summary>
            <param name="entityName"></param>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityServiceContext.#ctor(System.Type,System.Int32,System.Object)">
            <summary>
            Store the id and/or entityName.
            </summary>
            <param name="entityType"></param>
            <param name="id"></param>
            <param name="entity"></param>
        </member>
        <member name="T:ComLib.Entities.Management.EntityManager">
            <summary>
            Generic Reference data service to provide 
            1. Creation
            2. Retrieve
            3. Update
            4. Deletion
            
            operations to Reference data entities, such as 
            1. category
            2. state
            3. country
            4. location short names
            5. cities.
            
            </summary>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.#ctor">
            <summary>
            Initialize the mappings to the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Create(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Update the specific entity with property values specified.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Create(ComLib.Entities.Entity)">
            <summary>
            Create the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.GetAll(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Retrieves all the reference data records associated with the
            specified entity
            </summary>
            <param name="ctx"></param>
            <returns>DataTable containing all entity records and all properties of the entity</returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Get(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Retrieve the entity with the specified id, given the entityType
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Update(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Update the specific entity with property values specified.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Update(ComLib.Entities.Entity)">
            <summary>
            Update the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Delete(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Delete the specific entity with the id.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Delete(ComLib.Entities.Entity)">
            <summary>
            Delete the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Save(ComLib.Entities.Entity)">
            <summary>
            Save the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.Management.EntityManager.Instance">
            <summary>
            Get singleton instance.
            </summary>
        </member>
        <member name="P:ComLib.Entities.Management.EntityManager.Settings">
            <summary>
            Settings for the entity service.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceDynamic">
            <summary>
            Config source dynamicall saves all properties that are in this or sub-classed type.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initialize with the reference to source path.
            </summary>
            <param name="appName">E.g. "MyWebApp"</param>
            <param name="configName">E.g. "Dev.config"</param>
            <param name="sourcePath">File path or connectionstring</param>
            <param name="isSourcePathFileBased">Whether or not the source path is a file path or database connection string.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor(System.String,System.String,ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem})">
            <summary>
            Initialize w/ lamda factory method for creating the configSourcePersistant
            </summary>
            <param name="appName">E.g. "MyWebApp"</param>
            <param name="configName">E.g. "Dev.config"</param>
            <param name="configRepo"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor(System.String,System.String,System.Func{ComLib.IConfigSource})">
            <summary>
            Initialize w/ lamda factory method for creating the configSourcePersistant
            </summary>
            <param name="appName">E.g. "MyWebApp"</param>
            <param name="configName">E.g. "Dev.config"</param>
            <param name="configStoreFactoryMethod"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Init">
            <summary>
            Called after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.SetRepository(System.Func{ComLib.IConfigSource},ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem})">
            <summary>
            On initialize called after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Init(System.String,System.String,System.Func{ComLib.IConfigSource},ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem})">
            <summary>
            On initialize called after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Load">
            <summary>
            Load the settings from the datastore.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Load(System.Object)">
            <summary>
            Load the settings from the datastore.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Save">
            <summary>
            Save the settings to the datastore.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Save(System.Object)">
            <summary>
            Save the config settings object provided to the datasource.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.OnBeforeLoad">
            <summary>
            Event fired before load.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.OnLoad(System.Object)">
            <summary>
            Event fired on load.
            </summary>
            <param name="config">Config to load.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.OnAfterLoad">
            <summary>
            Event fired after load.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.OnBeforeSave">
            <summary>
            Event fired before save.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.OnSave(System.Object)">
            <summary>
            Event fired on save.
            </summary>
            <param name="config">Config to use.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.OnAfterSave">
            <summary>
            Event fired on save.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Execute(System.Action)">
            <summary>
            Execute the action in try catch.
            </summary>
            <param name="action"></param>
        </member>
        <member name="E:ComLib.Configuration.ConfigSourceDynamic.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.Storage">
            <summary>
            Get the underlying storage.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.SourcePath">
            <summary>
            The source file path.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.AppName">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.ConfigName">
            <summary>
            Config name
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.ExcludedProps">
            <summary>
            List of all the props that should be excluded during load/save.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.IncludedProps">
            <summary>
            Dictionary of all the props that should be included during load/save.
            </summary>
        </member>
        <member name="T:ComLib.BootStrapSupport.Task">
            <summary>
            Task class.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Name">
            <summary>
            Name of the task.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Group">
            <summary>
            Group the task belongs to.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Priority">
            <summary>
            Priority of the task.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Action">
            <summary>
            Action that the task runs.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.IsEnabled">
            <summary>
            Whether or not the task is enabled.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.ContinueOnError">
            <summary>
            Whether or not the task should continue if there is an error.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.ExecutedOn">
            <summary>
            Time the task was run
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Success">
            <summary>
            Whether or not the task was successful.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Message">
            <summary>
            Error or message of the task.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Error">
            <summary>
            Exception that occurred for the task.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.Task.Status">
            <summary>
            Get the status of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.BootStrapSupport.Task.Importance">
            <summary>
            Priority for ToDo items.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Importance.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Importance.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Importance.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="F:ComLib.BootStrapSupport.Task.Importance.Critical">
            <summary>
            Critical priority.
            </summary>
        </member>
        <member name="T:ComLib.BootStrapSupport.BootTask">
            <summary>
            BootTask with fluent API.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootTask.Named(System.String)">
            <summary>
            Sets the name of the task.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootTask.InGroup(System.String)">
            <summary>
            Set the group of the task.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootTask.MustSucceed">
            <summary>
            Sets flag indicating task Must succeed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootTask.CanFail">
            <summary>
            Sets flag indicating task can fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootTask.ActionIs(System.Action{ComLib.BootStrapSupport.IAppContext})">
            <summary>
            Sets the action of the task
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootTask.If(System.Boolean)">
            <summary>
            Enables this task if the flag is true.
            </summary>
            <param name="isEnabled"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootTask.PriorityHigh">
            <summary>
            Sets the priority high.
            </summary>
            <value>The priority high.</value>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootTask.PriorityLow">
            <summary>
            Sets the priority low.
            </summary>
            <value>The priority low.</value>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootTask.PriorityNormal">
            <summary>
            Sets priority normal.
            </summary>
            <value>The priority normal.</value>
        </member>
        <member name="T:ComLib.Automation.Scope">
            <summary>
            Used to store local variables.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Scope.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Automation.Scope.Contains(System.String)">
            <summary>
            Whether or not the scope contains the supplied variable name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Scope.Get``1(System.String)">
            <summary>
            Get the variable value associated with name from the scope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the varibale to get</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.Scope.SetValue(System.String,System.Object)">
            <summary>
            Sets a value into the current scope.
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Automation.Scope.Push">
            <summary>
            Push another scope into the script.
            </summary>
        </member>
        <member name="M:ComLib.Automation.Scope.Pop">
            <summary>
            Remove the current scope from the script.
            </summary>
        </member>
        <member name="P:ComLib.Automation.Scope.Item(System.String)">
            <summary>
            Get the variable from the current scope.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Application.AppDecorator">
            <summary>
            Base class for the Batch application.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.#ctor(System.String,ComLib.Application.IApp)">
            <summary>
            Initialize the underlying instance.
            </summary>
            <param name="delimitedDecorators"></param>
            <param name="instance"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.InitDecorations">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ShowOptions">
            <summary>
            The command line options.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Accept(System.String[])">
            <summary>
            Accept args.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.AcceptArgs(System.String[])">
            <summary>
            Accept arguments.
            </summary>
            <param name="args">Command line args.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.AcceptArgs(System.String[],System.String,System.String)">
            <summary>
            Accept arguments.
            </summary>
            <param name="args">e.g. -env:Prod -batchsize:100</param>
            <param name="prefix">-</param>
            <param name="separator">:</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Init">
            <summary>
            Initialize application.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Init(System.Object)">
            <summary>
            Initialize 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.InitComplete">
            <summary>
            Initialization complete.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Execute">
            <summary>
            Execute the core logic.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Execute(System.Object)">
            <summary>
            Execute the core logic.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ExecuteComplete">
            <summary>
            Execute Complete.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ShutDown">
            <summary>
            Shutdown.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Notify">
            <summary>
            Send emails only if the decoration is enabled.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Notify(System.Collections.IDictionary)">
            <summary>
            Notify using the message supplied.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.DisplayStart">
            <summary>
            Display start.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.DisplayEnd">
            <summary>
            Display end.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ExecuteInternal(System.Func{ComLib.BoolMessageItem})">
            <summary>
            Executes the application.execute method via a lamda and logs the success/failure.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.RunDiagnostics">
            <summary>
            Run Diagnostics.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ShutdownServices">
            <summary>
            Shutdown various Services.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Options">
            <summary>
            Get all the options that are supported.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.OptionsExamples">
            <summary>
            Get examples of the command line options.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Conf">
            <summary>
            The config source for the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Log">
            <summary>
            The logger for the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Result">
            <summary>
            Result of the execution.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Emailer">
            <summary>
            The Emailer for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Settings">
            <summary>
            Application Settings
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.StartTime">
            <summary>
            Start time of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Name">
            <summary>
            Application name from either the settings or this.GetType().
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Description">
            <summary>
            Get the application description.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Version">
            <summary>
            Get the version of this application.
            </summary>
        </member>
        <member name="T:ComLib.Account.UserRepository">
            <summary>
            Generic repository for persisting User.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance using connection string supplied.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance using a connection info.
            </summary>
            <param name="connectionInfo">The connection info.</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance using a connection info and database helper.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db">The helper.</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Set the rowmapper
            </summary>
            <param name="connectionInfo">connection info</param>
            <param name="db">database helper</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.Create(ComLib.Account.User)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity">Instance of user.</param>
            <returns>Passed instance of user with updated id.</returns>
        </member>
        <member name="M:ComLib.Account.UserRepository.Update(ComLib.Account.User)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity">Instance of user.</param>
            <returns>Passed instance of user.</returns>
        </member>
        <member name="M:ComLib.Account.UserRepository.BuildParams(ComLib.Account.User)">
            <summary>
            Builds the params.
            </summary>
            <param name="entity">The entity.</param>
            <returns>Array with database parameters for user.</returns>
        </member>
        <member name="M:ComLib.Account.UserRepository.BuildParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates a parameter.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="dbType">Type of parameter.</param>
            <param name="val">Value of parameter.</param>
            <returns>Created parameter.</returns>
        </member>
        <member name="T:ComLib.Account.UserRowMapper">
            <summary>
            RowMapper for User.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Creates a new entity from data of a reader.
            </summary>
            <param name="reader">Reader with data.</param>
            <param name="rowNumber">Row number to use.</param>
            <returns>Created instance of entity.</returns>
        </member>
        <member name="T:ComLib.Samples.Example_Repository2_Entity">
             <summary>
             Example of Repository usage
             NOTES:
             1. IRepository&lt;T&gt; is the interface where T : IEntity.
            
             2. RepositorySql(T) is a ms-sql database implementation of IRepository&lt;T&gt;
                What makes the RepositorySql(T) generic is that T must be IEntity
                and all the get / delete methods are based on the field "Id".
            
             3. The only thing you need to do to create your repository for eg. BlogRepository
                is a. Extend from RepositorySql(T) and implement the Create() and Update() methods and RowMapper.
                (If you use the codegenerator, this can be automated for you.)!.
                
             4. RepositoryInMemory(T) stores the objects in memory but still provides the CRUD methods.
                This is useful for unit-tests / integration.
             
             IEntity
             1. Id
             2. CreateDate
             3. UpdateDate
             4. CreateUser
             5. UpdateUser
             
             This convention of using IEntity ( Id ) affords some very convenient pre-built funcionality.
             Get, Delete, Recent, etc.
             </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Repository2_Entity.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Repository2_Entity.Product.Cost">
            <summary>
            Cost of the product.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_Repository2_Entity.Product.Name">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="T:ComLib.ValidationEvent">
            <summary>
            Encapsulate all the various inputs for performing validation on an object.
            </summary>
        </member>
        <member name="F:ComLib.ValidationEvent.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="F:ComLib.ValidationEvent.Results">
            <summary>
            The results to store validation errors.
            </summary>
        </member>
        <member name="F:ComLib.ValidationEvent.Context">
            <summary>
            Other contextual data that could be supplied.
            </summary>
        </member>
        <member name="M:ComLib.ValidationEvent.TargetT``1">
            <summary>
            Return the object to validate.
            </summary>
            <typeparam name="T">Type of object to return.</typeparam>
            <returns>Object to validate.</returns>
        </member>
        <member name="M:ComLib.ValidationEvent.#ctor(System.Object,ComLib.IValidationResults,System.Object)">
            <summary>
            Initialize data.
            </summary>
            <param name="target">Target object.</param>
            <param name="results">Validation results.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:ComLib.ValidationEvent.#ctor(System.Object,ComLib.IValidationResults)">
            <summary>
            Initialize data.
            </summary>
            <param name="target">Target object.</param>
            <param name="results">Validation results.</param>
        </member>
        <member name="T:ComLib.IValidationResults">
            <summary>
            Interface for validation results.
            </summary>
        </member>
        <member name="P:ComLib.IValidationResults.IsValid">
            <summary>
            Returns the validation results.
            </summary>
        </member>
        <member name="T:ComLib.ValidationResults">
            <summary> 
            Stores validation results. 
            </summary> 
            <remarks>NOTE : Errors could be a read-only collection. 
            </remarks> 
        </member>
        <member name="F:ComLib.ValidationResults.Empty">
            <summary>
            Null object.
            </summary>
        </member>
        <member name="P:ComLib.ValidationResults.IsValid">
            <summary> 
            Passed validation ? 
            </summary> 
        </member>
        <member name="T:ComLib.ValidationRuleDef">
            <summary>
            This class defines a validation rule.
            </summary>
        </member>
        <member name="F:ComLib.ValidationRuleDef.Name">
            <summary>
            Description of the validation rule.
            </summary>
        </member>
        <member name="F:ComLib.ValidationRuleDef.Rule">
            <summary>
            Validation function.
            </summary>
        </member>
        <member name="T:ComLib.Guard">
            <summary>
            Used for simple validations.
            </summary>      
        </member>
        <member name="M:ComLib.Guard.IsTrue(System.Boolean)">
            <summary>
            Check that the condition is true.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:ComLib.Guard.IsTrue(System.Boolean,System.String)">
            <summary>
            Check that the condition is true and return error message provided.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentException"/>
            if the condition is false.</param>
        </member>
        <member name="M:ComLib.Guard.IsFalse(System.Boolean)">
            <summary>
            Check that the condition is false.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:ComLib.Guard.IsFalse(System.Boolean,System.String)">
            <summary>
            Check that the condition is false and return error message provided.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentException"/>
            if the condition is false.</param>
        </member>
        <member name="M:ComLib.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is not null and throw exception
            with message provided.
            </summary>
            <param name="obj">Object to check</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentNullException"/>
            if the condition is false.</param>
        </member>
        <member name="M:ComLib.Guard.IsNotNull(System.Object)">
            <summary>
            Check that the object provided is not null.
            </summary>
            <param name="obj">Object to check.</param>
        </member>
        <member name="M:ComLib.Guard.IsNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is null and throw exception
            with message provided.
            </summary>
            <param name="obj">Object to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentNullException"/>
            if the condition is false.</param>
        </member>
        <member name="M:ComLib.Guard.IsNull(System.Object)">
            <summary>
            Check that the object provided is null.
            </summary>
            <param name="obj">Object to check.</param>
        </member>
        <member name="M:ComLib.Guard.IsOneOfSupplied``1(``0,System.Collections.Generic.List{``0})">
            <summary>
            Check that the supplied object is one of a list of objects.
            </summary>
            <typeparam name="T">Type of object to check.</typeparam>
            <param name="obj">Object to look for.</param>
            <param name="possibles">List with possible values for object.</param>
            <returns>True if the object is equal to one in the supplied list.
            Otherwise, <see cref="T:System.ArgumentException"/> is thrown.</returns>
        </member>
        <member name="M:ComLib.Guard.IsOneOfSupplied``1(``0,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Check that the supplied object is one of a list of objects.
            </summary>
            <typeparam name="T">Type of object to check.</typeparam>
            <param name="obj">Object to look for.</param>
            <param name="possibles">List with possible values for object.</param>
            <param name="message">Message of exception to throw.</param>
            <returns>True if the object is equal to one in the supplied list.
            Otherwise, <see cref="T:System.ArgumentException"/> is thrown.</returns>
        </member>
        <member name="T:ComLib.Xml.XmlUtils">
            <summary>
            Static Xml related utility functions.
            </summary>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.#ctor">
             <summary>
            Default constructor.
             </summary>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.LoadXMLFromFile(System.String)">
            <summary>
            This takes a file path and return an xmldocument
            </summary>
            <param name="file">File path.</param>
            <returns>Loaded XML document.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.RemoveAllChildrenFrom(System.Xml.XmlNode)">
            <summary>
            Remove all children (but not attributes) from specified node
            </summary>
            <param name="n">Node to remove children from</param>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Gets the attribute value for the Current node of xNav_. Throws an Exception if attrName_ does not exist.
            </summary>
            <param name="xNav">Instance of XPath navigator.</param>
            <param name="attrName">Attribute name.</param>
            <returns>Attribute Value.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Gets the attribute value for the Current node of xNav_. Returns defaultValue if attrName_ does not exist.
            </summary>
            <param name="xNav">Instance of XPath navigator.</param>
            <param name="attrName">Attribute name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.FragmentToNode(System.String)">
            <summary>
            Convert a fragment of xml to an xml node
            </summary>
            <param name="xmlFragment">An xml fragment starting with an outer element</param>
            <returns>A node on a new xml document</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.EscapeXml(System.String)">
            <summary>
            Escapes xml.
            </summary>
            <param name="xml">XML content string to escape.</param>
            <returns>Escaped XML content.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.FormatNicely(System.String)">
            <summary>
            Pretty Print the input XML string, such as adding indentations to each level of elements
            and carriage return to each line
            </summary>
            <param name="xmlText">XML content.</param>
            <returns>New formatted XML string</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.TransformXml(System.IO.TextReader,System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Transforms the XML.
            </summary>
            <param name="inXml">The in XML.</param>
            <param name="styleSheet">The style sheet.</param>
            <param name="outXml">The out XML.</param>
            <returns>Transformed XML.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.TransformXml(System.String,System.String)">
            <summary>
            Generates html by transforming the xml to html
            using xsl file specified.
            </summary>
            <param name="xmlToTransform">The xml to transform to html.</param>
            <param name="pathToXsl">The path to the xsl file to use for
            the transformation.</param>
            <returns>An html string if correctly transformed, or an empty string
            if there was some error.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.Serialize(System.Object)">
            <summary>
            Serializes an object to xml using the XmlSerialization.
            The obj must have the xml attributes used for serialization.
            </summary>
            <param name="obj">Object to serialize.</param>
            <returns>XML contents representing the serialized object.</returns>
        </member>
        <member name="T:ComLib.Xml.XmlSerializerUtil">
            <summary>
            Serializes an object to xml.
            </summary>
        </member>
        <member name="M:ComLib.Xml.XmlSerializerUtil.XmlSerialize``1(``0)">
            <summary>
            Serialize the object to xml.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="item">Object to serialize.</param>
            <returns>XML contents representing the serialized object.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlSerializerUtil.XmlSerialize(System.Object)">
            <summary>
            Serialize the object to xml.
            </summary>
            <param name="item">Object to serialize.</param>
            <returns>XML contents representing the serialized object.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlSerializerUtil.XmlDeserialize``1(System.String)">
            <summary>
            Deserialize from xml to the appropriate typed object.
            </summary>
            <typeparam name="T">Type of object to deserialize.</typeparam>
            <param name="xmlData">XML contents with serialized object.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:ComLib.Reflection.ReflectionTypeChecker">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertTo``1(System.String)">
            <summary>
            Checks whether or not the supplied text can be converted
            to a specific type.
            </summary>
            <typeparam name="T">Type to convert to.</typeparam>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if </returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertTo(System.Type,System.String)">
            <summary>
            Checks whether or not the supplied text can be converted
            to a specific type.
            </summary>
            <param name="type">The type to convert val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Check to see if can convert to appropriate type.
            </summary>
            <param name="propInfo">Property to check.</param>
            <param name="val">Instance of object with property.</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Checks whether or not the supplied string can be converted
            to the type designated by the supplied property.
            </summary>
            <param name="propInfo">The property representing the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.ConvertToSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Convert the val from string type to the same time as the property.
            </summary>
            <param name="propInfo">Property representing the type to convert to</param>
            <param name="val">val to convert</param>
            <returns>converted value with the same time as the property</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.IsSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Determine if the type of the property and the val are the same
            </summary>
            <param name="propInfo">Property whose type is to be compared.</param>
            <param name="val">Object whose type is to be compared.</param>
            <returns>True if the property and the object are of the same type.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.City">
            <summary>
            City
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.City.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.City.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            City constructor.
            </summary>
            <param name="name"></param>
            <param name="abbr"></param>
            <param name="stateId"></param>
            <param name="countryId"></param>
        </member>
        <member name="P:ComLib.LocationSupport.City.StateId">
            <summary>
            State id
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.City.ParentId">
            <summary>
            Parent id can be used to associate an area with it's city/county.
            e.g. Bronx = city, parent id = NYC
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.City.IsPopular">
            <summary>
            Is major / popular city.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.City.StateName">
            <summary>
            Gets or sets the name of the state.
            </summary>
            <value>The name of the country.</value>
        </member>
        <member name="T:ComLib.EmailSupport.EmailService">
            <summary>
            Simple Email service.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailService"/> class.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.#ctor(System.Collections.IDictionary,System.String)">
            <summary>
            Initialize configuration using the configuration source supplied.
            The email service settings must be in a section named "EmailService".
            </summary>
            <param name="config"></param>
            <param name="emailServiceSectionName"></param>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.#ctor(ComLib.EmailSupport.IEmailSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailService"/> class.
            </summary>
            <param name="settings">The config.</param>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Init(ComLib.EmailSupport.IEmailSettings)">
            <summary>
            Initialize the configuration.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(ComLib.EmailSupport.EmailMessage)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(ComLib.EmailSupport.EmailMessage,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends the message using the credentials and host/port supplied.
            </summary>
            <param name="message"></param>
            <param name="useCredentials"></param>
            <param name="credentialsUser"></param>
            <param name="credentialsPassword"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(ComLib.EmailSupport.NotificationMessage,System.String,System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Sends the mail message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="message">The mail message</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="from">Who the email is from.</param>
            <param name="to">Who the email is being sent to.</param>
            <param name="subject">Subject of email.</param>
            <param name="body">Email body.</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            Mail the message using the native MailMessage class and the credentials from the current configuration.
            </summary>
            <param name="mailMessage">The mail message</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.InternalSend(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Internals the send.
            </summary>
            <param name="mailMessage">The message.</param>
            <param name="useCredentials">if set to <c>true</c> [use credentials].</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.InternalSend(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            Internals the send.
            </summary>
            <param name="mailMessage">The message.</param>
            <param name="useCredentials">if set to <c>true</c> [use credentials].</param>
            <param name="smtpuser">The credentials user.</param>
            <param name="smtppassword">The credentials password.</param>
            <param name="smtphost">Smtp Host</param>
            <param name="smtpport">Port number</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.EmailSupport.EmailService.Logger">
            <summary>
            Get / Set the logger for errors.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailService.Settings">
            <summary>
            The email service configuration object.
            </summary>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryValidator">
            <summary>
            Validator for NamedQuery
            </summary>
            <summary>
            Extend the validation with validation of the query's parameters if there are any.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="validationEvent">Validator.</param>
            <returns>True if the validation was successful.</returns>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryValidator.Validate(ComLib.ValidationEvent)">
            <summary>
            Validate the query parameters if there are any.
            </summary>
            <param name="validationEvent">Validation event to use.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Models.ModelIterator">
            <summary>
            Class to iterate over models to create and provide callbacks at key points to 
            handle certain events related to model code generation.
            </summary>
        </member>
        <member name="F:ComLib.Models.ModelIterator.FilterOnModel">
            <summary>
            Predicate to apply to model before processing it.
            </summary>
        </member>
        <member name="F:ComLib.Models.ModelIterator.FilterOnProperty">
            <summary>
            Property filter.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelIterator.Process(ComLib.Models.ModelContext,ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model},System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model,ComLib.Models.Include},System.Action{ComLib.Models.Model,ComLib.Models.Composition})">
            <summary>
            Process the model using the callback lamdas.
            </summary>
            <param name="ctx">The full model context.</param>
            <param name="model">The model to process.</param>
            <param name="inheritanceChain">List with the inheritance chain.</param>
            <param name="inheritanceAction">Inheritance action.</param>
            <param name="includeAction">Include action.</param>
            <param name="compositionAction">Composition action.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.Process(ComLib.Models.ModelContext)">
            <summary>
            Process all the models, which pass the filter, one at a time.
            </summary>
            <param name="ctx">The model context.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.Process(ComLib.Models.ModelContext,System.String)">
            <summary>
            Process the model with the specified name.
            </summary>
            <param name="ctx">The model context.</param>
            <param name="modelName">The model name.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessModel(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Proces given model
            </summary>
            <param name="ctx">The mode context.</param>
            <param name="currentModel">The current model.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessModelParts(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Build the properties.
            </summary>
            <param name="ctx">The model context.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessProperties(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Process all the properties of the model.
            </summary>
            <param name="ctx">The model context.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessCompositions(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Process all the compositions of the model.
            </summary>
            <param name="ctx">The model context.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessIncludes(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Process all the includes of the model.
            </summary>
            <param name="ctx">The model context.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.GetProperties(ComLib.Models.Model)">
            <summary>
            Get all the applicable properties after running the filter.
            </summary>
            <param name="model">The model.</param>
            <returns>List of applicable properties.</returns>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnModelProcess">
            <summary>
            Event to fire on model processing.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnModelProcessCompleted">
            <summary>
            Event to fire when a model has been processed.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnPropertyProcess">
            <summary>
            Event to fire when property should be processed for a specific model.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnCompositeProcess">
            <summary>
            Event to fire when a composite model should be processed.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnIncludeProcess">
            <summary>
            Event to fire when a included model should be processed.
            </summary>
        </member>
        <member name="T:ComLib.Maps.YahooMapUrlBuilder">
            <summary>
            This class is used to create links for Yahoo maps.
            <a href="http://maps.yahoo.com/#mvt=m&amp;q1=100%20prox%20ave.%20bronx%20ny%2011225"></a>
            <a href="http://maps.yahoo.com/#mvt=m&amp;q1=105-88%206th%20ave.%20Queens%20NY%2012375"></a>
            </summary>
        </member>
        <member name="M:ComLib.Maps.YahooMapUrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GoogleMapUrlBuilder"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.YahooMapUrlBuilder.Build(ComLib.LocationSupport.Address)">
            <summary>
            builds the url.
            e.g. 
            Address : 439 calhoun ave. bronx, ny 10465
            ="439+calhoun+ave.+bronx,+ny+10465"
            </summary>
            <param name="address">Address to location.</param>
            <returns>Url with mapped address.</returns>
        </member>
        <member name="P:ComLib.Maps.YahooMapUrlBuilder.UrlPrefix">
            <summary>
            Set the url prefix:
            <a href="http://maps.yahoo.com/#mvt=m&amp;q1="></a>
            </summary>
        </member>
        <member name="T:ComLib.MapperSupport.MapperCsv`1">
            <summary>
            Mapper for sourcing data from Ini files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.#ctor">
            <summary>
            Initialize with csv doc.
            </summary>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.#ctor(ComLib.CsvParse.CsvDoc)">
            <summary>
            Initialize with csv doc.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.Map(System.Object,ComLib.IErrors)">
            <summary>
            Map the objects.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.Map(ComLib.IErrors)">
            <summary>
            Map the ini file
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.MapFromFile(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="filepath"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.MapFromText(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="content"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.MapToFile(System.Collections.Generic.IList{`0},System.Collections.Generic.IDictionary{System.String,System.String},System.String,ComLib.IErrors)">
            <summary>
            Map the items to a csv text.
            </summary>
            <param name="items">The items to map</param>
            <param name="excludeProps"></param>
            <param name="path"></param>
            <param name="errors">The errors to collect.</param>
        </member>
        <member name="P:ComLib.MapperSupport.MapperCsv`1.SupportedFormat">
            <summary>
            Get the supported format of the data source.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogFile">
            <summary>
            File based logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.#ctor(System.String,System.String)">
            <summary>
            Initialize with path of the log file.
            </summary>
            <param name="name">Name of application.</param>
            <param name="filepath">File path, can contain substitutions.</param>
        </member>
        <member name="M:ComLib.Logging.LogFile.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initialize log file.
            </summary>
            <param name="name">Name of application.</param>
            <param name="filepath">File path, can contain substitutions. e.g. "%yyyy%.</param>
            <param name="date">Date to use in the name of the log file.</param>
            <param name="env">Environment name to put into the name of the log file.</param>
        </member>
        <member name="M:ComLib.Logging.LogFile.#ctor(System.String,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
            <summary>
            Initialize log file.
            </summary>
            <param name="name">Name of application.</param>
            <param name="filepath">File path, can contain substitutions. e.g. "%yyyy%.</param>
            <param name="date">Date to use in the name of the log file.</param>
            <param name="env">Environment name to put into the name of the log file.</param>
            <param name="rollFile">True to roll file once max size is reached.</param>
            <param name="maxSizeInMegs">Maximum size in megabytes.</param>
        </member>
        <member name="M:ComLib.Logging.LogFile.Log(ComLib.Logging.LogEvent)">
            <summary>
            Log the event to file.
            </summary>
            <param name="logEvent">Event to log.</param>
        </member>
        <member name="M:ComLib.Logging.LogFile.Flush">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.ShutDown">
            <summary>
            Shutsdown the logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.Dispose">
            <summary>
            Flushes the data to the file.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.Finalize">
            <summary>
            Destructor to close the writer
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.FlushCheck">
            <summary>
            Flush the data and check file size for rolling.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogFile.FilePath">
            <summary>
            The full path to the log file.
            </summary>
        </member>
        <member name="T:ComLib.IO.FileCleaner">
            <summary>
            Cleans directories / files.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileCleaner.#ctor">
            <summary>
            File Cleaner.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileCleaner.Execute(System.Object)">
            <summary>
            Execute cleaning of files/directories.
            Doesn't actually delete anything but generates a file
            containing the commands.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.FileCleaner.HandleDirectory(System.IO.DirectoryInfo)">
            <summary>
            Handle the directory.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:ComLib.IO.FileCleaner.HandleFile(System.IO.FileInfo)">
            <summary>
            Handle the file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:ComLib.Feeds.FeedFormat">
            <summary>
            Feed format.
            </summary>
        </member>
        <member name="F:ComLib.Feeds.FeedFormat.Atom">
            <summary>
            Atom syndication format.
            </summary>
        </member>
        <member name="F:ComLib.Feeds.FeedFormat.Rss">
            <summary>
            Rss syndication format
            </summary>
        </member>
        <member name="T:ComLib.Feeds.FeedFormatDocType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ComLib.Feeds.FeedFormatDocType.Rss20">
            <summary>
            Document type for rss 
            </summary>
        </member>
        <member name="F:ComLib.Feeds.FeedFormatDocType.Atom10">
            <summary>
            Document type for atom 
            </summary>
        </member>
        <member name="T:ComLib.Feeds.FeedHelper">
            <summary>
            Helper class for reading/writing feeds.
            </summary>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.LoadUrl(System.String)">
            <summary>
            Load a syndication from the specified url.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.LoadUrlItemsTitle(System.String,System.Int32)">
            <summary>
            Loads the URL items Title and Link into a list of key/values.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxEntries">The max entries.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.LoadUrlAsXml(System.String)">
            <summary>
            Load feed from url into an xml string.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.Write(System.ServiceModel.Syndication.SyndicationFeed,ComLib.Feeds.FeedFormat,System.Xml.XmlWriter)">
            <summary>
            Writes the specified feed to either rss or atom format.
            </summary>
            <param name="feed">The feed.</param>
            <param name="format">The format.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteAtom10(System.ServiceModel.Syndication.SyndicationFeed,System.IO.Stream)">
            <summary>
            Writes the feed as atom10.
            </summary>
            <param name="feed">The feed.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteRss20(System.ServiceModel.Syndication.SyndicationFeed,System.IO.Stream)">
            <summary>
            Writes the feed as RSS20.
            </summary>
            <param name="feed">The feed.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteAtom10(System.ServiceModel.Syndication.SyndicationFeed,System.Xml.XmlWriter)">
            <summary>
            Writes the atom10.
            </summary>
            <param name="feed">The feed.</param>
            <param name="writer"></param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteRss20(System.ServiceModel.Syndication.SyndicationFeed,System.Xml.XmlWriter)">
            <summary>
            Writes the RSS20.
            </summary>
            <param name="feed"></param>
            <param name="writer"></param>
        </member>
        <member name="T:ComLib.Environments.EnvType">
            <summary>
            Different types of environment.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Dev">
            <summary>
            Development.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Qa">
            <summary>
            Quality assurance.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Uat">
            <summary>
            User acceptance testing.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Prod">
            <summary>
            Production.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.MixedNonProd">
            <summary>
            Mixed environments with no envrionment being production.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.MixedProd">
            <summary>
            Mixed environments with at least one
            environment being production.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityMassager">
            <summary>
            Data massager for an entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityMassager.Massage(System.Object,ComLib.Entities.EntityAction)">
            <summary>
            Massage the entity data given the entity action.
            </summary>
            <param name="entity"></param>
            <param name="action"></param>
        </member>
        <member name="T:ComLib.EmailSupport.EmailHelper">
            <summary>
            Helper class for emails.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailHelper.GetSettings(System.Collections.IDictionary,System.String,System.Func{ComLib.EmailSupport.IEmailSettings})">
            <summary>
            Create the email service settings from the configuration source provided.
            </summary>
            <param name="config">The Configuration source.</param>
            <param name="emailServiceSectionName">The name of the section in the config source
            containing the email service settings.</param>
            <param name="settingsCreator">Lamda to option create the settings object.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailHelper.GetOrDefault``1(System.Collections.IDictionary,System.String,System.String,``0)">
            <summary>
            Get the value from the dictionary using the section/keys specified, and if not available, return the defaultvalue supplied.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config"></param>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CsvParse.CsvConfig">
            <summary>
            Settings for the csv.
            </summary>
        </member>
        <member name="F:ComLib.CsvParse.CsvConfig.IsReadOnly">
            <summary>
            Indicates if loading as readonly.
            </summary>
        </member>
        <member name="F:ComLib.CsvParse.CsvConfig.Separator">
            <summary>
            The character used to separate values in csv file.
            </summary>
        </member>
        <member name="F:ComLib.CsvParse.CsvConfig.ContainsHeaders">
            <summary>
            Indicate if first line contains headers/columns.
            </summary>
        </member>
        <member name="T:ComLib.Collections.PropertyKey">
            <summary>
            Simple class to store and parse the propertyKeys.
            propertyKey = configObjectInstanceName.Key.
            e.g.
            1. "profileOptions.IsEnabled"
            2. "profileOptions.user1.PageSize"
            
            </summary>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.#cctor">
            <summary>
            Static constructor to create the null object.
            </summary>
        </member>
        <member name="F:ComLib.Collections.PropertyKey.Group">
            <summary>
            The first property e.g. A as in "A.B.C"
            </summary>
        </member>
        <member name="F:ComLib.Collections.PropertyKey.SubGroup">
            <summary>
            The second property e.g. B as in "A.B.C"
            </summary>
        </member>
        <member name="F:ComLib.Collections.PropertyKey.Key">
            <summary>
            The last property. e.g Either B if 2 properties as in "A.B" or C if 3 properties as in "A.B.C"
            </summary>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="group"></param>
            <param name="subGroup"></param>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.BuildWithoutKey">
            <summary>
            Builds the path by only including the Group and SubGroup if applicable,
            without using the Key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.ToString">
            <summary>
            Return the key in "Group.SubGroup.Key".
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.BuildKey(System.String,System.String,System.String)">
            <summary>
            Builds the property key which is the combination of the group and the key.
            </summary>
            <param name="group"></param>
            <param name="subGroup"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.BuildKey(System.String,System.String)">
            <summary>
            Builds the object key which is the combination of the group and the key.
            </summary>
            <param name="group"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.Parse(System.String)">
            <summary>
            Parses the propertyKey string "name.Property" and returns a
            PropertyKey object with the name and property separate.
            </summary>
            <param name="propertyKey"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.PropertyKey.Empty">
            <summary>
            Gets the null object.
            </summary>
        </member>
        <member name="P:ComLib.Collections.PropertyKey.HasSubGroup">
            <summary>
            Whether or not this has a subgroup.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.Config">
            <summary>
            Utility class for the configuration reflector.
            </summary>
        </member>
        <member name="F:ComLib.Configuration.Config._current">
            <summary>
            Current configuration source based on the current
            Environment. <see cref="P:ComLib.Environments.Envs.Current"/>
            </summary>
        </member>
        <member name="M:ComLib.Configuration.Config.Init(ComLib.IConfigSource)">
            <summary>
            Initialize the current config provider.
            </summary>
            <param name="inheritanceBasedConfig"></param>
        </member>
        <member name="M:ComLib.Configuration.Config.Get(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.GetString(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get``1(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get``1(System.Int32)">
            <summary>
            Convenience method for getting typed config value from current config provider using index position of key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexOfKey"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.GetString(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get``1(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue">The default value to use if key is not available.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.GetSection(System.String)">
            <summary>
            Get the configuration section with the specified name.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.ContainsKey(System.String)">
            <summary>
            Convenience method for checking if config key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.ContainsKey(System.String,System.String)">
            <summary>
            Convenience method for checking if config key exists.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Save">
            <summary>
            Save the configuration.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.Current">
            <summary>
            Current config.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.Sections">
            <summary>
            The names of the sections in this config provider.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.Name">
            <summary>
            The name of this config provider.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.SourcePath">
            <summary>
            The full path to the source for this config provider.
            </summary>
        </member>
        <member name="T:ComLib.Collections.IIndexedComponent`1">
            <summary>
            Interface that any component must implement
            so that it can be indexed by an id or by a name.
            </summary>
            <typeparam name="TNumericKey"></typeparam>
        </member>
        <member name="M:ComLib.Collections.IIndexedComponent`1.BuildKey">
            <summary>
            Creates a string key based on the id.
            </summary>
            <returns>String key.</returns>
        </member>
        <member name="P:ComLib.Collections.IIndexedComponent`1.Id">
            <summary>
            Get the key id.
            </summary>
        </member>
        <member name="T:ComLib.Collections.IIndexedLookUp`2">
            <summary>
            Interface for storing a collection of objects of type T,
            such that the objects can be looked up by either the
            id of the object T or by creating a distinct name for the object
            based on it's hashcode.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TNumericKey"></typeparam>
        </member>
        <member name="P:ComLib.Collections.IIndexedLookUp`2.Item(`0)">
            <summary>
            Gets an object based on its id.
            </summary>
            <param name="id">Id of object.</param>
            <returns>Object corresponding to id.</returns>
        </member>
        <member name="P:ComLib.Collections.IIndexedLookUp`2.Item(System.String)">
            <summary>
            Gets an object based on its name.
            </summary>
            <param name="name">Name of object.</param>
            <returns>Object corresponding to name.</returns>
        </member>
        <member name="P:ComLib.Collections.IIndexedLookUp`2.Count">
            <summary>
            Gets the number of items stored in the collection.
            </summary>
        </member>
        <member name="T:ComLib.Collections.IndexedLookUp`2">
            <summary>
            Indexed lookup class for storing objects of type T which can
            be retrieved by either an id or name.
            </summary>
            <typeparam name="TNumericKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ComLib.Collections.IndexedLookUp`2._allItemsById">
            <summary>
            Dictionary with all items ordered by id.
            </summary>
        </member>
        <member name="F:ComLib.Collections.IndexedLookUp`2._allItemsByName">
            <summary>
            Dictionary with all items order by name.
            </summary>
        </member>
        <member name="F:ComLib.Collections.IndexedLookUp`2._allItems">
            <summary>
            List with all items.
            </summary>
        </member>
        <member name="M:ComLib.Collections.IndexedLookUp`2.#ctor(System.Collections.Generic.IList{`1})">
            <summary>
            Generic based lookup.
            </summary>
            <param name="allItems"></param>
        </member>
        <member name="M:ComLib.Collections.IndexedLookUp`2.Initialize(System.Collections.Generic.IList{`1})">
            <summary>
            Initialize the internal lookup tables with the items.
            Store them by id and name.
            </summary>
            <param name="allItems"></param>
        </member>
        <member name="P:ComLib.Collections.IndexedLookUp`2.Item(`0)">
            <summary>
            Returns the location item given the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IndexedLookUp`2.Item(System.String)">
            <summary>
            Returns the location item given the full name ("New York") or abbr ( "NY" )
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IndexedLookUp`2.Count">
            <summary>
            Get the number of items in this lookup.
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionaryTypeConversion`1">
            <summary>
            Semi-Generic based dictionary where the values are always strings which 
            can be converted to any type using the public conversion methods such 
            as GetInt(key), GetBool(key) etc.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetInt(`0)">
            <summary>
            Get the value associated with the key as a int.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetBool(`0)">
            <summary>
            Get the value associated with the key as a bool.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetString(`0)">
            <summary>
            Get the value associated with the key as a string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetDouble(`0)">
            <summary>
            Get the value associated with the key as a double.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetDateTime(`0)">
            <summary>
            Get the value associated with the key as a datetime.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetLong(`0)">
            <summary>
            Get the value associated with the key as a long.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Add(`0,System.String)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.TryGetValue(`0,System.String@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Add(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Contains(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.String}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Remove(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.RandomTextGenerator">
            <summary>
            Generates random text.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.IRandomTextGenerator">
            <summary>
            Interface for the random text generator.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.IRandomTextGenerator.Generate">
            <summary>
            Generates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.CaptchaSupport.IRandomTextGenerator.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="M:ComLib.CaptchaSupport.RandomTextGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.CaptchaSupport.RandomTextGenerator"/> class.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.RandomTextGenerator.Generate">
            <summary>
            Generate the random text.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.CaptchaSupport.RandomTextGenerator.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:ComLib.Benchmarks.BenchmarkResult">
            <summary>
            Result for a benchmark run
            </summary>
        </member>
        <member name="F:ComLib.Benchmarks.BenchmarkResult.Name">
            <summary>
            Name of the benchmark run. 
            </summary>
        </member>
        <member name="F:ComLib.Benchmarks.BenchmarkResult.Message">
            <summary>
            Message supplied to bench mark run.
            </summary>
        </member>
        <member name="F:ComLib.Benchmarks.BenchmarkResult.DateRun">
            <summary>
            The date this benchmark was run on.
            </summary>
        </member>
        <member name="F:ComLib.Benchmarks.BenchmarkResult.TimeStarted">
            <summary>
            The start time of the benchmark
            </summary>
        </member>
        <member name="F:ComLib.Benchmarks.BenchmarkResult.TimeEnded">
            <summary>
            The end time of the benchmark.
            </summary>
        </member>
        <member name="F:ComLib.Benchmarks.BenchmarkResult.TimeDiff">
            <summary>
            The difference in the start and end times.
            </summary>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkResult.ToString">
            <summary>
            String representation of benchmark result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkResult.ToStringXml">
            <summary>
            String representation of benchmark result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Benchmarks.BenchmarkResult.ToStringJson">
            <summary>
            String representation of benchmark result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.CommandListCommands">
            <summary>
            Sample automation script command class.
            </summary>
        </member>
        <member name="M:ComLib.Automation.CommandListCommands.DoExecute(ComLib.Automation.CommandContext)">
            <summary>
            Get list of all the commands in the system.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Arguments.Args">
            <summary>
            Class to parse arguments and store both named and positional arguments for easy lookup.
            </summary>
            <example>
            <para>
                
            </para>
            </example>
            <summary>
            Class providing utility methods for parsing a string or collection of arguments.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args._metaIndex">
            <summary>
            Index position of meta request.
            e.g. -help, -pause, -version
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args.Named">
            <summary>
            <para>
            Collection of named arguments.
            e.g. If "-config:prod.xml -date:T-1 MyApplicationId" is supplied to command line.
            
            Named["config"] = "prod.xml"
            Named["date"] = "T-1"
            </para>
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args.Positional">
            <summary>
            <para>
            Collection of un-named arguments supplied to command line.
            e.g. If "-config:prod.xml -date:T-1 MyApplicationId" is supplied to command line.
            
            Positional[0] = "MyApplicationId"
            </para>
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args.Raw">
            <summary>
            The original/raw arguments that were supplied.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor">
            <summary>
            Create new instance using defaults
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[])">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String,System.String)">
            <summary>
            Initialize only the prefix / separator.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.String,System.String)">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.String,System.String,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initialize arguments.
            </summary>
            <param name="args">Raw arguments from command line.</param>
            <param name="supported">Supported named/positional argument definitions.</param>
            <param name="named">Named arguments</param>
            <param name="positional">Positional arguments.</param>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.String,System.String,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initialize arguments.
            </summary>
            <param name="args">Raw arguments from command line.</param>
            <param name="prefix">Prefix used for named arguments. "-".</param>
            <param name="keyValueSeparator">Separator used for named arguments key/values. ":".</param>
            <param name="supported">Supported named/positional argument definitions.</param>
            <param name="named">Named arguments</param>
            <param name="positional">Positional arguments.</param>
        </member>
        <member name="M:ComLib.Arguments.Args.DoParse(System.String[])">
            <summary>
            Parse the raw arguments using the internal schema.
            </summary>
            <param name="rawArgs"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Contains(System.String)">
            <summary>
            Whether or not the named argument exists.
            </summary>
            <param name="namedArg"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Contains(ComLib.Arguments.ArgAttribute)">
            <summary>
            Whether or not the there is a named argument/value associated with the supplied argument.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.String)">
            <summary>
            Get the named argument specified by <paramref name="argName"/>
            throws an exception if the named argument is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.String,``0)">
            <summary>
            Get the named argument specified by <paramref name="argName"/>
            if it exists, returns <paramref name="defaultValue"/> otherwise.
            </summary>
            <param name="argName">Name of the named argument.</param>
            <param name="defaultValue">Default value to return if named arg does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.Int32)">
            <summary>
            Get the positional argument specified by <paramref name="indexPosition"/>
            throws an exception if the positional argument is not present.
            </summary>
            <param name="indexPosition">Index position of the argument.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.Int32,``0)">
            <summary>
            Get the positional argument specified by <paramref name="indexPosition"/>
            if it exists, returns <paramref name="defaultValue"/> otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexPosition"></param>
            <param name="defaultValue">Default value to return if named arg does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.ShowUsage(System.String)">
            <summary>
            Show the usage of the arguments on the console.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.GetUsage(System.String)">
            <summary>
            Get a string representing the usage of the arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.SetMetaIndex(System.Int32)">
            <summary>
            Set the index position of the argument indicating a specific meta query.
            Such as "-help", "-version", "-about".
            e.g. if 0, this indicates that the argument "-help" should be expected at position 0
            in the raw arguments.
            </summary>
            <param name="ndx"></param>
        </member>
        <member name="M:ComLib.Arguments.Args.IsPositionalArg(System.Int32,System.String,System.String[])">
            <summary>
            Checks if the first positional arg in the raw arguments is equal to 
            what's provided.
            </summary>
            <param name="metaIndex"></param>
            <param name="valToCheck"></param>
            <param name="additionalValues"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.InitServices(System.Func{System.String,System.Collections.Generic.List{System.String}},System.Func{System.String,System.String})">
            <summary>
            Initialize the string parser and substutions.
            Args.InitServices((textargs) => ComLib.Parsing.LexArgs.ParseList(textargs), (arg) => ComLib.Subs.Substitutor.Substitute(arg));
            </summary>
            <param name="stringParser"></param>
            <param name="substitutor"></param>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String)">
            <summary>
            Parse the line into <see cref="T:ComLib.Arguments.Args"/> object.
            </summary>
            <param name="text">The line of text containing arguments to parse.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String,System.String,System.String)">
            <summary>
            Parses the line into <see cref="T:ComLib.Arguments.Args"/> object using the supplied prefix and separator.
            </summary>
            <param name="text">The line of text containing arguments to parse.</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String,System.String,System.String,System.Object)">
            <summary>
            Parses the arguments and checks for named arguments and non-named arguments.
            </summary>
            <param name="text">The line of text containing arguments to parse.</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>
            <param name="argReciever">The object to apply the argument values to. This must have ArgAttributes on it's properties.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[])">
            <summary>
            Parse the args into <see cref="T:ComLib.Arguments.Args"/> object.
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.String,System.String)">
            <summary>
            Parses the arguments
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.String,System.String,System.Object)">
            <summary>
            Parses the arguments and checks for named arguments and non-named arguments.
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="argReciever">The object to apply the argument values to. This must have ArgAttributes on it's properties.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/> object.
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="argsSpec">List of expected argument items(both named and positional).</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.String,System.String,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/>
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="argsSpec">List of expected argument items(both named and positional).</param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Accept(System.String[],System.String,System.String,System.Object)">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/> and prints any errors to the console.
            </summary>
            <param name="rawArgs">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="argsReciever">The object to apply the argument values to. This must have ArgAttributes on it's properties.</param>
            <returns>True if arguments are valid, false otherwise. argsReciever contains the arguments.</returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Accept(System.String[],System.String,System.String,System.Int32,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.List{System.String})">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/> and prints any errors to the console.
            </summary>
            <param name="rawArgs">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="minArgs">The minimum number of arguments expected.</param>
            <param name="supported">List of expected argument items(both named and positional).</param>                        
            <param name="examples">List of examples of how to use the examples.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.TryCatch(System.Func{ComLib.BoolMessageItem{ComLib.Arguments.Args}})">
            <summary>
            Wrap the parsing of the arguments into a trycatch.
            </summary>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.Schema">
            <summary>
            The argument schema containing what options are available.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.Prefix">
            <summary>
            Named args prefix used. "-"
            e.g. -env:Production
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.Separator">
            <summary>
            Named args key / value separator used. ":"
            e.g. -env:Production
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.IsEmpty">
            <summary>
            True if there are 0 arguments.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.IsVersion">
            <summary>
            Returns true if there is only 1 argument with value:  --Version -Version /Version
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.IsPause">
            <summary>
            Returns true if there is only 1 argument with value: --pause -pause /pause
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.IsHelp">
            <summary>
            Returns true if there is only 1 argument with value: --help -help --help -help /? -? ?
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.IsInfo">
            <summary>
            Returns true if there is only 1 argument with value: --About -About /About
            </summary>
        </member>
        <member name="T:ComLib.Account.UserService">
            <summary>
            Service class for User.
            </summary>
            <summary>
            User service extension to handle data massaging for the dates.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor">
            <summary>
            default construction
            </summary>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor(ComLib.Entities.IRepository{ComLib.Account.User})">
            <summary>
            Initialize model with only the repository.
            </summary>
            <param name="repository">Repository for entity.</param>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor(ComLib.Entities.IRepository{ComLib.Account.User},ComLib.Entities.IEntitySettings)">
            <summary>
            Initialize model with repository and settings.
            </summary>
            <param name="repository">Repository</param>
            <param name="settings">Settings</param>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor(ComLib.Entities.IRepository{ComLib.Account.User},ComLib.Entities.IEntityValidator,ComLib.Entities.IEntitySettings)">
            <summary>
            Initialize the model w/ repository, validator, and it's settings.
            </summary>
            <param name="repository">Repository for the model.</param>
            <param name="validator">Validator for model.</param>
            <param name="settings">Settings for the model.</param>
        </member>
        <member name="M:ComLib.Account.UserService.VerifyUser(System.String,System.String)">
            <summary>
            Verify that this is a valid user.
            </summary>
            <param name="userName">"kishore"</param>
            <param name="password">"password"</param>
            <returns>Result of verification.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.LogOn(System.String,System.String,System.Boolean)">
            <summary>
            Similar to VerifyUser except this updates the "LastLoginDate" if successful login.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="password">User password.</param>
            <param name="rememberUser">True to remember user.</param>
            <returns>Result of logon attempt.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(System.String,System.String,System.String,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create the user and also return the membership status
            </summary>
            <param name="userName">kishore</param>
            <param name="email">kishore@abc.com</param>
            <param name="password">password</param>
            <param name="roles"></param>
            <param name="status">DuplicateUserName</param>
            <returns>Result of user creation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(ComLib.Account.User,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create the user and also return the membership status
            </summary>
            <param name="user">kishore</param>
            <param name="password">password</param>
            <param name="status">DuplicateUserName</param>
            <returns>Result of user creation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Create the user.
            </summary>
            <param name="userName">"kishore"</param>
            <param name="email">"kishore@abc.com"</param>
            <param name="password">password</param>
            <param name="roles">Roles to assign to the user.</param>
            <returns>Result of user creation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(ComLib.IActionContext)">
            <summary>
            Create a user.
            </summary>
            <param name="ctx">Context.</param>
        </member>
        <member name="M:ComLib.Account.UserService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the current password.
            </summary>
            <param name="userName">username of the account for which the password is being changed.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">New password</param>
            <returns>Result of password change operation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.ChangeEmail(System.Int32,System.String)">
            <summary>
            Change the email address associated w/ the accountid.
            </summary>
            <param name="userId">The user id.</param>
            <param name="newEmail">The new email.</param>
            <returns>Result of e-mail change operation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.ChangeEmail(ComLib.Account.User,System.String)">
            <summary>
            Changes the email associated w/ the user account.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmail">The new email.</param>
            <returns>Result of e-mail change operation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.Get(System.String)">
            <summary>
            Get a user by their name.
            </summary>
            <param name="userName">Name of user.</param>
            <returns>Instance of User corresponding to the user name.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.LockOut(System.String,System.String)">
            <summary>
            Lock out the user specified.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="lockOutReason">Reason for lockout.</param>
        </member>
        <member name="M:ComLib.Account.UserService.UndoLockOut(System.String,System.String)">
            <summary>
            Undo the lock out the user specified.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="comment">Undo comment.</param>
        </member>
        <member name="M:ComLib.Account.UserService.Approve(System.String)">
            <summary>
            Approve the user specified.
            </summary>
            <param name="userName">Name of user.</param>
            <returns>Result of approve operation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.GetValidator">
            <summary>
            Return a new instance of a validator. This is neccessary.
            </summary>
            <returns>Internal validator used.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.PerformValidation(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Override the validation to handle check for existing accounts with same 
            username or email address.
            </summary>
            <param name="ctx">The action context.</param>
            <param name="entityAction">Action to perform.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.ValidatePasswords(System.String,System.String)">
            <summary>
            Validate passwords are same.
            </summary>
            <param name="password">User password.</param>
            <param name="passwordConfirmation">Second entry of password.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="M:ComLib.Account.UserService.ValidateCreation(ComLib.Account.User,ComLib.Account.UserSettings,ComLib.IValidationResults,System.String,System.String)">
            <summary>
            Performs validation for creation purposes. This includes checks for duplicate usernames/emails.
            </summary>
            <param name="user">The user.</param>
            <param name="settings">The settings.</param>
            <param name="errors">The errors.</param>
            <param name="password">The password.</param>
            <param name="confirmPassword">The confirm password.</param>
            <returns>Instance of membership creation status.</returns>
        </member>
        <member name="T:ComLib.Account.UserSettings">
            <summary>
            Settings class for User.
            </summary>
            <summary>
            Create other settings for account services.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntitySettings`1">
            <summary>
            This settings class uses the configSourceDecorator to allow the config settings
            to be either file based or database based.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.EntitySettings`1.#ctor">
            <summary>
            Creates a new instance of this class with validation enabled.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntitySettings`1.SetCoreFlags(System.Boolean,System.Boolean,System.String)">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntitySettings`1.EnableAuthentication">
            <summary>
            Whether authentication is required to edit the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntitySettings`1.EnableValidation">
            <summary>
            Whether or not to validate the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntitySettings`1.EditRoles">
            <summary>
            Roles allowed to edit the entity.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Account.UserSettings"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserSettings.Init">
            <summary>
            Initalize settings.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.MinimumPasswordLength">
            <summary>
            Get/set the minimum password length.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.MinimumUserNameLength">
            <summary>
            Get/set the minimum user name length.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.MinimumPasswordAttempts">
            <summary>
            Get/set the minimum password login attempts.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.UserNameRegEx">
            <summary>
            Get/set the regular expression to validate the user name.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.PasswordRegEx">
            <summary>
            Get/set the regular expression to validate the password.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.RequireActivationViaConfirmationEmail">
            <summary>
            Get/set the required confirmation e-mail flag.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.RequireSecurityQuestion">
            <summary>
            Get/set the required security question flag.
            </summary>
        </member>
        <member name="P:ComLib.Account.UserSettings.EnforceLockoutOnIncorrectPasswords">
            <summary>
            Get/set the enforce lockout flag.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Cryptography">
            <summary>
            Example for the Cryptography namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Cryptography.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Tuple2`2">
            <summary>
            This structure can be used to hold
            a tuple of two different types of objects.
            </summary>
            <typeparam name="T1">Type of first object.</typeparam>
            <typeparam name="T2">Type of second object.</typeparam>
        </member>
        <member name="M:ComLib.Tuple2`2.#ctor(`0,`1)">
            <summary>
            Initialize the tuple items.
            </summary>
            <param name="first">First item of tuple.</param>
            <param name="second">Second item of tuple.</param>
        </member>
        <member name="P:ComLib.Tuple2`2.First">
            <summary>
            The first item of the tuple
            </summary>
        </member>
        <member name="P:ComLib.Tuple2`2.Second">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="T:ComLib.Tuple3`3">
            <summary>
            This structure can be used to hold
            a tuple of three different types of objects.
            </summary>
            <typeparam name="T1">Type of first object.</typeparam>
            <typeparam name="T2">Type of second object.</typeparam>
            <typeparam name="T3">Type of third object.</typeparam>
        </member>
        <member name="M:ComLib.Tuple3`3.#ctor(`0,`1,`2)">
            <summary>
            Initialize the tuple items.
            </summary>
            <param name="first">First type.</param>
            <param name="second">Second type.</param>
            <param name="third">Third type.</param>
        </member>
        <member name="P:ComLib.Tuple3`3.First">
            <summary>
            The first item of the tuple
            </summary>
        </member>
        <member name="P:ComLib.Tuple3`3.Second">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="P:ComLib.Tuple3`3.Third">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="T:ComLib.LexHelper">
            <summary>
            Helper class for parsing strings in the format of parameters ( key / value pairs or simple keys )
            </summary>
        </member>
        <member name="M:ComLib.LexHelper.Parse(System.String,System.String,System.String)">
            <summary>
            Parses the line into a dictionary of key/value pairs.
            </summary>
            <param name="line">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.LexHelper.Parse(System.String[],System.String,System.String)">
            <summary>
            Parses the arguments into a dictionary of key/value pairs.
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.LexHelper.ParseArgs(System.String[],System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Checks for named args and gets the name and corresponding value.
            </summary>
            <param name="args">The arguments to parse</param>
            <param name="namedArgs">Dictionary to populate w/ named arguments.</param>
            <param name="unnamedArgs">List to populate with unamed arguments.</param>
            <param name="regexPatternWithValue">Regex pattern for key/value pair args.
            e.g. -env:prod where key=env value=prod</param>
            <param name="regexPatternBool">Regex pattern for boolean based key args.
            -sendemail key=sendemail the value is automatically set to true.
            This is useful for enabled options e.g. -sendemail -recurse </param>
        </member>
        <member name="T:ComLib.Lang.ConstantExpression">
            <summary>
            Variable expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.ConstantExpression.#ctor(System.Object)">
            <summary>
            Initialize
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Lang.ConstantExpression.Evaluate">
            <summary>
            Evaluate value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.Services.GravatarSupport.Rating">
            <summary>
            Rating to use for the gravatar
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.Rating.g">
            <summary>
            All ages.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.Rating.pg">
            <summary>
            Parental guidance suggested.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.Rating.r">
            <summary>
            Restricted.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.Rating.x">
            <summary>
            No one under age of consent.
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.GravatarSupport.IconType">
            <summary>
            Icon Type to use for the gravatar
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.IconType.none">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.IconType.identicon">
            <summary>
            Visual representation of unique value.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.IconType.monsterid">
            <summary>
            Unique monster avatar.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.GravatarSupport.IconType.wavatar">
            <summary>
            Generated avatar.
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.GravatarSupport.Gravatar">
            <summary>
            Twitter class for getting tweets
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Web.Services.GravatarSupport.Gravatar"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.#ctor(System.String,System.Int32,ComLib.Web.Services.GravatarSupport.Rating,ComLib.Web.Services.GravatarSupport.IconType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Web.Services.GravatarSupport.Gravatar"/> class.
            </summary>
            <param name="email">The email.</param>
            <param name="size">The size.</param>
            <param name="rating">The rating.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="imageExtension">The extension of the image.</param>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Web.Services.GravatarSupport.Gravatar"/> class.
            </summary>
            <param name="email">The email.</param>
            <param name="size">The size.</param>
            <param name="rating">The rating.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="imageExtension">The extension of the image.</param>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.Init(System.String,System.Int32,ComLib.Web.Services.GravatarSupport.Rating,ComLib.Web.Services.GravatarSupport.IconType,System.String)">
            <summary>
            Inits the variables with the values supplied.
            </summary>
            <param name="email">The email.</param>
            <param name="size">The size.</param>
            <param name="rating">The rating.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="imageExtension">The extension of the image.</param>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.ImageExtension">
            <summary>
            extension used for image. e.g. jpg or png if applicable.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Rating">
            <summary>
            Rating can either be g, pg, r, x
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.IconType">
            <summary>
            Gets or sets the type of the icon.
            </summary>
            <value>The type of the icon.</value>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:ComLib.Paging.PageNumber">
            <summary>
            Page number to store page and css class for it.
            </summary>
        </member>
        <member name="M:ComLib.Paging.PageNumber.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="number">Number of page.</param>
            <param name="cssClass">Css class.</param>
        </member>
        <member name="P:ComLib.Paging.PageNumber.Page">
            <summary>
            page number
            </summary>
        </member>
        <member name="P:ComLib.Paging.PageNumber.CssClass">
            <summary>
            Css class associated with this page.
            </summary>
        </member>
        <member name="T:ComLib.Paging.PagerAjaxViewModel">
            <summary>
            Pager for Ajax view model.
            </summary>
        </member>
        <member name="P:ComLib.Paging.PagerAjaxViewModel.JSObjectName">
            <summary>
            The javascript object name associated with the pager.
            </summary>
        </member>
        <member name="P:ComLib.Paging.PagerAjaxViewModel.PageSize">
            <summary>
            The size / number of items per page.
            </summary>
        </member>
        <member name="P:ComLib.Paging.PagerAjaxViewModel.CssClassCurrent">
            <summary>
            The css class used for the current page.
            </summary>
        </member>
        <member name="P:ComLib.Paging.PagerAjaxViewModel.OnPageSelectedCallBack">
            <summary>
            The callback function to call when a page is selected.
            </summary>
        </member>
        <member name="T:ComLib.Data.DataUtils">
            <summary>
            Database / table related utility functions.
            </summary>
        </member>
        <member name="M:ComLib.Data.DataUtils.Encode(System.String)">
            <summary>
            Encode the text for single quotes.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DataUtils.BuildSafeColumn(System.String)">
            <summary>
            Builds a column name excluding potentially unsafe characters.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DataUtils.ConvertListToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts the list of objects to a data table using the types public / get properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DataUtils.ConvertPropertyCollectionToDataTable(System.Collections.IList,System.Collections.Generic.IList{System.Reflection.PropertyInfo})">
            <summary>
            Generates a data table with property names
            as columns and property values as row data.
            </summary>
            <param name="objects">List of objects to extract row data from.</param>
            <param name="properties">List of properties to create columns from.</param>
            <returns>Data table with property columns and property value rows.</returns>
        </member>
        <member name="T:ComLib.Data.ConnectionInfo">
            <summary>
            Class to encapsulate a connection string.
            </summary>
        </member>
        <member name="F:ComLib.Data.ConnectionInfo.Empty">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="F:ComLib.Data.ConnectionInfo.Default">
            <summary>
            Default instance 2.
            </summary>
        </member>
        <member name="M:ComLib.Data.ConnectionInfo.#ctor(System.String)">
            <summary>
            Initialize using the connection string.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:ComLib.Data.ConnectionInfo.#ctor(System.String,System.String)">
            <summary>
            Initialize using connection string and provider name.
            </summary>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="P:ComLib.Data.ConnectionInfo.ConnectionString">
            <summary>
            Get the connection string.
            </summary>
        </member>
        <member name="P:ComLib.Data.ConnectionInfo.ProviderName">
            <summary>
            THe name of the database provider. e.g. "System.Data.SqlClient"
            </summary>
        </member>
        <member name="T:ComLib.MapperSupport.MapperIni`1">
            <summary>
            Mapper for sourcing data from Ini files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.Map(System.Object,ComLib.IErrors)">
            <summary>
            Map the objects.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.Map(System.Object,ComLib.IErrors,System.Boolean,System.String,System.Func{System.String,`0})">
            <summary>
            Map the objects.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <param name="enableDynamicTypes"></param>
            <param name="dynamicTypeSectionKeyName"></param>
            <param name="dynamicTypeFactory"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.Map(ComLib.IErrors)">
            <summary>
            Map the ini file
            </summary>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.MapFromFile(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="filepath"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.MapFromText(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="content"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.GetNewObjectAndPropertyMapAsTuple(System.Collections.IDictionary,System.Collections.Generic.IDictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Returns a tuple that contains 1: A new instance of the datatype that an individual section is mapped to,
            and 2: A Dictionary of key : PropertyInfo pair values of that datatype.
            </summary>
            <param name="section"></param>
            <param name="propMapDefault"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.MapperSupport.MapperIni`1.SupportedFormat">
            <summary>
            Get the supported format of the data source.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogDatabase">
            <summary>
            This class represents a logger that can log
            messages to a database.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.#ctor(System.String,System.String,System.String,ComLib.Logging.LogLevel)">
            <summary>
            Constructor
            </summary>
            <param name="appName">Name of application.</param>
            <param name="name">Logger name.</param>
            <param name="connectionString">Connection string to a database that contains the log events table</param>
            <param name="logLevel">Log level to use.</param>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.#ctor(System.String,System.String,ComLib.Entities.IRepository{ComLib.Logging.LogEventEntity},ComLib.Logging.LogLevel)">
            <summary>
            Constructor taking the IRepository that will handle CRUD operations
            of log messages to the Database.
            Also, the repo provided can be a FAKE( In-Memory ) implementation which
            is useful in testing.
            </summary>
            <param name="appName">Name of application.</param>
            <param name="name">Logger name.</param>
            <param name="logLevel">Log level to use.</param>
            <param name="repo"></param>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.Log(ComLib.Logging.LogEvent)">
            <summary>
            Adds a log event to a internal list then runs a flush check.
            </summary>
            <param name="logEvent">Event to log.</param>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.Flush">
            <summary>
            Persists a batch of log events to a database table.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.FlushCheck">
            <summary>
            Checks if the internal list has reached the flush interval.
            </summary>
        </member>
        <member name="T:ComLib.Calendars.Holiday">
            <summary>
            Represents a single holiday.
            </summary>
        </member>
        <member name="F:ComLib.Calendars.Holiday.Month">
            <summary>
            Month of the holiday.
            </summary>
        </member>
        <member name="F:ComLib.Calendars.Holiday.Day">
            <summary>
            Day of the holiday.
            </summary>
        </member>
        <member name="F:ComLib.Calendars.Holiday.IsHardDay">
            <summary>
            Whether or not this holiday always lands on a specific day e.g. Jan 1st. or July 4th. As opposed to thanksgiving ( 3rd thursday )
            </summary>
        </member>
        <member name="F:ComLib.Calendars.Holiday.DayOfTheWeek">
            <summary>
            The day in the week of this holiday. Used for relative(non-hard day) holidays. e.g. Thursday for Thanksgiving.
            </summary>
        </member>
        <member name="F:ComLib.Calendars.Holiday.WeekOfMonth">
            <summary>
            The week of this holiday. Eg. 3 for Thanksgiving.
            </summary>
        </member>
        <member name="F:ComLib.Calendars.Holiday.Description">
            <summary>
            Description for the holiday
            </summary>
        </member>
        <member name="M:ComLib.Calendars.Holiday.#ctor(System.Int32,System.Int32,System.Boolean,System.DayOfWeek,System.Int32,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <param name="isHardDay"></param>
            <param name="dayOfWeek"></param>
            <param name="weekOfMonth"></param>
            <param name="holidayDescription"></param>
        </member>
        <member name="T:ComLib.Extensions.TimeSpanExtensions">
            <summary>
            This static class provides several common extensions for TimeSpan.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.TimeSpanExtensions.IsMidnightExactly(System.TimeSpan)">
            <summary>
            Determines whether [is midnight exactly] [the specified t].
            </summary>
            <param name="t">The t.</param>
            <returns>
            	<c>true</c> if [is midnight exactly] [the specified t]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.TimeSpanExtensions.ToMilitaryString(System.TimeSpan)">
            <summary>
            Get simple time format
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.TimeSpanExtensions.ToMilitaryInt(System.TimeSpan)">
            <summary>
            Returns an integer representing mii
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Extensions.NameValueExtensions">
            <summary>
            Extension classes for NameValueCollection.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.NameValueExtensions.GetOrDefault(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Gets the value associated w/ the key, if it's empty returns the default value.
            </summary>
            <param name="collection"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.NameValueExtensions.GetOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String,``0)">
            <summary>
            Gets the value associated w/ the key and convert it to the correct Type, if empty returns the default value.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="collection">Collection.</param>
            <param name="key">The key representing the value to get.</param>
            <param name="defaultValue">Value to return if the key has an empty value.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Environments.Envs">
            <summary>
            Used to stored the environment for static access.
            </summary>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String)">
            <summary>
            Initialize w/ the selected environment and config paths.
            </summary>
            <param name="selected">Set either "prod | uat | qa | dev"</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String)">
            <summary>
            Set the current environment and also supply available environment names/types.
            </summary>
            <param name="selected">"prod" or "prod1". This should match the name
            from <paramref name="availableEnvsCommaDelimited"/></param>
            <param name="availableEnvsCommaDelimited">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String,System.String)">
            <summary>
            Set the current environment and also supply available environment names/types.
            </summary>
            <param name="selected">"prod" or "prod1". This should match the name
            from <paramref name="availableEnvsCommaDelimited"/></param>
            <param name="availableEnvsCommaDelimited">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
            <param name="refPaths">The config reference paths. e.g. "prod.config,qa.config".</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set the current environment and also supply available environment names/types.
            </summary>
            <param name="selected">"prod" or "prod1". This should match the name
            from <paramref name="availableEnvsCommaDelimited"/></param>
            <param name="availableEnvsCommaDelimited">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
            <param name="refPaths">The config reference paths. e.g. "prod.config,qa.config".</param>
            <param name="distributeRefPaths"></param>
            <param name="enableInheritance">Whether or not environment inheritance is enabled.</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Set the current environment.
            </summary>
            <param name="selected">Name of the selected environment</param>
            <param name="availableEnvs"></param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Set the current environment.
            </summary>
            <param name="envGroupName">Can have multiple environment definitions.
            If you just want to use the default one, supply emtpy string.</param>
            <param name="selected">"prod"</param>
            <param name="availableEnvs">All the available environments.</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(ComLib.Environments.IEnv)">
            <summary>
            Register an environment for a specific group and also set the selected environment
            within the environment context for that group.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,ComLib.Environments.IEnv)">
            <summary>
            Register an environment for a specific group and also set the selected environment
            within the environment context for that group.
            </summary>
            <param name="envGroup">e.g. "database"</param>
            <param name="env"></param>
        </member>
        <member name="M:ComLib.Environments.Envs.Get(System.String)">
            <summary>
            Return the environment service the respective environment group.
            </summary>
            <param name="group">"database"</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Environments.Envs.Current">
            <summary>
            Get the current environment.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityHelper">
            <summary>
            Helper class for entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityHelper.FromUrl``1(System.String)">
            <summary>
            Get entity from the type of (T) and from the id in the title. The id must by at the end of the url prefixed by "-" as in "my-post-123"
            </summary>
            <typeparam name="T">The type of entity to get.</typeparam>
            <param name="title">The title of the entity with the id in the end.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityHelper.IdFromTitle(System.String)">
            <summary>
            Get the id from the title.
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityHelper.AsFeed``1(System.Uri,System.String,System.String,System.String)">
            <summary>
            Convert this to a feed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="author"></param>
            <param name="description"></param>
            <param name="title"></param>
            <param name="uri">The uri of the request</param>
        </member>
        <member name="T:ComLib.Entities.EntityAction">
            <summary>
            Enum to represent an action being performed on an entity.
            This action is used and passed on to validators and massagers
            so they can run appropriately.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Create">
            <summary>
            Represents creation action on entity.
            </summary>        
        </member>
        <member name="F:ComLib.Entities.EntityAction.Retrieve">
            <summary>
            Represents retrieval action on entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Update">
            <summary>
            Represents update action on entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Delete">
            <summary>
            Represents deletion action on entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Copy">
            <summary>
            Copy a entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Import">
            <summary>
            Import entity(s)
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Export">
            <summary>
            Export entity(s)
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Backup">
            <summary>
            Backup the entities.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Save">
            <summary>
            Save the entity.
            </summary>
        </member>
        <member name="T:ComLib.Data.DBQuery">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.String,System.Data.DbType,System.Object,ComLib.Data.IRowMapper{System.Data.IDataReader,``0})">
            <summary>
            Executes the rowmapper with a single input parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper"></param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="paramName">E.g. "userName"</param>
            <param name="paramType">string</param>
            <param name="paramValue">user001</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.QueryNoParams``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,ComLib.Data.IRowMapper{System.Data.IDataReader,``0})">
            <summary>
            Executes the rowmapper with a single input parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper">Database helper</param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],ComLib.Data.IRowMapper{System.Data.IDataReader,``0})">
            <summary>
            Executes the rowmappers
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper">Database helper</param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>       
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="dbParameters">Array of parameters for the query.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``2(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],ComLib.Data.IRowMapper{System.Data.IDataReader,``0},System.String)">
            <summary>
            Executes the rowmapper and get a single output parameter result.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOutputParam"></typeparam>
            <param name="dbHelper">Database helper</param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="dbParameters">Array of parameters for the query</param>
            <param name="outputParamName">The name of the output parameter</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],ComLib.Data.IRowMapper{System.Data.IDataReader,``0},System.String[])">
            <summary>
            Executes the rowmapper and get multiple output parameter results.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper"></param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="dbParameters">Array of parameters for the query</param>
            <param name="outputParamNames">Array of output parameter names.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CsvParse.CsvWriter">
            <summary>
            Class to write out data into a csv format.
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.#ctor(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
            <param name="firstRowInDataAreColumns"></param>
            <param name="quoteChar">Quote character to use.</param>
            <param name="append">Append to file</param>
            <param name="newLine">New line to use.</param>
            <param name="quoteAll">Whether or not to quote all the values.</param>        
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Init(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
            <param name="firstRowInDataAreColumns"></param>
            <param name="quoteAll">Whether or not to quote all the values.</param>  
            <param name="append">Whether or not to append to csv file.</param>
            <param name="quoteChar">The quote char to use to enclose data.</param>
            <param name="newLine">New line to use.</param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Write">
            <summary>
            Write out the data supplied at Initialization.
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.WriteText">
            <summary>
            Write out the data supplied at Initialization.
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.WriteRow(System.Collections.Generic.List{System.Object})">
            <summary>
            Write out a row of data.
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.WriteColumns(System.Collections.Generic.List{System.String})">
            <summary>
            Write out the columns.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Dispose">
            <summary>
            Dispose of the csv writer
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Dispose object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:ComLib.CsvParse.CsvWriter.CsvWriterConfig">
            <summary>
            Settings for writing out the csv data.
            </summary>
        </member>
        <member name="T:ComLib.Cryptography.DES.TripleDES">
            <summary>
            This class implements Triple DES encrypt and decrypt methods
            that operate on hexadecimal data and keys. Data to be encrypted
            or decrypted should be exactly 16 hexadecimal characters.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.DES.TripleDES.Encrypt(ComLib.Cryptography.DES.DESKey,System.String)">
            <summary>
            Encrypts hexadecimal data using a DES key.
            </summary>
            <param name="key">DES key to use with the encrypt operation.</param>
            <param name="data">Hexadecimal data to encrypt.</param>
            <returns>Encrypted hexadecimal data.</returns>
        </member>
        <member name="M:ComLib.Cryptography.DES.TripleDES.Decrypt(ComLib.Cryptography.DES.DESKey,System.String)">
            <summary>
            Decrypts hexadecimal data using a DES key.
            </summary>
            <param name="key">DES key to use with the decrypt operation.</param>
            <param name="data">Hexadecimal data to decrypt.</param>
            <returns>Decrypted hexadecimal data.</returns>
        </member>
        <member name="M:ComLib.Cryptography.DES.TripleDES.DESEncrypt(ComLib.Cryptography.DES.DESKey,System.String)">
            <summary>
            Encrypts hexadecimal data using a single-length DES key.
            </summary>
            <param name="key">DES key to use with the encrypt operation.</param>
            <param name="data">Hexadecimal data to encrypt.</param>
            <returns>Encrypted hexadecimal data.</returns>
        </member>
        <member name="M:ComLib.Cryptography.DES.TripleDES.DESDecrypt(ComLib.Cryptography.DES.DESKey,System.String)">
            <summary>
            Decrypts hexadecimal data using a single-length DES key.
            </summary>
            <param name="key">DES key to use with the decrypt operation.</param>
            <param name="data">Hexadecimal data to decrypt.</param>
            <returns>Decrypted hexadecimal data.</returns>
        </member>
        <member name="M:ComLib.Cryptography.DES.TripleDES.DESEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts 8 bytes of data with an 8-byte key, ECB mode, no padding, no IV.
            </summary>
            <param name="key">8-byte DES key to use in the encrypt operation.</param>
            <param name="data">8-byte data to encrypt.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:ComLib.Cryptography.DES.TripleDES.DESDecrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts 8 bytes of data with an 8-byte key, ECB mode, no padding, no IV.
            </summary>
            <param name="key">8-byte DES key to use in the decrypt operation.</param>
            <param name="data">8-byte data to decrypt.</param>
            <returns>Decrypted data.</returns>
        </member>
        <member name="M:ComLib.Cryptography.DES.TripleDES.DESOperation(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts 8 bytes of data using an 8-byte key, ECB mode, no padding, no IV.
            </summary>
            <param name="key">8-byte DES key to use with the operation.</param>
            <param name="data">8-byte data to use with the operation.</param>
            <param name="encrypt">True to encrypt, false to decrypt.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="T:ComLib.BootStrapSupport.IAppContext">
            <summary>
            Simple interface to facilitate storage of data
            to be passed between tasks.
            </summary>
        </member>
        <member name="P:ComLib.BootStrapSupport.IAppContext.Bag">
            <summary>
            Get/set the data bag stored in this instance.
            </summary>
        </member>
        <member name="T:ComLib.BootStrapSupport.AppContext">
            <summary>
            Simple wrapper for passing context data between tasks.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.AppContext.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="P:ComLib.BootStrapSupport.AppContext.Bag">
            <summary>
            Get/set the data bag stored in this instance.
            </summary>
        </member>
        <member name="T:ComLib.Automation.ScriptXml">
            <summary>
            Executes command in a script that are in the format of xml. similar to NAnt.
            Features Include:
            
            # GENERAL
            Scenario: Can use variables in script
            Scenario: Can map commands to c# classes
            Scenario: Can automap command parameters to c# class properties 
            Scenario: C# Command classes have access to use inner xml element for data
            Scenario: Command can be configured to fail but allow script to continue running
            Scenario: Script result has access to each command result ( command Index, return value, success / fail, message )
            Scenario: Script result can build up text combining all command result messages
            Scenario: Can specify a "RefKey" on a command to uniquey identify and retrieve that command result value
            Scenario: Can include file into the script
            Scenario: Can add script variables programmatically
            
            # FAILURE
            Scenario: Script can gracefully handle invalid xml 
            Scenario: Script can gracefully handle invalid command
            Scenario: Script can gracefully handle command exception
            
            # SUBSTITUTIONS
            Scenario: Variables can reference other variables using format ${variable_name}
            Scenario: Command parameters can reference variables using format ${variable_name}
            Scenario: Command can assign it's return value to a variable via "assignto" parameter assignto="${hello_world_result}
            Scenario: Registered default variables
            Scenario: Register functions ${date.hour} using name/lamda pairs
            </summary>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.#ctor(System.String)">
            <summary>
            Initialize with assembly list.
            </summary>
            <param name="assemblies">Delimited list of assemblies.</param>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.Include(System.String,System.String)">
            <summary>
            Registers an external script that may be referenced in the script to run.
            </summary>
            <param name="name">The name of the external file to include</param>
            <param name="content">The content of the external file</param>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.DoRun(System.String)">
            <summary>
            Run the script content.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.IsExistingVariable(System.String)">
            <summary>
            Returns whether or not the name provided is exists as a variable.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.Get``1(System.String)">
            <summary>
            Get variable value from either it's scope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.GetParam``1(System.String,``0)">
            <summary>
            Get parameter value from the current command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the parameter to get</param>
            <param name="defaultVal">Default value to get if parameter does not exist</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.ProcessScript(System.Xml.XmlNodeList)">
            <summary>
            Process the content of the script.
            </summary>
            <param name="allTags">All the tags to process</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.ProcessVariable(System.Xml.XmlNode)">
            <summary>
            Process the xml tag "var" representing a variable.
            </summary>
            <param name="xmlVar"></param>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.ProcessInclude(System.Xml.XmlNode)">
            <summary>
            Process the xml tag "include" which now only supports "var" tags.
            </summary>
            <param name="xmlInclude"></param>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.ProcessForLoop(System.Xml.XmlNode)">
            <summary>
            Process the xml tag for which loops through commands inside it.
            </summary>
            <param name="xmlFor">The xml for loop element</param>
        </member>
        <member name="M:ComLib.Automation.ScriptXml.ProcessCommand(System.Xml.XmlNode,System.Int32)">
            <summary>
            Processs the xml tag "command".
            </summary>
            <param name="xmlCommand">The xml node representing the command</param>
            <param name="commandIndex">The index number of the xml command representing a command</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.ScriptResult">
            <summary>
            Result of a script execution.
            </summary>
        </member>
        <member name="M:ComLib.Automation.ScriptResult.#ctor(System.DateTime,System.DateTime,System.Boolean,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="started">Start time of script</param>
            <param name="ended">End time of script.</param>
            <param name="success">Whether or not the script execution was successful</param>
            <param name="message">A combined message of all the errors.</param>
        </member>
        <member name="M:ComLib.Automation.ScriptResult.ValueForRefKey(System.String)">
            <summary>
            Get the return value of a specific command.
            </summary>
            <param name="refkey"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.ScriptResult.Messages(System.String)">
            <summary>
            Gets the combined output of each command result
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Automation.ScriptResult.Name">
            <summary>
            Name of the script.
            </summary>
        </member>
        <member name="P:ComLib.Automation.ScriptResult.FilePath">
            <summary>
            Filepath of the script.
            </summary>
        </member>
        <member name="P:ComLib.Automation.ScriptResult.CommandResults">
            <summary>
            List of results for each command.
            </summary>
        </member>
        <member name="T:ComLib.Automation.CommandService">
            <summary>
            Service that loads all the commands ( that have CommandAttribute ) on classes.
            This loads commands from multiple dlls that are supplied by the caller.
            </summary>
        </member>
        <member name="M:ComLib.Automation.CommandService.#ctor">
            <summary>
            Initialize command service
            </summary>
        </member>
        <member name="M:ComLib.Automation.CommandService.GetHelpOn(System.String,System.String)">
            <summary>
            Gets the help text for the command name.
            </summary>
            <param name="commandName">Name of the command to get help on</param>
            <param name="newLine">New line to use, defaults to Environment.NewLine</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.CommandService.GetSampleRun(System.String)">
            <summary>
            Builds up a sample call for the command.
            </summary>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Automation.CommandResult">
            <summary>
            Result of a script action.
            </summary>
        </member>
        <member name="F:ComLib.Automation.CommandResult.Empty">
            <summary>
            Null object
            </summary>
        </member>
        <member name="M:ComLib.Automation.CommandResult.#ctor(System.DateTime,System.DateTime,System.Boolean,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="started">Start time of script</param>
            <param name="ended">End time of script.</param>
            <param name="success">Whether or not the script execution was successful</param>
            <param name="message">A combined message of all the errors.</param>
        </member>
        <member name="M:ComLib.Automation.CommandResult.ToXml">
            <summary>
            Xml representation of result
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Automation.CommandResult.Name">
            <summary>
            Name of the command.
            </summary>
        </member>
        <member name="P:ComLib.Automation.CommandResult.Index">
            <summary>
            Index of the command.
            </summary>
        </member>
        <member name="P:ComLib.Automation.CommandResult.RefKey">
            <summary>
            Key that can be used to uniquely identify a command result.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.RoleHelper">
            <summary>
            This class provides utility methods related to the ComLib.Authentication namespace.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.RoleHelper.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.RoleHelper.IsInRoles(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.RoleHelper.ToStringArray(System.String,System.Char)">
            <summary>
            Parses a delimited list of items into a string[].
            </summary>
            <param name="delimitedText">"1,2,3,4,5,6"</param>
            <param name="delimeter">','</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Application.AppHelper">
            <summary>
            Utility class with methods that provide application information.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppHelper.HandleOptions(ComLib.Application.IApp,ComLib.Arguments.Args)">
            <summary>
            <para>
            Handle possible "meta data" options of the application.
            1. -help
            2. -version
            3. -pause
            </para>
            </summary>
            <param name="app"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppHelper.ShowAppInfo(ComLib.Application.IApp)">
            <summary>
            Show the application info.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppHelper.GetAppRunSummary(ComLib.Application.IApp,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Get application run summary.
            </summary>
            <param name="app"></param>
            <param name="isStart"></param>
            <param name="summaryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppHelper.GetAppInfo(ComLib.Application.IApp)">
            <summary>
            Get application information as string.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppHelper.BuildAppRunSummary(ComLib.Application.IApp,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Creates a runtime summary for the application.
            </summary>
            <param name="app">Application to get summary for.</param>
            <param name="isStart">True if application is starting.</param>
            <param name="summaryInfo">Dictionary to use when storing runtime summary information.</param>
        </member>
        <member name="M:ComLib.Application.AppHelper.GetAppRunSummaryAsString(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Returns a string with the application summary information..
            </summary>
            <param name="isStart">True if the application is starting.</param>
            <param name="summaryInfo">Dictionary with summary info.</param>
            <returns>String with application summary.</returns>
        </member>
        <member name="T:ComLib.Application.AppDecoratorHelper">
            <summary>
            This is a static decorator( As opposed to using AOP ) to get cross-cutting behaviour.).
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.#ctor(System.Type,System.String)">
            <summary>
            Initialize the decorators.
            </summary>
            <param name="appType"></param>
            <param name="delimitedDecorators"></param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.Init(System.Type,System.String)">
            <summary>
            Determine if there are any decorations specified.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.IsDecoratedWith(System.String)">
            <summary>
            Determine if the decorator specified is enabled for the application being run.
            </summary>
            <param name="decoratorName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.Execute(System.String,System.String,System.Boolean,System.Action)">
            <summary>
            Executes the method action by wrapping it with
            1. Logging of start / end time.
            2. Status updates.
            </summary>
            <param name="methodName">The name of the method being executed.</param>
            <param name="taskName">Option name to use for the TaskName for StatusUpdates.</param>
            <param name="wrapTryCatch">Whether or not to wrap the call inside a try catch.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.Execute``1(System.String,System.String,System.Boolean,System.Func{``0})">
            <summary>
            Executes the method action by wrapping it with
            1. Logging of start / end time.
            2. Status updates.
            </summary>
            <param name="methodName">The name of the method being executed.</param>
            <param name="taskName">Option name to use for the TaskName for StatusUpdates.</param>
            <param name="wrapTryCatch">Whether or not to wrap the call inside a try catch.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.Execute(System.String,System.String,System.Action)">
            <summary>
            Executes the method action by wrapping it with
            1. Logging of start / end time.
            2. Status updates.
            </summary>
            <param name="methodName">The name of the method being executed.</param>
            <param name="taskName">Option name to use for the TaskName for StatusUpdates.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.HandleStart(System.String,System.DateTime)">
            <summary>
            Handle the "Logging" the starting of the method call before execution.
            </summary>
            <param name="methodName"></param>
            <param name="startTime"></param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.HandleEnd(System.String,System.DateTime)">
            <summary>
            Handle the "Logging" the starting of the method call before execution.
            </summary>
            <param name="methodName"></param>
            <param name="startTime"></param>
        </member>
        <member name="T:ComLib.Samples.Example_DomainModel">
            <summary>
            Example for the Entities namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_DomainModel.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_DomainModel.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_DomainModel.Person">
            <summary>
            Person domain object.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_DomainModel.Person.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_DomainModel.Person.Ssn">
            <summary>
            Social security.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_DomainModel.Person.PersonDescription">
            <summary>
            some description.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_DomainModel.PersonValidator">
            <summary>
            Validator class for the Person domain object.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_DomainModel.PersonValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validates a Person object.
            </summary>
            <param name="validationEvent">Event to use.</param>
            <returns>Validation result.</returns>
        </member>
        <member name="T:ComLib.Samples.Example_DomainModel.PersonSettings">
            <summary>
            Settings class for the person domain object.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_DomainModel.PersonSettings.Init">
            <summary>
            Default the values by overriding the initialization.
            </summary>
        </member>
        <member name="P:ComLib.Samples.Example_DomainModel.PersonSettings.MaxLength">
            <summary>
            Max length for persons name.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_DomainModel.Persons">
            <summary>
            Class to use the ActiveRecord behaviour.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_DomainModel.Persons.New">
            <summary>
            Creates a new instance of BlogPost and 
            initializes it with a validator and settings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.Example_Csv">
            <summary>
            Example for the CsvParse namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Csv.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.AutoMapperHelper">
            <summary>
            Helper class for automapping
            </summary>
        </member>
        <member name="M:ComLib.AutoMapperHelper.GetPropertyMap(System.Type,System.Boolean)">
            <summary>
            Get a dictionary of the types Public | SetProperty | Instance property names to the PropertyInfo
            </summary>
            <param name="type"></param>
            <param name="isCaseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.AutoMapperHelper.GetNestedProperty(System.Object,System.String,System.Boolean)">
            <summary>
            Get the propertyinfo of the lowest level nested object.
            </summary>
            <param name="obj">The object having the property</param>
            <param name="propName">"Address.Neighborhood.City" </param>
            <param name="createNestedObjectIfNull">Whether or not to create the nested object if it's null.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LexList">
            <summary>
            Lexical parser used to parsing text.
            e.g. Such as parsing arguments to a program.
            </summary>
            <example>
                var items = LexListParser.Parse("'firstname', 25.8, 3/20/2009, true, "lastname" ");
            </example>
        </member>
        <member name="F:ComLib.LexList._lines">
            <summary>
            List of parsed lines.
            </summary>
        </member>
        <member name="F:ComLib.LexList._separatorMap">
            <summary>
            Map of characters representing separaters.
            </summary>
        </member>
        <member name="F:ComLib.LexList._defaultSettings">
            <summary>
            Default settings for the lexlist when used in a static parse context
            </summary>
        </member>
        <member name="M:ComLib.LexList.Parse(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>Dictionary with parse results.</returns>
        </member>
        <member name="M:ComLib.LexList.ParseList(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>List with parse results.</returns>
        </member>
        <member name="M:ComLib.LexList.ParseTable(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>List with list of parse results.</returns>
        </member>
        <member name="M:ComLib.LexList.Parse(System.String,ComLib.LexListSettings)">
            <summary>
            Parse supplied text using supplied settings.
            </summary>
            <param name="text">Text to parse.</param>
            <param name="settings">Parse settings to use.</param>
            <returns>List with list of parse results.</returns>
        </member>
        <member name="M:ComLib.LexList.#ctor">
            <summary>
            Create using default settings.
            </summary>
        </member>
        <member name="M:ComLib.LexList.#ctor(ComLib.LexListSettings)">
            <summary>
            Create with supplied settings.
            </summary>
            <param name="settings">Parse settings to use.</param>
        </member>
        <member name="M:ComLib.LexList.Init(ComLib.LexSettings)">
            <summary>
            Initialize using the settings supplied.
            </summary>
            <param name="settings">Parse settings to use.</param>
        </member>
        <member name="M:ComLib.LexList.ParseLines(System.String)">
            <summary>
            Parse lines.
            </summary>
            <param name="text">Text to parse.</param>
            <returns>List with list of parse results.</returns>
        </member>
        <member name="M:ComLib.LexList.Reset(System.String)">
            <summary>
            Resets/clears the parsed lines.
            </summary>
            <param name="line">Line of string to start over.</param>
        </member>
        <member name="M:ComLib.LexList.ParseQuotedItem(ComLib.LexListSettings)">
            <summary>
            Parse a quoted item. e.g. "batman"
            </summary>
            <param name="settings">Parse settings to use.</param>
        </member>
        <member name="M:ComLib.LexList.CheckAndConsumeWhiteSpace">
            <summary>
            Check and consume whitespace.
            </summary>
            <returns>False if no whitespace is present, true
            if whitespace has been consumed.</returns>
        </member>
        <member name="M:ComLib.LexList.CheckAndHandleNewLine(ComLib.LexListSettings)">
            <summary>
            Check for and handle new line.
            </summary>
            <param name="settings">Parse settings to use.</param>
            <returns>False if no eol was detected, true if it was handled.</returns>
        </member>
        <member name="M:ComLib.LexList.HasMore">
            <summary>
            Has more text.
            </summary>
            <returns>True if more text exists.</returns>
        </member>
        <member name="M:ComLib.LexList.ParseNonQuotedItem(ComLib.LexListSettings)">
            <summary>
            Parse a non-quoted item e.g. 123 as opposed to "123".
            </summary>
            <param name="settings">Parse settings to use.</param>
        </member>
        <member name="T:ComLib.LexListSettings">
            <summary>
            Parse settings for the Lexical List parser.
            </summary>
        </member>
        <member name="F:ComLib.LexListSettings.Delimeter">
            <summary>
            Delimiter used to separate tokens.
            </summary>
        </member>
        <member name="F:ComLib.LexListSettings.TrimWhiteSpace">
            <summary>
            Indicates whether or not to trim the white space if the
            separator is not a whitespace char. e.g. if "," trim white space.
            </summary>
        </member>
        <member name="F:ComLib.LexListSettings.MultipleRecordsUsingNewLine">
            <summary>
            Flag indicating whether or not to handle multiple lines as a single record.
            Otherwise, new lines indicate end of record.
            </summary>
        </member>
        <member name="F:ComLib.LexListSettings.AllowNewLineInFirstLine">
            <summary>
            Whether not a new line is allowed in the first line.
            </summary>
        </member>
        <member name="F:ComLib.LexListSettings.AllowNewLinesAsTextOnlyAfterFirstLine">
            <summary>
            Whether or not new lines should be considered as text after the first line.
            </summary>
        </member>
        <member name="T:ComLib.Lang.LNumber">
            <summary>
            Boolean datatype.
            </summary>
        </member>
        <member name="M:ComLib.Lang.LNumber.ToDouble">
            <summary>
            Get boolean value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchSource">
            <summary>
            Type of data to search.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.Search.SearchSource.web">
            <summary>
            Search for web pages.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.Search.SearchSource.image">
            <summary>
            Search for images.
            </summary>
        </member>
        <member name="F:ComLib.Web.Services.Search.SearchSource.news">
            <summary>
            Search for news.
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchEngine">
            <summary>
            SearchEngine
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngine.Init(ComLib.Web.Services.Search.ISearchEngineService)">
            <summary>
            Inits the specified service.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngine.Search(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Searches the specified keywords.
            </summary>
            <param name="keywords">The keywords.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngine.SearchSite(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Searches the site.
            </summary>
            <param name="keywords">The keywords.</param>
            <param name="siteToSearch">The site to search.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchEngine.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchEngineBing">
            <summary>
            Search Engine.
            commoncms
            7F2DBB51D1FE49D765EE5BE05984D589872A74E6
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.Search.ISearchEngineService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.Search.ISearchEngineService.Search(ComLib.Web.Services.Search.SearchRequest)">
            <summary>
            Searches the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Web.Services.Search.ISearchEngineService.Settings">
            <summary>
            Settings for search.
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngineBing.#ctor(ComLib.Web.Services.Search.SearchSettings)">
            <summary>
            Initialize.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngineBing.Search(ComLib.Web.Services.Search.SearchRequest)">
            <summary>
            Executes the query.
            </summary>
            <returns></returns>            
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchEngineBing.Settings">
            <summary>
            Settings for searching.
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchSettings">
            <summary>
            Settings for the search engine.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchSettings.AppId">
            <summary>
            Gets or sets the app id.
            </summary>
            <value>The app id.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchSettings.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchResult">
            <summary>
            Search Engine results.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchRequest">
            <summary>
            SearchEngine request
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.SiteToSearch">
            <summary>
            Used to search only a specific site.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.ResultsPerPage">
            <summary>
            Gets or sets the results per page.
            </summary>
            <value>The results per page.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.QueryText">
            <summary>
            Gets or sets the query text.
            </summary>
            <value>The query text.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.Highlight">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ComLib.Web.Services.Search.SearchEngine"/> is highlight.
            </summary>
            <value><c>true</c> if highlight; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComLib.Web.UI.Controls.CascadeDropDownListControl">
            <summary>
            This class implements a cascaded drop down list control.
            </summary>
        </member>
        <member name="M:ComLib.Web.UI.Controls.CascadeDropDownListControl.CreateChildControls">
            <summary>
            Add server controls to the controls collection so that the framework
            can render them.
            </summary>
        </member>
        <member name="M:ComLib.Web.UI.Controls.CascadeDropDownListControl.OnInit(System.EventArgs)">
            <summary>
            OnInit event handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ComLib.Web.UI.Controls.CascadeDropDownListControl.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the contents of the control.
            </summary>
            <param name="writer">Rendering target.</param>
        </member>
        <member name="M:ComLib.Web.UI.Controls.CascadeDropDownListControl.BuildClientSideJavascript">
            <summary>
            kdcat1.ListControlId = "&lt;%=lstC.ClientID %&gt;";
            kdcat1.RetrieveAllService = "AjaxServer.aspx";
            kdcat1.ResultTagName = "country";
            kdcat1.DependentCat = "kdcat2";
            kdcat1.FilterValueFromState = "1";  
            kdcat1.UseIdForFilterValue = true;           
            kdcat1.Init(); 
            </summary>
            <returns>String with client side java script.</returns>
        </member>
        <member name="M:ComLib.Web.UI.Controls.CascadeDropDownListControl.RaisePostDataChangedEvent">
            <summary>
            Raises the data changed event.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.NeedsInitialization">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.AddCustomInitialItem">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.InitialItemName">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.InitialItemValue">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.OnSelectionChangedClientSideHandler">
            <summary>
            Javascript event handler for the selection changed event
            on the drop-down listbox.
            </summary>
            <example>"kdStates.LoadDataUsingFilter" or "countryChangedHandler"
            </example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.UseIdForFilterValue">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.UrlRetrieveAllService">
            <summary>
            Url of the page to get all the values.
            </summary>
            <example>AjaxLocation.aspx?action=GetAllCountries</example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.SelectedValue">
            <summary>
            The value to use when restoring state.
            </summary>
            <example>"1" This is the value of the drop-down list option.</example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.JsObjectName">
            <summary>
            Name of the javascript client side object.
            </summary>
            <example>"kdCountry"</example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.ResultTagName">
            <summary>
            Name of the result tag name from the url to retrieve
            values.
            </summary>
            <example>"state" or "country"</example>
        </member>
        <member name="T:ComLib.Extensions.IntegerExtensions">
            <summary>
            Extension classes for integers.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates the action using a for loop from 0 to ndx.
            </summary>
            <param name="ndx">The number of times to iterate ( 0 based )</param>
            <param name="action">The action to call</param>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Upto(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates over the action from the start to the end non-inclusive.
            </summary>
            <param name="start">The starting number.</param>
            <param name="end">The ending number ( non-inclusive )</param>
            <param name="action">Action to call.</param>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.UptoIncluding(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates over the action from start to end including the end number.
            </summary>
            <param name="start">The starting number.</param>
            <param name="end">The ending number ( inclusive )</param>
            <param name="action">Action to call.</param>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Downto(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates over the action from the end to the start non-inclusive.
            </summary>
            <param name="start">The starting number  ( non-inclusive ).</param>
            <param name="end">The ending number</param>
            <param name="action">Action to call.</param>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.DowntoIncluding(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates over the action from the end to the start inclusive.
            </summary>
            <param name="start">The starting number  ( inclusive ).</param>
            <param name="end">The ending number</param>
            <param name="action">Action to call.</param>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.IsOdd(System.Int32)">
            <summary>
            Determines if the number provided is an odd number.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.IsEven(System.Int32)">
            <summary>
            Determines if the number provided is an even number.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.MegaBytes(System.Int32)">
            <summary>
            Converts the number provided into kilobytes by dividing it by 1000;
            </summary>
            <param name="numberInBytes">Number in bytes</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.KiloBytes(System.Int32)">
            <summary>
            Converts the number provided into kilobytes by dividing it by 1000;
            </summary>
            <param name="numberInBytes">Number in bytes</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.TeraBytes(System.Int32)">
            <summary>
            Converts the number provided into kilobytes by dividing it by 1000;
            </summary>
            <param name="numberInBytes">Number in bytes</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.IsLeapYear(System.Int32)">
            <summary>
            Determines whether or not year supplied is a leap year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.DaysAgo(System.Int32)">
            <summary>
            Gets the datetime from today - days supplied.
            </summary>
            <param name="days">Number of days ago</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.MonthsAgo(System.Int32)">
            <summary>
            Gets the datetime from today - months supplied.
            </summary>
            <param name="months">Number of months ago</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.YearsAgo(System.Int32)">
            <summary>
            Gets the datetime from today - years supplied.
            </summary>
            <param name="years">Number of years ago</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.HoursAgo(System.Int32)">
            <summary>
            Gets the datetime from now - hours supplied
            </summary>
            <param name="hours">Number of hours ago</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.MinutesAgo(System.Int32)">
            <summary>
            Gets the datetime from now - minutes supplied
            </summary>
            <param name="minutes">Number of minutes ago</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.DaysFromNow(System.Int32)">
            <summary>
            Gets the datetime from now + days supplied
            </summary>
            <param name="days">Number of days from now</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.MonthsFromNow(System.Int32)">
            <summary>
            Gets the datetime from now + months supplied
            </summary>
            <param name="months">Number of months from now</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.YearsFromNow(System.Int32)">
            <summary>
            Gets the datetime from now + years supplied
            </summary>
            <param name="years">Number of years from now</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.HoursFromNow(System.Int32)">
            <summary>
            Gets the datetime from now + hours supplied
            </summary>
            <param name="hours">Number of hourse from now</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.MinutesFromNow(System.Int32)">
            <summary>
            Gets the datetime from now + minutes supplied
            </summary>
            <param name="minutes">Number of minutes from now</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Days(System.Int32)">
            <summary>
            Converts the number to days as a TimeSpan.
            </summary>
            <param name="num">Number representing days</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Hours(System.Int32)">
            <summary>
            Converts the number to hours as a TimeSpan
            </summary>
            <param name="num">Number representing hours</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Minutes(System.Int32)">
            <summary>
            Converts the number of minutes as a TimeSpan
            </summary>
            <param name="num">Number representing minutes</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Seconds(System.Int32)">
            <summary>
            Converts the number to seconds as a TimeSpan
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Time(System.Int32)">
            <summary>
            Converts the number to a TimeSpan.
            </summary>
            <param name="num">Number reprsenting a timespan</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Time(System.Int32,System.Boolean)">
            <summary>
            Converts the military time to a timespan.
            </summary>
            <param name="num"></param>
            <param name="convertSingleDigitsToHours">Indicates whether to treat "9" as 9 hours instead of minutes.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.TimeWithSuffix(System.Int32)">
            <summary>
            Returns military time formatted as standard time w/ suffix am/pm.
            e.g. 1am 9:30pm
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.ToHex(System.Int32)">
            <summary>
            Returns a hexadecimal string representation of the number.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.ToBinary(System.Int32)">
            <summary>
            Returns a binary string representation of the number.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Logging.ILogMulti">
            <summary>
            Interface for a logger that represents a chain(multiple) loggers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILogMulti.Append(ComLib.Logging.ILog)">
            <summary>
            Append another logger to the chain of loggers.
            </summary>
            <param name="logger">Instance of logger to append.</param>
        </member>
        <member name="M:ComLib.Logging.ILogMulti.Replace(ComLib.Logging.ILog)">
            <summary>
            Replaces all the existing loggers w/ the supplied logger.
            </summary>
            <param name="logger">Instance of logger to use.</param>
        </member>
        <member name="M:ComLib.Logging.ILogMulti.Clear">
            <summary>
            Clear all the chained loggers.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILogMulti.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="loggerName">Name of logger to retrieve.</param>
        </member>
        <member name="P:ComLib.Logging.ILogMulti.Item(System.Int32)">
            <summary>
            Get a logger by it's index position.
            </summary>
            <param name="index">Index of logger to retrieve.</param>
        </member>
        <member name="P:ComLib.Logging.ILogMulti.Count">
            <summary>
            Get the number of loggers that are in here.
            </summary>
        </member>
        <member name="T:ComLib.EmailSupport.EmailServiceSettings">
            <summary>
            Email Settings
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailServiceSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailServiceSettings"/> class.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailServiceSettings.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailServiceSettings"/> class.
            </summary>
            <param name="smtpService">The SMTP service.</param>
            <param name="port">The port.</param>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.SmptServer">
            <summary>
            Gets or sets the SMPT server.
            </summary>
            <value>The SMPT server.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.UsePort">
            <summary>
            Gets or sets a value indicating whether [use port].
            </summary>
            <value><c>true</c> if [use port]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.AuthenticationUserName">
            <summary>
            Gets or sets the name of the authentication user.
            </summary>
            <value>The name of the authentication user.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.AuthenticationPassword">
            <summary>
            Gets or sets the authentication password.
            </summary>
            <value>The authentication password.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.IsAuthenticationRequired">
            <summary>
            Gets or sets a value indicating whether this instance is authentication required.
            </summary>
            <value>
            	<c>true</c> if this instance is authentication required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateRepository">
            <summary>
            Generic repository for persisting StatusUpdate.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.StatusUpdater.StatusUpdateRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db">Database to use.</param>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.Create(ComLib.StatusUpdater.StatusUpdate)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity">Entity to create.</param>
            <returns>Entity passed to this method.</returns>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.Update(ComLib.StatusUpdater.StatusUpdate)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity">Entity to use.</param>
            <returns>Entity passed to this method.</returns>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateRowMapper">
            <summary>
            RowMapper for StatusUpdate.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Maps entity rows to data rows.
            </summary>
            <param name="reader">Database reader with row info and data.</param>
            <param name="rowNumber">Row number.</param>
            <returns>Instance of status update created from row.</returns>
        </member>
        <member name="T:ComLib.Queue.Queues">
            <summary>
            This class serves as a controller for queues processors.
            </summary>
        </member>
        <member name="F:ComLib.Queue.Queues._queues">
            <summary>
            Named queues.
            </summary>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.Int32,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="itemsToDequeuePerProcess">Number of items to dequeue on dequeue operation.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="namedHandler">Queue processor name.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}},System.Int32)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="namedHandler">Queue processor name.</param>
            <param name="handler">Action to be called on item dequeue.</param>
            <param name="itemsToDequeue">Number of items to dequeue on dequeue operation.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessor``1(ComLib.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="processor">Instance of queue processor.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessor(System.String,ComLib.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <param name="name">Name of queue processor.</param>
            <param name="processor">Instance of queue processor.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.ContainsProcessorFor``1">
            <summary>
            Whether or not there is a named handler for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if a queue processor exists for this type.</returns>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T">Type of item to enqueue.</typeparam>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(System.String,``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T">Type of item to enqueue.</typeparam>
            <param name="namedProcesser">Name of queue processor to use.</param>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T">Type of items to enqueue.</typeparam>
            <param name="items">List with items to enqueue.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T">Type of items to enqueue.</typeparam>
            <param name="namedProcesser">Name of queue processor to use.</param>
            <param name="items">List of items to enqueue.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.Process``1">
            <summary>
            Process the queue handler for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
        </member>
        <member name="M:ComLib.Queue.Queues.Process(System.String)">
            <summary>
            Process the queue handler associated w/ the specified name.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
        </member>
        <member name="M:ComLib.Queue.Queues.IsBusy``1">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if the appointed queue processor is busy.</returns>
        </member>
        <member name="M:ComLib.Queue.Queues.IsBusy(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>True if the queue processor is busy.</returns>
        </member>
        <member name="M:ComLib.Queue.Queues.IsIdle``1">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if the appointed queue processor is idle.</returns>
        </member>
        <member name="M:ComLib.Queue.Queues.IsIdle(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>True if the queue processor is busy.</returns>
        </member>
        <member name="M:ComLib.Queue.Queues.GetQueue``1">
            <summary>
            Get the queue processor for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>Appointed queue processor.</returns>
        </member>
        <member name="M:ComLib.Queue.Queues.GetMetaInfo">
            <summary>
            Get the metainfo for all the queues.
            </summary>
            <returns>List with status for all queue processors.</returns>
        </member>
        <member name="M:ComLib.Queue.Queues.GetQueue(System.String)">
            <summary>
            Get queue processor w/ the specified name.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>Queue processor with specified name.</returns>
        </member>
        <member name="T:ComLib.Queue.QueueStatus">
            <summary>
            This class can hold the status of a queue processor.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.State">
            <summary>
            The current state of the queue.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.Count">
            <summary>
            Number of items still in the queue.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.LastProcessDate">
            <summary>
            The last time the queue was processed.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.DequeueSize">
            <summary>
            How many items are dequeued from this queue each time.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.NumberOfTimesProcessed">
            <summary>
            Number of times the queue has been processed.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.ElapsedTimeSinceLastProcessDate">
            <summary>
            Amount of time since the last process date.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.TotalProcessed">
            <summary>
            Total number of times that have been processed.
            </summary>
        </member>
        <member name="M:ComLib.Queue.QueueStatus.#ctor(ComLib.Queue.QueueProcessState,System.Int32,System.DateTime,System.Int32,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Queue.QueueStatus"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="countItemsRemaining">The count.</param>
            <param name="lastProcessDate">The last process date.</param>
            <param name="numberOfTimesProcessed">Number of times items were processed.</param>
            <param name="elaspedTime">Time elapsed since the last item was processed.</param>
            <param name="totalProcessed">Total number of items processed.</param>
            <param name="dequeueSize">Size of the dequeue.</param>
        </member>
        <member name="T:ComLib.Notifications.NotificationSettings">
            <summary>
            Notification configuration.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationSettings.#ctor">
            <summary>
            Default constructor to support dependency injection of properties by Spring.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationSettings.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            initialize using supplied settings.
            </summary>
            <param name="enableNotifications">True to enable notifications.</param>
            <param name="from">Sender.</param>
            <param name="intervalSchedule">Process interval.</param>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.Item(System.String)">
            <summary>
            Get/set additional values.
            </summary>
            <param name="key">Key to settings item.</param>
            <returns>Value of settings item.</returns>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.Settings">
            <summary>
            Provide read-only access to settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.TemplateFolderPath">
            <summary>
            The folder location for the templates.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.From">
            <summary>
            From.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.WebSiteUrl">
            <summary>
            Url of the website.
            http://www.knowledgedrink.com
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.WebSiteUrlForPost">
            <summary>
            Url for looking at a specific post 
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.EnableNotifications">
            <summary>
            Flag to enable/disable notifications.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.NumberOfMessagesToProcessAtOnce">
            <summary>
            Number of messages to send per batch.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.IntervalSchedule">
            <summary>
            How often to check for and send messages.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.FeedBackEmail">
            <summary>
            The email to use to send user feedback to.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugOutputMessageToFile">
            <summary>
            For debugging purposes, whether or not to debug messages to file.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugOutputMessageFolderPath">
            <summary>
            Location of debug messages.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugSleepIfNotEnabled">
            <summary>
            Flag to simulate sending emails by sleeping thread.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugSleepTimeIfNotEnabled">
            <summary>
            Amount of time to simulate sending.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.LogMessage">
            <summary>
            Log message for errors.
            </summary>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryRepository">
            <summary>
            Generic repository for persisting NamedQuery.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db">Database instance.</param>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryRowMapper">
            <summary>
            RowMapper for NamedQuery.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Mapes reader information to named query properties.
            </summary>
            <param name="reader">Reader with data.</param>
            <param name="rowNumber">Data row number.</param>
            <returns>Instance of named query with data from reader.</returns>
        </member>
        <member name="T:ComLib.Calendars.ICalendarDataProvider">
            <summary>
            Holidays data provider.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.ICalendarDataProvider.Holidays(System.Int32,System.Int32)">
            <summary>
            Get all the holidays from the starting year the ending year specified.
            </summary>
            <param name="startyear"></param>
            <param name="endYear"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.ICalendarDataProvider.CalendarCode">
            <summary>
            Calendar code.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.StateRepository">
            <summary>
            Generic repository for persisting State.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.StateRepository"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.StateRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.StateRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db"></param>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize the rowmapper
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.Create(ComLib.LocationSupport.State)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.Update(ComLib.LocationSupport.State)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.BuildParams(ComLib.LocationSupport.State)">
            <summary>
            Creates db parameters for entity persistence.
            </summary>
            <param name="entity">Entity for which to create db parameters.</param>
            <returns>Array with db parameters for entity.</returns>
        </member>
        <member name="M:ComLib.LocationSupport.StateRepository.BuildParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates a db parameter.
            </summary>
            <param name="name">Name of parameter.</param>
            <param name="dbType">Type of parameter.</param>
            <param name="val">Value of parameter.</param>
            <returns>Created db parameter.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.StateRowMapper">
            <summary>
            RowMapper for State.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.StateRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Creates an instance of State from data of a data reader.
            </summary>
            <param name="reader">Reader with data.</param>
            <param name="rowNumber">Number of row with data.</param>
            <returns>Created instance of State.</returns>
        </member>
        <member name="T:ComLib.Extensions.DateTimeExtensions">
            <summary>
            This class provides extension methods that help
            with common tasks associated with datetime types.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
            Determines whether [is leap year] [the specified date].
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [is leap year] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.IsLastDayOfMonth(System.DateTime)">
            <summary>
            Determines whether [is last day of month] [the specified date].
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [is last day of month] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Determines whether the specified date is a weekend.
            </summary>
            <param name="source">Source date</param>
            <returns>
            	<c>true</c> if the specified source is a weekend; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Gets the Last the day of month.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.SetDay(System.DateTime,System.Int32)">
            <summary>
            Returns a new instance of DateTime with a different day of the month.
            </summary>
            <param name="source">Base DateTime object to modify</param>
            <param name="day">Day of the month (1-31)</param>
            <returns>Instance of DateTime with specified day</returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.SetMonth(System.DateTime,System.Int32)">
            <summary>
            Returns a new instance of DateTime with a different month.
            </summary>
            <param name="source">Base DateTime object to modify</param>
            <param name="month">The month as an integer (1-12)</param>
            <returns>Instance of DateTime with specified month</returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.SetYear(System.DateTime,System.Int32)">
            <summary>
            Returns a new instance of DateTime with a different year.
            </summary>
            <param name="source">Base DateTime object to modify</param>
            <param name="year">The year</param>
            <returns>Instance of DateTime with specified year</returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.ToJavascriptDate(System.DateTime)">
            <summary>
            Converts to javascript compatible date.
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.GetDateWithTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time on the date
            </summary>
            <param name="date">The date.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.GetDateWithTime(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the time on the date
            </summary>
            <param name="date">The date.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.GetDateWithCurrentTime(System.DateTime)">
            <summary>
            Sets the time on the date
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Environments.IEnv">
            <summary>
            Represents functionality for an Environment ( dev, qa, uat, prod etc )
            </summary>
        </member>
        <member name="M:ComLib.Environments.IEnv.GetAll">
            <summary>
            Get a readonly collection of all the environments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.IEnv.Get(System.String)">
            <summary>
            Get the environment item associated with the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.IEnv.Get(System.Int32)">
            <summary>
            Get the environment item at the specified index.
            </summary>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.IEnv.Change(System.String)">
            <summary>
            Change to the new environment.
            </summary>
            <param name="envName"></param>
        </member>
        <member name="P:ComLib.Environments.IEnv.Name">
            <summary>
            Name of the currently selected environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.EnvType">
            <summary>
            Environment type of the current selected env.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Selected">
            <summary>
            Currently selected environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsDev">
            <summary>
            Is dev
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsProd">
            <summary>
            Is prod.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsQa">
            <summary>
            Is Qa
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsUat">
            <summary>
            Is uat environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Available">
            <summary>
            All available environments names.
            e.g. "ny.prod,london.prod,uat,qa,dev"
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Inheritance">
            <summary>
            List of environments that this inherits from.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Inherits">
            <summary>
            Get the inheritance path, e.g. prod;qa;dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.RefPath">
            <summary>
            Reference paths. e.g. config files.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Count">
            <summary>
            Get the number of various available environments. 
            </summary>
        </member>
        <member name="E:ComLib.Environments.IEnv.OnEnvironmentChange">
            <summary>
            Handler for environment change notifications.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityRegistration">
            <summary>
            class used to register the creation of the components of 
            the domain model.
            </summary>
            <remarks>
            NOTE: Currently, the entity registration and creation works using
            an IocContainer.
            </remarks>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.#cctor">
            <summary>
            Default provider to Ioc
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register(ComLib.Entities.EntityRegistrationContext)">
            <summary>
            Registers the specified CTX for creating the components
            necessary for the DomainModel ActiveRecord.
            </summary>
            <param name="ctx">The CTX.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(ComLib.Entities.IEntityService{``0},System.Boolean)">
            <summary>
            Register a singleton service/repository for the entity specified by T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="configureRepository"></param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(ComLib.Entities.IRepository{``0},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repo"></param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(ComLib.Entities.IRepository{``0},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repo"></param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IRepository{``0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IRepository{``0}},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId"></param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IRepository{``0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository for the model T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator.</param>
            <param name="settings">The settings.</param>
            <param name="resources">The resources.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId">The conn id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IEntityService{``0}},System.Func{ComLib.Entities.IRepository{``0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator.</param>
            <param name="settings">The settings.</param>
            <param name="resources">The resources.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connectionId">The connection id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register(System.Type,System.Func{System.Object},System.Func{System.Object})">
            <summary>
            Registers the specified entity type to wire up ActiveRecord functionality.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceCreator">The service creator.</param>
            <param name="repositoryCreator">The repository creator.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register(System.Type,System.Func{System.Object})">
            <summary>
            Registers the specified entity type to wire up ActiveRecord functionality.
            </summary>
            <param name="entityType"></param>
            <param name="repositoryCreator"></param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.ContainsEntity(System.Type)">
            <summary>
            Determine if the entity specified by the type is registered
            for being managable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.ContainsEntity(System.String)">
            <summary>
            Determine if the entity specified by the type is registered
            for being managable.
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetManagableEntities">
            <summary>
            Returns a list of strings representing the names of the 
            managable entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetRegistrationContext(System.String)">
            <summary>
            Get the registration context for the entity full name.
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetService``1">
            <summary>
            Get the Domain service associated with the model.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetRepository``1">
            <summary>
            Get repository with the specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetValidator``1">
            <summary>
            Get repository with the specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetSettings``1">
            <summary>
            Get repository with the specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext``1">
            <summary>
            Get context object associated with the service of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext``1(System.Int32)">
            <summary>
            Get context with id set on the context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext``1(ComLib.Entities.IEntity)">
            <summary>
            Get context with the entity set on the context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetService(System.String)">
            <summary>
            Get the entity Service(supporting CRUD operations).
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetRepository(System.String)">
            <summary>
            Get instance of entity repository.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetRepository(ComLib.Entities.EntityRegistrationContext)">
            <summary>
            Get instance of entity repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetValidator(System.String)">
            <summary>
            Get instance of entity validator.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.HasValidator(System.Type)">
            <summary>
            Determines whether the specified type has validator.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type has validator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetValidator(System.Type)">
            <summary>
            Get instance of entity validator.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetSettings(System.String)">
            <summary>
            Get instance of entity settings.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext(System.String)">
            <summary>
            Get instance of entity context.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetEntity(System.String)">
            <summary>
            Get instance of entity.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Diagnostics.Diagnostics">
            <summary>
            Obtains diagnostic information related to the Machine, Currently executing 
            process, among other areas.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.#cctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.Init(System.Func{ComLib.Diagnostics.IDiagnosticsService})">
            <summary>
            Initialize the provider.
            </summary>
            <param name="serviceCreator">Function to execute.</param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetAllInfo">
            <summary>
            Get all the diagnostic information.
            </summary>
            <returns>Diagnostic information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetDataAsDictionary(ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Get all the diagnostic information.
            <param name="groups">MachineInfo,AppDomain,Env_System,Env_User</param>
            </summary>
            <returns>Dictionary with diagnostic information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetInfo(System.String)">
            <summary>
            Get all the information associated with the specified groups.
            </summary>
            <param name="commaDelimitedGroups">String with comma-delimited groups.</param>
            <returns>Information for specified groups.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetInfo(ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Get all the information associated with the specified groups.
            </summary>
            <param name="groups">Array with groups.</param>
            <returns>Information for specified groups.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteAllInfo(System.String)">
            <summary>
            Write all diagnostic information to the file specified.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteInfo(System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteInfo(System.String,System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
            <param name="referenceMessage">Reference message.</param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteInfo(System.String,System.String,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="path">Path of file to write information to.</param>
            <param name="referenceMessage">Reference message.</param>
            <param name="groups">The groups to write out</param>
        </member>
        <member name="T:ComLib.Collections.IEnumeratorCountable`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.IEnumeratorCountable`1.IsFirst">
            <summary>
            Indicate if current item is first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.IEnumeratorCountable`1.IsLast">
            <summary>
            Indicate if current item is last.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IEnumeratorCountable`1.IsEmpty">
            <summary>
            Indicates if the enumerator is empty ( it has 0 items ).
            </summary>
        </member>
        <member name="P:ComLib.Collections.IEnumeratorCountable`1.CurrentIndex">
            <summary>
            Get the index of the current item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IEnumeratorCountable`1.Count">
            <summary>
            Get the total number of items.
            </summary>
        </member>
        <member name="T:ComLib.Collections.EnumeratorCountable`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initialize the list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.Reset">
            <summary>
            Reset the iterator to first item.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.IsFirst">
            <summary>
            Indicates if current item is first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.IsLast">
            <summary>
            Indicates if current item is last.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.Current">
            <summary>
            Get the current item.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.System#Collections#IEnumerator#Current">
            <summary>
            Get the current item in list.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.CurrentIndex">
            <summary>
            Get the index of the current item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.Count">
            <summary>
            Get the total items in the internal list.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.IsEmpty">
            <summary>
            Indicate if there are items to iterate over.
            </summary>
        </member>
        <member name="T:ComLib.Caching.CacheItemPriority">
            <summary>
            Priority for cache items.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.Low">
            <summary>
            Very Likely to be deleted.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.Normal">
            <summary>
            Somewhat likely to be deleted.
            </summary>        
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.High">
            <summary>
            Less likely to be deleted.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.NotRemovable">
            <summary>
            Should not be deleted.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.Default">
            <summary>
            The default value for a cached item's priority.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.Auth">
            <summary>
            Provides static access to the all the <see cref="T:ComLib.Authentication.IAuth"/> methods in the current <see cref="T:ComLib.Authentication.IAuth"/> provider being used.
            <para>
            Auth.IsAdmin();
            Auth.IsGuest();
            Auth.UserName;
            etc.
            </para>
            </summary>
        </member>
        <member name="M:ComLib.Authentication.Auth.#cctor">
            <summary>
            Default to windows.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.Auth.Init(ComLib.Authentication.IAuth)">
            <summary>
            Initialize the current <see cref="T:ComLib.Authentication.IAuth"/> provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsAuthenticated">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsGuest">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.GetUser``1(System.String)">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.GetUser``1">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUserInRolesOrAdmin(System.String)">
            <summary>
            Is User in the selected roles or if user is admin.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUserInRoles(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Is user in the list of roles specified.
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsAdmin">
            <summary>
            Determine whether or not the currently logged in user is an admin.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUser(System.String)">
            <summary>
            Determine if the logged in user is the same as the username supplied.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUserOrAdmin(System.String)">
            <summary>
            Returns true if the logged in user is the same as the username supplied,
            or if the logged in user is an admin.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.Matches(System.String)">
            <summary>
            Whether or not the current user's role matches the supplied roles exactly.
            Roles can be "?" for gues, "*" for authenticated users, "rolename" otherwise.
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignIn(System.String)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
            <param name="rememberUser"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.UserId">
            <summary>
            Get the user id.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Exceptions">
            <summary>
            Example for the Exceptions namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Exceptions.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Exceptions.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Logging">
            <summary>
            Example for the Logging namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Logging.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Logging.ShutDown">
            <summary>
            Shutdown dependent services.
            </summary>
        </member>
        <member name="T:ComLib.EnvironmentVariables">
            <summary>
            This class contains methods to help with environmental variables.
            </summary>
        </member>
        <member name="M:ComLib.EnvironmentVariables.GetAny(System.String)">
            <summary>
            Get environment variable from current process, user variable, machine variable.
            </summary>
            <param name="name">Environment variable name.</param>
            <returns>Environmental variable corresponding to the name.</returns>
        </member>
        <member name="T:ComLib.Lang.KeywordToken">
            <summary>
            Operator as token
            </summary>
        </member>
        <member name="M:ComLib.Lang.KeywordToken.#ctor(System.String)">
            <summary>
            Initialize
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:ComLib.Lang.KeywordToken.ToKeyWord(System.String)">
            <summary>
            Get the keyword token from the string
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.IfStatement">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.IfStatement.#ctor(ComLib.Lang.Expression)">
            <summary>
            Initialize
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:ComLib.Lang.IfStatement.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="T:ComLib.Web.UrlHelper">
            <summary>
            Url helper to provide various utitlity methods.
            
            1. Provide valid url's for either local development maching running
               a website from visual studio OR IIS.
            
            2. Get url's that have been rewritten.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetRelativeSiteUrl(System.String)">
            <summary>
            Gets the relative site url.
            </summary>
            <remarks>
            Use this method for getting relative site urls for resource files such as
            1. Javascript
            2. Images
            3. Xml files
            </remarks>
            <param name="url">"~/Scripts/Javascript/UI.js"</param>
            <returns>
            For IIS PRODUCTION: /Scripts/Javascript/UI.js
            For VS  LOCAL DEV : /MyApp.WebSite/Scripts/Javascript/UI.js
            </returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetMappedRelativeSiteUrl(System.String)">
            <summary>
            Gets the relative site url for possibly mapped/rewritten urls.
            </summary>
            <remarks>
            Use this method for getting relative site urls for rewritten urls such as
            1. Web pages ( .aspx .html .htm etc. )
            </remarks>
            <param name="url">"~/Modules/Home.aspx"</param>
            <returns>
            If there are mappings:
            For IIS PRODUCTION: /Home.aspx
            For VS  LOCAL DEV : /Workshops.WebSite/Home.aspx
            </returns>        
        </member>
        <member name="M:ComLib.Web.UrlHelper.ConfigureUrlRewriting(System.Boolean,ComLib.Web.UrlMapper)">
            <summary>
            Configure the url-rewriting flag and set the url mapper.
            </summary>
            <param name="isUrlRewritingEnabled">True if URL rewriting is enabled.</param>
            <param name="urlMapper">Instance of URL mapper.</param>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetSiteRoot">
            <summary>
            Gets the root of the website. http: or https: plus the appropriate port.
            </summary>
            <returns>Root of the website.</returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetRequestedFileName(System.String,System.Boolean)">
            <summary>
            Returns the name of the requested file.
            </summary>
            <param name="rawUrl">Raw URL.</param>
            <param name="includeExtension">Flag indicating if extension of the file should also be 
            included.</param>
            <returns>Requested file name.</returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetRelativeSiteUrl(System.String,System.String)">
            <summary>
            These are exposed to the unit tests in CommonLibrary.Tests.
            </summary>
            <param name="applicationPath">Application path.</param>
            <param name="url">Request URL.</param>
            <returns>Relative site URL.</returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetMappedRelativeSiteUrl(System.String,System.String)">
            <summary>
            These are exposed to the unit tests in ServiceGoFor.CommonLibrary.Tests.
            </summary>
            <param name="applicationPath">Application path.</param>
            <param name="url">Request URL.</param>
            <returns>Mapped relative site URL.</returns>
        </member>
        <member name="P:ComLib.Web.UrlHelper.IsRewritingEnabled">
            <summary>
            Get or set flag indicating if url-rewriting is enabled.
            </summary>        
        </member>
        <member name="P:ComLib.Web.UrlHelper.UrlMapperProvider">
            <summary>
            Instance of the url mapper.
            </summary>
        </member>
        <member name="T:ComLib.Web.UrlMapper">
            <summary>
            Url mapper to assist in mapping physical urls to possible rewritten urls.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlMapper.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Url mapper with mappings provided as IDictionary.
            </summary>
            <example>
                      Physical Url        Rewritten url
                key = "~/Classes.aspx"    value = "~/SearchClasses.aspx"
            </example>
            <param name="urlMappings">Mappings from physical url to logical urls.</param>
        </member>
        <member name="M:ComLib.Web.UrlMapper.GetUrl(System.String)">
            <summary>
            Get the real url.
            </summary>
            <param name="url">URL.</param>
            <returns>Mapped url if mapping present, original url otherwise</returns>
        </member>
        <member name="M:ComLib.Web.UrlMapper.Init(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialize.
            </summary>
            <param name="urlMappings">mappings to rewritten urls.</param>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.JavascriptHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.JavascriptHandler.Init(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Set the configuration settings as an IDictionary.
            </summary>
            <param name="sectionname">Section name</param>
            <param name="useSection">Whether or not to use the section name.</param>
            <param name="config">Config settings.</param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.JavascriptHandler.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="T:ComLib.Types.TypeParsers">
            <summary>
            This class contains type parser methods
            that also provide default values.
            </summary>
        </member>
        <member name="M:ComLib.Types.TypeParsers.ParseInt(System.String,System.Int32)">
            <summary>
            Parse the string as an int.
            </summary>
            <param name="val">String representation of integer.</param>
            <param name="defaultVal">Default value if string is null or empty.</param>
            <returns>Parsed integer.</returns>
        </member>
        <member name="T:ComLib.Reflection.AttributeHelper">
            <summary>
            Reflection utility class for attributes.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetAssemblyInfoDescription(System.Type,System.String)">
            <summary>
            Get the description attribute from the assembly associated with <paramref name="type"/>
            </summary>
            <param name="type">The type who's assembly's description should be obtained.</param>
            <param name="defaultVal">Default value to use if description is not available.</param>
            <returns>String with assembly information description.</returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetClassAttributes``1(System.Object)">
            <summary>
            Gets the attributes of the specified type applied to the class.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">The obj.</param>
            <returns>List with class custom attributes.</returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetClassAttributesFromAssembly``1(System.String,System.Action{System.Collections.Generic.KeyValuePair{System.Type,``0}})">
            <summary>
            Loads widgets from the assembly name supplied.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="assemblyName">The name of the assembly to load widgets from.</param>
            <param name="action">A callback for the datatype and widgetattribute.</param>
            <returns>List with key/value pair with attributes.</returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetPropsWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>Pair of key/value items with properties.</returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetPropsOnlyWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>List of properties found.</returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetPropsWithAttributesList``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>List with key/value pairs with property info.</returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetPropertiesWithAttributesOnTypes``1(System.Collections.Generic.IList{System.Type},System.Action{System.Type,System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,``0}})">
            <summary>
            Gets all the properties associated with the supplied types that have the attribute applied to them.
            </summary>
            <typeparam name="TPropAttrib">The type of the attribute that properties should have</typeparam>
            <param name="types">The list of types to search properties for.</param>
            <param name="action">Callback</param>
            <returns>List with key/value pairs with property info.</returns>
        </member>
        <member name="T:ComLib.Paging.PagerSettings">
            <summary>
            Pager settings.
            </summary>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.Default">
            <summary>
            Default settings
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerSettings.#ctor">
            <summary>
            Default construction
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerSettings.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initialize fields.
            </summary>
            <param name="numberPagesToDisplay">Number of paged to display.</param>
            <param name="cssClassForCurrentPage">Css for current page.</param>
            <param name="cssClassForPage">Css for pages.</param>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.NumberPagesToDisplay">
            <summary>
            How many pages to display in a row at once.
            </summary>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.CssCurrentPage">
            <summary>
            Name of css class used for currently displayed page.
            </summary>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.CssClass">
            <summary>
            Name of css class used for showing normal non-current pages.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateConstants">
            <summary>
            Constants representing the various status.
            </summary>
        </member>
        <member name="F:ComLib.StatusUpdater.StatusUpdateConstants.Started">
            <summary>
            Status update started.
            </summary>
        </member>
        <member name="F:ComLib.StatusUpdater.StatusUpdateConstants.Completed">
            <summary>
            Status update completed.
            </summary>
        </member>
        <member name="F:ComLib.StatusUpdater.StatusUpdateConstants.Running">
            <summary>
            Status update running.
            </summary>
        </member>
        <member name="F:ComLib.StatusUpdater.StatusUpdateConstants.Failed">
            <summary>
            Status update failed.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdates">
            <summary>
            StatusUpdate extensions with helper methods
            </summary>
            <summary>
            Active record functionality for StatusUpdate
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdates.Update(System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Update status for the specified runId, taskname combination.
            </summary>
            <remarks>Overloaded convenience method.</remarks>
            <param name="taskName">Name of task.</param>
            <param name="status">Status of task.</param>
            <param name="comment">Task comment.</param>
            <param name="started">Task start time.</param>
            <param name="ended">Task end time.</param>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdates.New">
            <summary>
            Creates a new instance of status update and 
            initializes it with a validator and settings.
            </summary>
            <returns>An instance of status update.</returns>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdates.Service">
            <summary>
            Get the singleton service.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateService">
            <summary>
            Assign global values to be used for a specific batch run.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateService.PerformValidation(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Get list of data massagers for the entity.
            </summary>
            <returns>Status with error message.</returns>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateService.Update(System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Update status for the specified runId, taskname combination.
            </summary>
            <remarks>Overloaded convenience method.</remarks>
            <param name="taskName">Name of task.</param>
            <param name="status">Status of task.</param>
            <param name="comment">Task comment.</param>
            <param name="started">Task start time.</param>
            <param name="ended">Task end time.</param>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BatchName">
            <summary>
            Name of the batch. e.g. "EndOfMonth"
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BatchTime">
            <summary>
            Batch time - Start time of the batch.
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BatchId">
            <summary>
            Batch id identifies a single batch between multiple batch names,
            business dates.
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BusinessDate">
            <summary>
            Business date of the batch / tasks run.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateMassager">
            <summary>
            Data massager for StatusUpdates.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateMassager.Massage(System.Object,ComLib.Entities.EntityAction)">
            <summary>
            Populate the username, computer and comment.
            </summary>
            <param name="entity">Entity to populate.</param>
            <param name="action">Action.</param>
        </member>
        <member name="T:ComLib.Queue.IQueueRepository`1">
            <summary>
            Interface for a persistance queue repository.
            </summary>
            <typeparam name="T">Type of items to store in repository.</typeparam>
        </member>
        <member name="M:ComLib.Queue.IQueueRepository`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Saves the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:ComLib.Queue.IQueueRepository`1.LoadAll">
            <summary>
            Loads all.
            </summary>
            <returns>List of all items.</returns>
        </member>
        <member name="M:ComLib.Queue.IQueueRepository`1.LoadBatch">
            <summary>
            Loads the batch.
            </summary>
            <returns>List of all items.</returns>
        </member>
        <member name="T:ComLib.Data.QueryData">
            <summary>
            This class is used to store query data.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryData.Conditions">
            <summary>
            List of query conditions.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryData.Orderings">
            <summary>
            List of query orderings.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryData.LastOrderBy">
            <summary>
            Order-by clause.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryData.SelectFields">
            <summary>
            List of fields to select.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryData.From">
            <summary>
            Source of information.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryData.RecordLimit">
            <summary>
            Top number of records to retrieve.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryData.IsRecordLimitEnabled">
            <summary>
            True if record limit is enabled.
            </summary>
        </member>
        <member name="M:ComLib.Data.QueryData.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="T:ComLib.Data.QueryBuilderSql">
            <summary>
            This class implements a query builder
            that can generate Sql output.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryBuilderSql._surroundFields">
            <summary>
            True to surround fields with surround chars.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryBuilderSql._surroundFieldLeftChar">
            <summary>
            Left surround char.
            </summary>
        </member>
        <member name="F:ComLib.Data.QueryBuilderSql._surroundFieldRightChar">
            <summary>
            Right surround char.
            </summary>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.#ctor(ComLib.Data.IQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Data.QueryBuilderSql"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.Build">
            <summary>
            Builds the full markup for the criteria provided.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.Build(System.String)">
            <summary>
            Builds the full markup fro the criteria provided using the from source supplied.
            </summary>
            <param name="from">From.</param>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildSelect">
            <summary>
            Builds only the "select fields" markup.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildSelect(System.Boolean)">
            <summary>
            Builds only the select fields marketup with conditional flag indicating whether or not
            to include the markup's select statement.
            </summary>
            <param name="includeSelectStatement">if set to <c>true</c> [include select statement].</param>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildLimit">
            <summary>
            Builds the limit.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildConditions">
            <summary>
            Builds the conditions.
            </summary>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildConditionsAndOrdering(System.Boolean,System.Boolean)">
            <summary>
            Builds the conditions.
            </summary>
            <param name="includeWhere">True to include WHERE clause.</param>
            <param name="includeOrderBy">True to include ORDER-BY clause.</param>
            <returns>String with created query.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.EncloseField(System.String)">
            <summary>
            Whether or not to enclose fields.
            </summary>
            <param name="fieldName">Name of field to check.</param>
            <returns>True if the field name is a reserved word
            and needs to be enclosed.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.HandleEncloseField(System.String)">
            <summary>
            Returns the field name or an enclosed field name
            if the field is a reserved word.
            </summary>
            <param name="fieldName">Name of field to check.</param>
            <returns>"Escaped" field name.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildConditions(System.Boolean)">
            <summary>
            Builds the conditions.
            </summary>
            <param name="includeWhere">if set to <c>true</c> [include where].</param>
            <returns>String with created conditions.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildOrderBy">
            <summary>
            Builds the order by.
            </summary>
            <returns>String with created order-by.</returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildOrderBy(System.Boolean)">
            <summary>
            Builds the order by.
            </summary>
            <param name="includeOrderBy">if set to <c>true</c> [include order by].</param>
            <returns>String with created order-by.</returns>
        </member>
        <member name="P:ComLib.Data.QueryBuilderSql.Criteria">
            <summary>
            The criteria API.
            </summary>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQuery">
            <summary>
            Extend the named query by adding parameters using a structure rather than string.
            </summary>
            <summary>
            NamedQuery entity.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQuery.AddParameters(System.Collections.Generic.List{ComLib.NamedQueries.NamedQueryParam})">
            <summary>
            Add query parameters.
            </summary>
            <param name="queryParams">List of query parameters.</param>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQuery.AddParameters(System.Collections.Generic.List{System.String})">
            <summary>
            Add query parameters.
            </summary>
            <param name="queryParams">List of query parameters.</param>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQuery.New">
            <summary>
            Returns a new instance of this class.
            </summary>
            <returns>Instance of NamedQuery.</returns>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Name">
            <summary>
            Get/Set Name
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Description">
            <summary>
            Get/Set Description
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Sql">
            <summary>
            Get/Set Sql
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Parameters">
            <summary>
            Get/Set Parameters
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.IsStoredProcedure">
            <summary>
            Get/Set IsStoredProcedure
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.IsPagingSuppored">
            <summary>
            Get/Set IsPagingSuppored
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.IsScalar">
            <summary>
            Get/Set IsScalar
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.OrderId">
            <summary>
            Get/Set OrderId
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.ItemType">
            <summary>
            Get/Set ItemType
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Roles">
            <summary>
            Get/Set Roles
            </summary>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryParam">
            <summary>
            Class to represent an indivdual parameter that is part
            of a named query.
            </summary>
            <example>
            "@id:int:1:'';@businessDate:date:1:${today};@username:string:1:''".
            </example>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.Name">
            <summary>
            Name of the parameter.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.Typ">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.IsRequired">
            <summary>
            Indicates if the parameter is requried.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.DefaultValue">
            <summary>
            The default value of the parameter.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.Val">
            <summary>
            The value to use for the parameter.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParam.ToString">
            <summary>
            Return string representation.
            </summary>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryParamsParser">
            <summary>
            Parser for parsing parameter definition strings in the format 
            "@id:int:1:'';@businessDate:date:1:${today};@username:string:1:''".
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParamsParser.ParamDefinitionRegEx">
            <summary>
            Regular expression for the parameter definition.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsParser.ParseParams(System.String)">
            <summary>
            Parses the parameters definition string and returns a List of NamedQueryParam objects.
            </summary>
            <param name="paramDefinitions">E.g. "@id:int:1:'';@businessDate:date:1:${today};@username:string:1:''"</param>
            <returns>List of NamedQueryParam objects.</returns>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryParamsValidator">
            <summary>
            Validator class for the named query parameters.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.#cctor">
            <summary>
            Keep track of the various types of the parameters.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.#ctor(System.Collections.Generic.IList{ComLib.NamedQueries.NamedQueryParam})">
            <summary>
            initialize list of parameters.
            </summary>
            <param name="namedQueryParams">List of parameters.</param>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validate all the params and collect all the errors.
            </summary>
            <returns>True if the validation passed.</returns>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.ValidateParam(ComLib.NamedQueries.NamedQueryParam)">
            <summary>
            Validate a single parameter by 
            1. checking it's type against
            2. Check the supplied value against the type.
            3. supplied value is not null.
            </summary>
            <param name="param">Query parameter.</param>
            <returns>Result of validation.</returns>
        </member>
        <member name="T:ComLib.Models.ModelBuilderSettings">
            <summary>
            This class provides settings for the code generation model.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.Connection">
            <summary>
            Database connectio used to create the tables associated with a model.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.AssemblyName">
            <summary>
            Assembly name.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocation">
            <summary>
            Location of the generated code.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocationTemplate">
            <summary>
            Location of the templates for code generation
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelInstallLocation">
            <summary>
            Location where the sql schema files are created.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocationUI">
            <summary>
            Location where the sql schema files are created.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocationUITemplate">
            <summary>
            Location where the UI templates are located.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelOrmLocation">
            <summary>
            Location where orm mapping file should be created.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelDbStoredProcTemplates">
            <summary>
            Location of the stored procedure templates.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.DbAction_Create">
            <summary>
            Location where orm mapping file should be created.
            </summary>
        </member>
        <member name="T:ComLib.MapperSupport.MapperWebForms">
            <summary>
            Mapper for web forms. This is used to automatically map values from a form into an objects Properties. This built in
            UpdateModel method on an MVC Controller doesn't support use of Interfaces for automapping.
            </summary>
        </member>
        <member name="M:ComLib.MapperSupport.MapperWebForms.UpdateModel(System.Object,System.Collections.Specialized.NameValueCollection,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Maps form values from a NameValueCollection to an object. This is used specifically for auto mapping Form input values to an Object's properties.
            </summary>
            <param name="obj">The object to set the values on from the form.</param>
            <param name="form">Data from webform.</param>
            <param name="prefix">The prefix to use for the property names in the form.</param>
            <param name="excludeProps">The props to exclude.</param>
        </member>
        <member name="T:ComLib.LocationSupport.Location">
            <summary>
            Static class to provide access to parsing, searching/lookup functionality on cities, states and countries.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Location.Init(ComLib.LocationSupport.ILocationService)">
            <summary>
            Initialize with 
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ComLib.LocationSupport.Location.Parse(System.String)">
            <summary>
            Does a high-level check of the format supplied and determines what type
            of location input was supplied.
            
            Formats are:
            1. city                         - "Bronx"
            2. city,state                   - "Bronx , New York"
            3. city,state( abbreviation )   - "Bronx , NY"
            4. city,country                 - "HomeTown , USA"
            5. state                        - "New Jersey"
            6. state abbreviation           - "NJ"
            7. country                      - "Italy"
            the actuall parsing 
            </summary>
            <param name="text">Text representing the location.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Location.CreateCity(System.String,System.String,System.String)">
            <summary>
            Create a city in the underlying datastore using the fields supplied
            </summary>
            <param name="name">Name of the city</param>
            <param name="state">Name of the state the city is in</param>
            <param name="country">Name of the country the city is in</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Location.CreateCountry(System.String)">
            <summary>
            Create a country with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Location.CreateCountry(System.String,System.String,System.Boolean)">
            <summary>
            Create the country using the name, alias.
            </summary>
            <param name="name">Country name</param>
            <param name="alias">Alias for the country</param>
            <param name="isAlias">Whether or not creating an alias.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Location.CreateState(System.String,System.String,System.String)">
            <summary>
            Create the state.
            </summary>
            <param name="name">Name of the state.</param>
            <param name="abbreviation">Abbreviation used for the state.</param>
            <param name="country">Name of the country this state belongs to.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Location.GetCountry(System.String)">
            <summary>
            Get country with the specified name.
            </summary>
            <param name="countryName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Location.StatesFor(System.String)">
            <summary>
            Get the states for the specified country
            </summary>
            <param name="countryname"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Location.CitiesFor(System.String,System.String)">
            <summary>
            Get the states for the specified country
            </summary>
            <param name="countryname"></param>
            <param name="statename"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.LocationSupport.Location.Service">
            <summary>
            Instance of the location service
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.Cities">
            <summary>
            Repository for the cities
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.States">
            <summary>
            Repository for the States
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.Countries">
            <summary>
            Repository for the countries.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.CitiesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.CitiesList">
            <summary>
            Get the city list.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.CountriesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.CountriesList">
            <summary>
            Get the country lookup
            </summary>        
        </member>
        <member name="P:ComLib.LocationSupport.Location.StatesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Location.StatesList">
            <summary>
            Get the states list.
            </summary>
        </member>
        <member name="T:ComLib.IO.FileSearcher">
            <summary>
            Search for directories and files using a pattern.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileSearcher.#ctor(System.Action{System.IO.FileInfo},System.Action{System.IO.DirectoryInfo},System.String,System.Boolean)">
            <summary>
            Initialize with file handler
            </summary>
            <param name="directoryHandler">Handler for each directory.</param>
            <param name="fileHandler">Handler for each file.</param>
            <param name="handleFiles">Flag indicating to handle files.</param>
            <param name="pattern">Search pattern for directories files.
            e.g. **/**.</param>
        </member>
        <member name="M:ComLib.IO.FileSearcher.Init">
            <summary>
            Initialize directory and file pattern.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileSearcher.Search(System.IO.DirectoryInfo)">
            <summary>
            Search directory for directories/files using pattern.
            </summary>
            <param name="startDir"></param>
        </member>
        <member name="M:ComLib.IO.FileSearcher.SearchFiles(System.IO.DirectoryInfo)">
            <summary>
            Search all the files.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="T:ComLib.ImportExport.ImportExportServiceEntityBased`1">
            <summary>
            Implementation of mport/export service using entity repositories.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportServiceEntityBased`1.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportServiceEntityBased`1.#ctor(System.String)">
            <summary>
            Initialize with the supported formats.
            </summary>
            <param name="formatsDelimited"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportServiceEntityBased`1.#ctor(System.String[])">
            <summary>
            Initialize with the supported formats.
            </summary>
            <param name="formats"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportServiceEntityBased`1.Import(System.Collections.Generic.IList{`0})">
            <summary>
            Import items into the entity repository.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportServiceEntityBased`1.TotalExportable">
            <summary>
            Gets the total count of the items that can be exported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportServiceEntityBased`1.Export(System.Int32,System.Int32)">
            <summary>
            Exports items in a batch/page.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Cryptography.CryptoHash">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.CryptoHash._encryptionOptions">
            <summary>
            Settings for encryption
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.CryptoHash._algorithm">
            <summary>
            Hashing algorithm
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.#ctor">
            <summary>
            Default options
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.#ctor(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="key"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.#ctor(ComLib.Cryptography.CryptoConfig,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="options">The options.</param>
            <param name="algorithm"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.SetAlgorithm(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Set the creator for the algorithm.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.CryptoHash.Settings">
            <summary>
            Options for encryption.
            </summary>
            <value></value>
        </member>
        <member name="T:ComLib.Cryptography.CryptoSym">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.CryptoSym._encryptionOptions">
            <summary>
            Configuration settings for encryption/decryptiong.
            </summary>
        </member>
        <member name="F:ComLib.Cryptography.CryptoSym._algorithm">
            <summary>
            The underlying symmetric algorithm to use.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.#ctor">
            <summary>
            Default options
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.#ctor(System.String)">
            <summary>
            Initialize with the encryptionKey
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.#ctor(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Cryptography.CryptoSym"/> class.
            </summary>
            <param name="key">The encryption key to use.</param>
            <param name="algorithm">The crypto algorithm to use</param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.#ctor(ComLib.Cryptography.CryptoConfig,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Cryptography.CryptoSym"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="algorithm">The crypto algorithm to use</param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.SetAlgorithm(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Set the creator for the algorithm.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.CryptoSym.Settings">
            <summary>
            Options for encryption.
            </summary>
            <value></value>
        </member>
        <member name="T:ComLib.Categories.CategoryConstants">
            <summary>
            This class is used to define constants.
            </summary>
        </member>
        <member name="F:ComLib.Categories.CategoryConstants.RootCategoryParentCategoryId">
            <summary>
            Root category for categories.
            </summary>
        </member>
        <member name="F:ComLib.Categories.CategoryConstants.All">
            <summary>
            All categories.
            </summary>
        </member>
        <member name="F:ComLib.Categories.CategoryConstants.AllStringVal">
            <summary>
            All categories.
            </summary>
        </member>
        <member name="F:ComLib.Categories.CategoryConstants.NA">
            <summary>
            N/A.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.CaptchaImageHandler">
            <summary>
            Captcha Image Handler
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Generate a captcha image
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaImageHandler.IsReusable">
            <summary>
            IsReusable handler.
            </summary>
        </member>
        <member name="T:ComLib.Automation.AutomationRunner">
            <summary>
            Class that runs an automation script.
            </summary>
        </member>
        <member name="M:ComLib.Automation.AutomationRunner.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Automation.AutomationRunner.#ctor(System.String,System.String)">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Automation.AutomationRunner.Init(System.String,System.String)">
            <summary>
            Initialize the format and assemblies for commands
            </summary>
            <param name="format"></param>
            <param name="assembliesForCommands"></param>
        </member>
        <member name="M:ComLib.Automation.AutomationRunner.RunScript(System.String)">
            <summary>
            Run the 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.AutomationRunner.RunText(System.String)">
            <summary>
            Runs automation commands using supplied text rather than filepath.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Automation.AutomationRunner.WriteResultsToFile(System.String)">
            <summary>
            Writes the results of the last script execution to the file path supplied.
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="P:ComLib.Automation.AutomationRunner.Format">
            <summary>
            The format used in the automation script. "xml" or "json"
            </summary>
        </member>
        <member name="P:ComLib.Automation.AutomationRunner.Assemblies">
            <summary>
            A delimited list of assemblies to load the commands contained in the automation script.
            </summary>
        </member>
        <member name="P:ComLib.Automation.AutomationRunner.Result">
            <summary>
            Gets the last run result of the last script.
            </summary>
        </member>
        <member name="P:ComLib.Automation.AutomationRunner.Script">
            <summary>
            Gets the current script that was executed
            </summary>
        </member>
        <member name="T:ComLib.Authentication.AuthWeb">
            <summary>
            <see cref="T:ComLib.Authentication.IAuth"/> implementation to provide Authentication service using the web based User(principal) object exposed in the context.Current.User object.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.#ctor(System.String)">
            <summary>
            Initialize with the admin role name.
            </summary>
            <param name="adminRoleName"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.#ctor(System.String,System.Func{System.String,System.Security.Principal.IPrincipal})">
            <summary>
            Initialize with the admin role name.
            </summary>
            <param name="adminRoleName"></param>
            <param name="userAuth"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.GetUser``1(System.String)">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.IsAuthenticated">
            <summary>
            Determine if the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.IsAdmin">
            <summary>
            Determine if currently logged in user is an administrator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignIn(System.String)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
            <param name="rememberUser"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWeb.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWeb.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWeb.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="T:ComLib.Arguments.ArgsValidator">
            <summary>
            Validation Helper class for confirming that argument were correctly supplied and with 
            appropriate typed values.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.ValidateInputs(System.String[],System.String,System.String)">
            <summary>
            Validate the inputs for parsing the arguments.
            </summary>
            <param name="args"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.Validate(ComLib.Arguments.Args,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.IList{System.String},System.Action{ComLib.Arguments.ArgAttribute,System.String,System.Int32})">
            <summary>
            Validate the parsed args supplied with the args specification list.
            </summary>
            <param name="parsedArgs"></param>
            <param name="argSpecs"></param>
            <param name="errors"></param>
            <param name="onArgumentValidationSuccessCallback"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.ValidateArg(ComLib.Arguments.ArgAttribute,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates argument against the value supplied. This includes whether it's required and checks value against datatype.
            </summary>
            <param name="argAttr"></param>
            <param name="argVal"></param>
            <param name="errors"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.ValidateIndex(ComLib.Arguments.ArgAttribute,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates the index position of the non-named argument.
            </summary>
            <param name="argAttr"></param>
            <param name="positionalArgCount"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Arguments.ArgsSchema">
            <summary>
            Schema used for arguments.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.#ctor(ComLib.Arguments.Args)">
            <summary>
            Initialize with the args object.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.#ctor(ComLib.Arguments.Args,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Initialize with the args object a list of arg attributes.
            </summary>
            <param name="args"></param>
            <param name="argAttributes"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.AddNamed``1(System.String,System.String,System.Boolean,``0,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add a named argument using it's name and whether it's required, default value and description.
            </summary>
            <typeparam name="T">The type of argument.</typeparam>
            <param name="name">Name of the argument.</param>
            <param name="alias">Short hand name for the argument.</param>
            <param name="isRequired">Whether or not this argument is required.</param>
            <param name="defaultValue">Default value to use if it's not supplied.</param>
            <param name="description">Description of this argument.</param>
            <param name="example">An example value for the argument.</param>
            <param name="exampleMultiple">Multiple examples for the argument</param>
            <param name="interpret">Whether or the argument value should be interpreted to handle things like ${t} for DateTime.Today</param>
            <param name="isCaseSensitive">Whether or the argument name is case-sensitive</param>
            <param name="tag">A tag to associate w/ the argument.</param>
            <param name="onlyForDevelopment">Whether or not the argument is only for development purposes</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.AddPositional``1(System.Int32,System.Boolean,``0,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add a positional argument.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="indexPosition">Index</param>
            <param name="isRequired">Whether or not this argument is required.</param>
            <param name="defaultValue">Default value to use if it's not supplied.</param>
            <param name="description">Description of this argument.</param>
            <param name="example">An example value for the argument.</param>
            <param name="exampleMultiple">Multiple examples for the argument</param>
            <param name="interpret">Whether or the argument value should be interpreted to handle things like ${t} for DateTime.Today</param>
            <param name="isCaseSensitive">Whether or the argument name is case-sensitive</param>
            <param name="tag">A tag to associate w/ the argument.</param>
            <param name="onlyForDevelopment">Whether or not the argument is only for development purposes</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.RemoveNamed(System.String)">
            <summary>
            Remove the argument with the supplied name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.RemovPositional(System.Int32)">
            <summary>
            Remove the positional argument at the supplied index.
            </summary>
            <param name="indexPosition"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.Clear">
            <summary>
            Clear all the arguments in this schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.Contains(System.String)">
            <summary>
            Whether or not the schema contains an argument with the supplied name.
            </summary>
            <param name="argName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.Contains(System.Int32)">
            <summary>
            Whether or not the schema contains a positional argument at the supplied index.
            </summary>
            <param name="indexPosition"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.Alias(System.String)">
            <summary>
            Set the alias for the current argument.
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.Describe(System.String)">
            <summary>
            Set the description for the current argument as optional.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.DefaultsTo(System.Object)">
            <summary>
            Set the default value for the current argument.
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.Examples(System.String,System.String)">
            <summary>
            Specify examples for the current argument.
            </summary>
            <param name="singleExample"></param>
            <param name="multipleExamples"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.GetNamed(System.String)">
            <summary>
            Get the named arg attribute using it's name or alias.
            </summary>
            <param name="nameOrAlias"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsSchema.GetPositional(System.Int32)">
            <summary>
            Get the positional arg attribute using it's positional index.
            </summary>
            <param name="indexPosition"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.Args">
            <summary>
            The args object.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.Items">
            <summary>
            Should make this readonly or copy it
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.IsEmpty">
            <summary>
            Indicate whether or not there are any options in this schema.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.Count">
            <summary>
            The number of options.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.Required">
            <summary>
            Mark the current argument as required.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.Optional">
            <summary>
            Mark the current argument as optional.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.OnlyForDevelopment">
            <summary>
            Mark the current argument as being used only for development purposes
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.CaseSensitive">
            <summary>
            Mark the current argument as Case Sensitive
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.CaseInSensitive">
            <summary>
            Mark the current argument as Case Insensitive
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.Interpret">
            <summary>
            Mark current argument as interpretable.
            </summary>
        </member>
        <member name="T:ComLib.Arguments.ArgsHelper">
            <summary>
            Helper class for argument parsing.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.InitServices(System.Func{System.String,System.String})">
            <summary>
            Initialize the string parser. e.g. Args.InitParser( (textargs) => LexArgs.ParseList(text) );
            </summary>
            <param name="substitutor">The substitutor lamda</param>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.GetArgsFromReciever(System.Object)">
            <summary>
            Gets a list of all the argument definitions that are applied
            (via attributes) on the argument reciever object supplied.
            </summary>
            <param name="argsReciever">Object containing args attributes.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.GetArgValues(System.Object)">
            <summary>
            Get the all argument names / values from the object that recievers the arguments.
            </summary>
            <param name="argsReciever"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.GetArgValues(System.Collections.IDictionary,System.Object)">
            <summary>
            Get the all argument names / values from the object that recievers the arguments.
            </summary>
            <param name="argsReciever"></param>
            <param name="argsValueMap"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.CheckAndApplyArgs(ComLib.Arguments.Args,System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Applies the argument values to the object argument reciever.
            </summary>
            <param name="parsedArgs"></param>
            <param name="argReciever"></param>
            <param name="errors"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.SetValue(System.Object,System.Collections.Generic.KeyValuePair{ComLib.Arguments.ArgAttribute,System.Reflection.PropertyInfo},System.String)">
            <summary>
            Set the argument value from command line on the property of the object
            recieving the value.
            </summary>
            <param name="argReciever"></param>
            <param name="val"></param>
            <param name="rawArgValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.InterpretValues(ComLib.Arguments.Args)">
            <summary>
            Set the argument value from command line on the property of the object
            recieving the value.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:ComLib.Application.AppConfig">
            <summary>
            Settings for the application template.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppConfig.#ctor">
            <summary>
            Initialize defaults.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsPrefix">
            <summary>
            Prefix for named args. "-"
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsSeparator">
            <summary>
            Key / value separator for Named args. ":".
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsReciever">
            <summary>
            Object to apply the arguments to.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsAppliedToReciever">
            <summary>
            Whether or not to apply the arguments to the reciever.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsRequired">
            <summary>
            Whether or not any arguments are required at all.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.SendEmailOnCompletion">
            <summary>
            Whether or not to send email on completion.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.RequireConfigs">
            <summary>
            Whether or not config files are required.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_ActiveRecord">
            <summary>
            Example of ActiveRecord Initialization/Configuration.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_ActiveRecord.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_ActiveRecord.Init(System.Object)">
            <summary>
            Configure the ActiveRecord for Accounts
            NOTES: - All service objects can be constructed with a repository, validator, settings object.            
                   - All service objects can be constructed with a fake repository ( in memory ) for testing.
            
            POSSIBLE CONFIGURATIONS:
            1. Singleton account service as is.            
            2. Singleton account service and enable repository connection configuration.
            3. Factory method for creating account service and enable repository connection configuration.
            4. Factory methods for creating service, repository, validator and enabling repository connection configuration.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ComLib.Samples.Example_ActiveRecord.Person">
            <summary>
            ActiveRecord type 2:
            Combined entity and active record functionality.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_QueueProcessor">
            <summary>
            Example for the Queue namespace.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_QueueProcessor.Execute">
            <summary>
            Run the application.
            </summary>
        </member>
        <member name="T:ComLib.Lang.Operator">
            <summary>
            Token for the language.
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.Add">
            <summary>
            +
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.Subtract">
            <summary>
            -
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.Multiply">
            <summary>
            * 
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.Modulus">
            <summary>
            %
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.LessThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.LessThanEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.MoreThan">
            <summary>
            >
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.MoreThanEqual">
            <summary>
            >=
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.Equal">
            <summary>
            =
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.EqualEqual">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.NotEqual">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.And">
            <summary>
            and
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.Or">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.PlusPlus">
            <summary>
            ++
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.MinusMinus">
            <summary>
            --
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.PlusEqual">
            <summary>
            += 
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.MinusEqual">
            <summary>
            -=
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.MultEqual">
            <summary>
            *=
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.DivEqual">
            <summary>
            /=
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.LeftParenthesis">
            <summary>
            (
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.RightParenthesis">
            <summary>
            )
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.LeftBrace">
            <summary>
            {
            </summary>
        </member>
        <member name="F:ComLib.Lang.Operator.RightBrace">
            <summary>
            }
            </summary>
        </member>
        <member name="T:ComLib.Lang.Ops">
            <summary>
            Operator class helper methods
            </summary>
        </member>
        <member name="M:ComLib.Lang.Ops.IsBinary(ComLib.Lang.Operator)">
            <summary>
            Checks if the operator supplied is a binary op ( * / + - % )
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Ops.IsCompare(ComLib.Lang.Operator)">
            <summary>
            Checks if the operator supplied is a binary op ( * / + - % )
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Ops.IsIncrement(ComLib.Lang.Operator)">
            <summary>
            Checks if the operator supplied is a binary op ( * / + - % )
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Ops.IsLogical(ComLib.Lang.Operator)">
            <summary>
            Checks if the operator supplied is a binary op ( * / + - % )
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Ops.ToOp(System.String)">
            <summary>
            Gets the enum from the text operator
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.Keyword">
            <summary>
            Token for the language.
            </summary>
        </member>
        <member name="F:ComLib.Lang.Keyword.Var">
            <summary>
            var
            </summary>
        </member>
        <member name="F:ComLib.Lang.Keyword.If">
            <summary>
            if
            </summary>
        </member>
        <member name="F:ComLib.Lang.Keyword.For">
            <summary>
            for
            </summary>
        </member>
        <member name="F:ComLib.Lang.Keyword.While">
            <summary>
            while
            </summary>
        </member>
        <member name="F:ComLib.Lang.Keyword.Function">
            <summary>
            function
            </summary>
        </member>
        <member name="F:ComLib.Lang.Keyword.Break">
            <summary>
            break
            </summary>
        </member>
        <member name="F:ComLib.Lang.Keyword.Continue">
            <summary>
            continue
            </summary>
        </member>
        <member name="T:ComLib.Lang.Keywords">
            <summary>
            Operator class helper methods
            </summary>
        </member>
        <member name="M:ComLib.Lang.Keywords.IsKeyword(System.String)">
            <summary>
            Gets whether or not this is a keyword
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Keywords.ToKeyword(System.String)">
            <summary>
            Gets the enum from the text keyword
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.StartTimeOfDay">
            <summary>
            Enum to represent the time as a part of the day.
            </summary>
        </member>
        <member name="F:ComLib.StartTimeOfDay.All">
            <summary>
            All day.
            </summary>
        </member>
        <member name="F:ComLib.StartTimeOfDay.Morning">
            <summary>
            Morning part.
            </summary>
        </member>
        <member name="F:ComLib.StartTimeOfDay.Afternoon">
            <summary>
            Afternoon part.
            </summary>
        </member>
        <member name="F:ComLib.StartTimeOfDay.Evening">
            <summary>
            Evening part.
            </summary>
        </member>
        <member name="T:ComLib.TimeParseResult">
            <summary>
            Time parse result.
            </summary>
        </member>
        <member name="F:ComLib.TimeParseResult.IsValid">
            <summary>
            True if the parse was valid.
            </summary>
        </member>
        <member name="F:ComLib.TimeParseResult.Error">
            <summary>
            Validation error.
            </summary>
        </member>
        <member name="F:ComLib.TimeParseResult.Start">
            <summary>
            Start of period.
            </summary>
        </member>
        <member name="F:ComLib.TimeParseResult.End">
            <summary>
            End of period.
            </summary>
        </member>
        <member name="M:ComLib.TimeParseResult.#ctor(System.Boolean,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor to initialize the results.
            </summary>
            <param name="valid">Validation result.</param>
            <param name="error">Error string.</param>
            <param name="start">Start of period.</param>
            <param name="end">End of period.</param>
        </member>
        <member name="P:ComLib.TimeParseResult.StartTimeAsDate">
            <summary>
            Get the start time as a datetime.
            </summary>
        </member>
        <member name="P:ComLib.TimeParseResult.EndTimeAsDate">
            <summary>
            Get the end time as a datetime.
            </summary>
        </member>
        <member name="T:ComLib.TimeParserConstants">
            <summary>
            constants used by the time parser.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.Am">
            <summary>
            Am string.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.AmWithPeriods">
            <summary>
            Am string with periods a.m.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.Pm">
            <summary>
            Pm string.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.PmWithPeriods">
            <summary>
            Pm string with periods p.m.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.ErrorEndTimeLessThanStart">
            <summary>
            Error string for end time less than start time.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.ErrorStartEndTimeSepartorNotPresent">
            <summary>
            Error string for no separator between start and end time.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.ErrorStartTimeNotProvided">
            <summary>
            Error string for no start time provided.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.ErrorEndTimeNotProvided">
            <summary>
            Error string for no end time provided.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.MinDate">
            <summary>
            Min Time to represent All times for a post.
            </summary>
        </member>
        <member name="F:ComLib.TimeParserConstants.MaxDate">
            <summary>
            Max Time to represent all times for a post.
            </summary>
        </member>
        <member name="T:ComLib.TimeHelper">
            <summary>
            Class to parse time in following formats.
            
            1. 1
            2. 1am
            3. 1pm
            4. 1:30
            5. 1:30am
            6. 12pm
            </summary>
        </member>
        <member name="M:ComLib.TimeHelper.ParseStartEndTimes(System.String)">
            <summary>
            Parses the start and (optional) end time supplied as a single string.
            
            e.g.
                11:30am
                11am    -  1pm
                11am    to 1pm
            </summary>
            <remarks>If only 1 time is provided, it's assumed to be the starttime,
            and the end time is set to TimeSpan.MaxValue</remarks>
            <param name="startAndEndTimeRange">String with start and end time.</param>
            <returns>An instance of time parse result for the supplied string.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.ParseStartEndTimes(System.String,System.String,System.Boolean)">
            <summary>
            Parses the start and end time and confirms if the end time is greater than
            the start time.
            e.g. 11am, 1:30pm
            </summary>
            <param name="starts">Start time.</param>
            <param name="ends">End time.</param>
            <param name="checkEndTime">True to check end time.</param>
            <returns>An instance of time parse result.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.Parse(System.String)">
            <summary>
            Parse the time using Regular expression.
            </summary>
            <param name="strTime">Text with time.</param>
            <returns>Time parse result.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.ConvertFromMilitaryTime(System.Int32)">
            <summary>
            Convert military time ( 1530 = 3:30 pm ) to a TimeSpan.
            </summary>
            <param name="military">Military time.</param>
            <returns>An instance of timespan corresponding to the military time supplied.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.ConvertToMilitary(System.TimeSpan)">
            <summary>
            Converts to military time.
            </summary>
            <param name="timeSpan">Instance of time span with time to convert.</param>
            <returns>Military time corresponding to the time span supplied.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.Format(System.Int32,System.Boolean)">
            <summary>
            Returns a military time formatted as a string.
            </summary>
            <param name="militaryTime">Military time.</param>
            <param name="convertSingleDigit">True to convert times with single digit.</param>
            <returns>String with formatted equivalent of passed military time.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.Format(System.TimeSpan)">
            <summary>
            Get the time formatted correctly to exclude the minutes if
            there aren't any. Also includes am - pm.
            </summary>
            <param name="time">Time span to format.</param>
            <returns>String with formatted time span.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.GetTimeOfDay(System.TimeSpan)">
            <summary>
            Gets the time as a part of the day.( morning, afternoon, evening ).
            </summary>
            <param name="time">Time of day.</param>
            <returns>Instance of start time of day.</returns>
        </member>
        <member name="M:ComLib.TimeHelper.GetTimeOfDay(System.Int32)">
            <summary>
            Get the time of day ( morning, afternoon, etc. ) from military time.
            </summary>
            <param name="militaryTime">Military time.</param>
            <returns>Instance with corresponding start time of day.</returns>
        </member>
        <member name="T:ComLib.ExtensionMetaData">
            <summary>
            This class contains information about an extension.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionMetaData.Id">
            <summary>
            Extension id.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionMetaData.Instance">
            <summary>
            Extension instance.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionMetaData.Attribute">
            <summary>
            Extension attribute.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionMetaData.AdditionalAttributes">
            <summary>
            List of additional attributes.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionMetaData.DataType">
            <summary>
            Data type.
            </summary>
        </member>
        <member name="F:ComLib.ExtensionMetaData.Lamda">
            <summary>
            Lamda associated with extension.
            </summary>
        </member>
        <member name="T:ComLib.Web.UrlSeoUtils">
            <summary>
            Url optimizer utility class.
            </summary>
        </member>
        <member name="F:ComLib.Web.UrlSeoUtils.InvalidSeoUrlChars">
            <summary>
            String containing each invalid character.
            </summary>
        </member>
        <member name="F:ComLib.Web.UrlSeoUtils._invalidChars">
            <summary>
            Map of invalid characters that should not appear in 
            an SEO optimized url.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlSeoUtils.#cctor">
            <summary>
            Initialize the list of mappings.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlSeoUtils.BuildValidUrlUsingRegex(System.String)">
            <summary>
            Same as BuildValidUrl but uses RegEx and is much, much slower.
            </summary>
            <param name="title">URL.</param>
            <returns>Valid URL.</returns>
        </member>
        <member name="M:ComLib.Web.UrlSeoUtils.BuildValidUrl(System.String)">
            <summary>
            Generates an SEO optimized url.
            </summary>
            <param name="title">URL.</param>
            <returns>Valid URL.</returns>
        </member>
        <member name="T:ComLib.Web.ScriptsSupport.Scripts">
            <summary>
            Script collection.
            </summary>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.Scripts.AddLocation(System.String,System.Boolean)">
            <summary>
            Gets the scripts place holder for the specified location.
            </summary>
            <param name="location">Location.</param>
            <param name="useHttp">Use HTTP.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.Scripts.For(System.String)">
            <summary>
            Gets the scripts place holder for the specified location.
            </summary>
            <param name="location">Script location.</param>
            <returns>Instance of scripts holder.</returns>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.Scripts.AddJavascript(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a javascript to the specified location.
            </summary>
            <param name="location">Location.</param>
            <param name="name">Script name.</param>
            <param name="url">Script URL.</param>
            <param name="dependsOn">Script dependency.</param>
            <param name="version">Script version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.Scripts.AddCss(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a css to the specified location.
            </summary>
            <param name="location">Location.</param>
            <param name="name">CSS name.</param>
            <param name="url">CSS URL.</param>
            <param name="dependsOn">CSS dependency.</param>
            <param name="version">CSS version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.Scripts.ToHtml(System.String)">
            <summary>
            Gets the current scripts as html tags.
            </summary>
            <param name="location">Location.</param>
            <returns>Scripts as html tags.</returns>
        </member>
        <member name="T:ComLib.Types.TextSplitter">
            <summary>
            Helper class to split a long word into a single one.
            Alternative to possibly using Regular expression.
            </summary>
        </member>
        <member name="M:ComLib.Types.TextSplitter.CheckAndSplitText(System.String,System.Int32)">
            <summary>
            Check the single line of text for long word that exceeds the
            maximum allowed.
            If found, splits the word.
            </summary>
            <param name="text">Line of text.</param>
            <param name="maxCharsInWord">Maximum characters allowed in a word.</param>
            <returns>Splitted text.</returns>
        </member>
        <member name="M:ComLib.Types.TextSplitter.SplitWord(System.String,System.Int32,System.String)">
            <summary>
            Split the word, N number of times.
            </summary>
            <param name="text">The text to split.</param>
            <param name="charsPerWord">40 chars in each word.</param>
            <param name="spacer">" "</param>
            <returns>Splitted word.</returns>
        </member>
        <member name="M:ComLib.Types.TextSplitter.GetNumberOfTimesToSplit(System.Int32,System.Int32)">
            <summary>
            Determine how many times the word has to be split.
            </summary>
            <param name="wordLength">Length of word.</param>
            <param name="maxCharsInWord">Maximum characters in word.</param>
            <returns>Number of times to split the word.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.LocationLookUpType">
            <summary>
            This enumeration matches up with the enumerations used in the stored procedure
            for searching up by location.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.All">
            <summary>
            Locate all.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.City">
            <summary>
            City lookup.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.CityState">
            <summary>
            City/state lookup.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.CityCountry">
            <summary>
            City/country lookup.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.CityStateCountry">
            <summary>
            City/state/country lookup.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.State">
            <summary>
            State lookup.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.Country">
            <summary>
            Country lookup.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.Zip">
            <summary>
            Zip lookup.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpType.None">
            <summary>
            No lookup.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationConstants">
            <summary>
            Location constants.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationConstants.CountryUsa">
            <summary>
            Country string for United States.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationConstants.CountryId_USA">
            <summary>
            Country id for United States.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationConstants.ZipCodeLength">
            <summary>
            Length of zip code.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationConstants.CountryId_NA_Online">
            <summary>
            Country id iz online.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationConstants.ZipCode_NA_Online">
            <summary>
            Zip code is online.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationConstants.StateId_NA_Online">
            <summary>
            State id is online.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationConstants.CityId_NA">
            <summary>
            City id is online.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateValidator">
            <summary>
            Validator for StatusUpdate
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="validationEvent">Validation event to use.</param>
            <returns>True if the validation succeeds.</returns>
        </member>
        <member name="T:ComLib.Scheduling.Tasks.ITask">
            <summary>
            Interface for a macro
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Tasks.ITask.Process">
            <summary>
            Called to execute the task.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="exp">Expression.</param>
            <returns>Property name.</returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryExpressionHelper.BuildSinglePropertyCondition``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <param name="predicate">Expression.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryExpressionTypeHelper.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryExpressionTypeHelper.GetText(System.Linq.Expressions.ExpressionType)">
            <summary>
            Get the sql text equivalent of the expression type.
            </summary>
            <param name="expType">Type of expression.</param>
            <returns>Equivalent sql text.</returns>
        </member>
        <member name="T:ComLib.Queue.QueueProcessorSettings">
            <summary>
            Settings for the processing queue.
            </summary>
        </member>
        <member name="P:ComLib.Queue.QueueProcessorSettings.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="T:ComLib.Logging.LogConsole">
            <summary>
            This is the default extremely simple ( Console ) logger for the static class Logger.
            This means that the Logger does NOT have to be initialized with a provider.
            You can just use it immediately.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.#ctor">
            <summary>
            Default constructor. Not associated with any class/type.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.#ctor(System.String)">
            <summary>
            Constructor with name.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor with name.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.Log(ComLib.Logging.LogEvent)">
            <summary>
            This is the only method REQUIRED to be implemented.
            </summary>
            <param name="logEvent">Event to log.</param>
        </member>
        <member name="T:ComLib.LocationSupport.LocationService">
            <summary>
            LocationService parses text representing a location which can be various formats
            such as city, city/state, city/country, state, country.
            </summary>    
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.#ctor(System.Func{ComLib.Entities.IRepository{ComLib.LocationSupport.Country}},System.Func{ComLib.Entities.IRepository{ComLib.LocationSupport.State}},System.Func{ComLib.Entities.IRepository{ComLib.LocationSupport.City}})">
            <summary>
            Constuctor that also takes in the short name dao.
            </summary>
            <param name="countryRepoGetter"></param>
            <param name="stateRepoGetter"></param>
            <param name="cityRepoGetter"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.#ctor(ComLib.Entities.IRepository{ComLib.LocationSupport.Country},ComLib.Entities.IRepository{ComLib.LocationSupport.State},ComLib.Entities.IRepository{ComLib.LocationSupport.City})">
            <summary>
            Constuctor that also takes in the short name dao.
            </summary>
            <param name="countryRepo"></param>
            <param name="stateRepo"></param>
            <param name="cityRepo"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.Parse(System.String)">
            <summary>
            Does a high-level check of the format supplied and determines what type
            of location input was supplied.
            
            Formats are:
            1. city                         - "Bronx"
            2. city,state                   - "Bronx , New York"
            3. city,state( abbreviation )   - "Bronx , NY"
            4. city,country                 - "HomeTown , USA"
            5. state                        - "New Jersey"
            6. state abbreviation           - "NJ"
            7. country                      - "Italy"
            the actuall parsing 
            </summary>
            <param name="location">Text representing the location.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CreateCity(System.String,System.String,System.String)">
            <summary>
            Create a city in the underlying datastore using the fields supplied
            </summary>
            <param name="name">Name of the city</param>
            <param name="stateName">Name of the state the city is in</param>
            <param name="countryName">Name of the country the city is in</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CreateCountries(System.Collections.Generic.IList{ComLib.LocationSupport.Country})">
            <summary>
            Create all the countries.
            </summary>
            <param name="countries"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CreateCountry(System.String)">
            <summary>
            Create a country with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CreateCountry(System.String,System.String,System.Boolean)">
            <summary>
            Create the country using the name, alias.
            </summary>
            <param name="name">Country name</param>
            <param name="alias">Alias for the country</param>
            <param name="isAlias">Whether or not creating an alias.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CreateCountry(ComLib.LocationSupport.Country)">
            <summary>
            Create the country using the name, alias.
            </summary>
            <param name="country">Country to create</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CreateState(ComLib.LocationSupport.State)">
            <summary>
            Create the state.
            </summary>
            <param name="state">The state to create</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CreateState(System.String,System.String,System.String)">
            <summary>
            Create the state.
            </summary>
            <param name="name">Name of the state.</param>
            <param name="abbreviation">Abbreviation used for the state.</param>
            <param name="countryName">Name of the country this state belongs to.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.Country(System.String)">
            <summary>
            Get the country with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.StatesFor(System.String)">
            <summary>
            Get the states for the specified country
            </summary>
            <param name="countryname"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.CitiesFor(System.String,System.String)">
            <summary>
            Get the states for the specified country
            </summary>
            <param name="countryname"></param>
            <param name="statename"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.InternalParse(System.String)">
            <summary>
            Does a high-level check of the format supplied and determines what type
            of location input was supplied.
            
            Formats are:
            1. city                         - "Bronx"
            2. city,state                   - "Bronx , New York"
            3. city,state( abbreviation )   - "Bronx , NY"
            4. city,country                 - "HomeTown , USA"
            5. state                        - "New Jersey"
            6. state abbreviation           - "NJ"
            7. country                      - "Italy"
            the actuall parsing 
            </summary>
            <param name="locationData">The location to parse. Can be any combination of
            inputs, check the summary above.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.IsEmptyLocation(System.String)">
            <summary>
            Checks whether the location text supplied is empty.
            This trims any white space from both sides of the text before checking
            for empty string.
            </summary>
            <param name="locationData"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.IsUnitedStatesZipCode(System.String)">
            <summary>
            Determines if the location text supplied is a U.S. zipcode.
            This is true if text is 5 characters that are all numbers.
            </summary>
            <param name="locationText">e.g. "10465"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.ParseUnitedStatesZipCode(System.String)">
            <summary>
            Parse the zipcode representing a United States Zipcode.
            This must be a 5 digit zipcode.
            e.g. "10465"
            </summary>
            <param name="zip"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.Cities">
            <summary>
            Repository for the cities.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.States">
            <summary>
            Repository for the states.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.Countries">
            <summary>
            Repository for the countries
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.Settings">
            <summary>
            Settings for this Location service
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.CitiesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.CitiesList">
            <summary>
            Get the city list.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.CountriesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.CountriesList">
            <summary>
            Get the country lookup
            </summary>        
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.StatesLookup">
            <summary>
            Get the city lookup.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationService.StatesList">
            <summary>
            Get the states list.
            </summary>
        </member>
        <member name="T:ComLib.Macros.MacroService">
            <summary>
            Information Service
            </summary>
        </member>
        <member name="T:ComLib.Macros.IMacroService">
            <summary>
            Information Service
            </summary>
        </member>
        <member name="M:ComLib.Macros.IMacroService.BuildContent(ComLib.Macros.Tag)">
            <summary>
            Builds the content for the specified tag.
            </summary>
            <param name="tag">Instance of tag to process.</param>
            <returns>Tag content.</returns>
        </member>
        <member name="M:ComLib.Macros.IMacroService.BuildContent(System.String)">
            <summary>
            Builds content by replacing custom tags.
            </summary>
            <param name="content">String content.</param>
            <returns>Processed content.</returns>
        </member>
        <member name="M:ComLib.Macros.MacroService.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Macros.MacroService.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            Initialize.
            </summary>
            <param name="prefix">Macro prefix.</param>
            <param name="open">Macro start tag.</param>
            <param name="close">Macro end tag.</param>
        </member>
        <member name="M:ComLib.Macros.MacroService.Register(System.String,System.String,System.String,System.Func{ComLib.Macros.Tag,System.String})">
            <summary>
            Register the macro programmatically with lamda func.
            </summary>
            <param name="name">The name of the macro.</param>
            <param name="displayName">The display name of the macro</param>
            <param name="description">The description of the macro</param>
            <param name="callback">The callback to call when running the macro.</param>
        </member>
        <member name="M:ComLib.Macros.MacroService.Register(ComLib.Macros.MacroAttribute,ComLib.Macros.MacroParameterAttribute[],System.Func{ComLib.Macros.Tag,System.String})">
            <summary>
            Register the macro programmatically with lamda func.
            </summary>
            <param name="attrib">The macro attribute to register.</param>
            <param name="args">The list of macro parameters.</param>
            <param name="callback">The callback to use for the macro.</param>
        </member>
        <member name="M:ComLib.Macros.MacroService.BuildContent(ComLib.Macros.Tag)">
            <summary>
            Builds the content for the specified tag.
            </summary>
            <param name="tag">Instance of tag to process.</param>
            <returns>Content of tag.</returns>
        </member>
        <member name="M:ComLib.Macros.MacroService.BuildContent(System.String)">
            <summary>
            Builds the content by replacing any custom tags with their actual content by running the macros.
            </summary>
            <param name="content">String with content to process.</param>
            <returns>Processed content.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.CityRepository">
            <summary>
            Generic repository for persisting City.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.CityRepository"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.CityRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.CityRepository"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="db"></param>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize the rowmapper
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.Create(ComLib.LocationSupport.City)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.Update(ComLib.LocationSupport.City)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.BuildParams(ComLib.LocationSupport.City)">
            <summary>
            Creates db parameters for entity persistence.
            </summary>
            <param name="entity">Entity for which to create db parameters.</param>
            <returns>Array with db parameters for entity.</returns>
        </member>
        <member name="M:ComLib.LocationSupport.CityRepository.BuildParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates a db parameter.
            </summary>
            <param name="name">Name of parameter.</param>
            <param name="dbType">Type of parameter.</param>
            <param name="val">Value of parameter.</param>
            <returns>Created db parameter.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.CityRowMapper">
            <summary>
            RowMapper for City.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CityRowMapper.MapRow(System.Data.IDataReader,System.Int32)">
            <summary>
            Creates an instance of City from data of a data reader.
            </summary>
            <param name="reader">Reader with data.</param>
            <param name="rowNumber">Number of row with data.</param>
            <returns>Created instance of City.</returns>
        </member>
        <member name="T:ComLib.Environments.EnvDef">
            <summary>
            Environment service.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvDef.#ctor(System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Initializes this environment definition with the 
            collection of the environments(Prod, Qa, Dev, etc )
            and the selected environment ( Qa )
            </summary>
            <param name="selectedEnvironment"></param>
            <param name="available"></param>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Get(System.String)">
            <summary>
            Get the env entry associated with the name.
            </summary>
            <param name="envName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Get(System.Int32)">
            <summary>
            Get the env entry associated with the name.
            </summary>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvDef.GetAll">
            <summary>
            Get all the environments that are part of the EnvironmentContext
            for this definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Init(System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Initialize with list of available environments and the currently selected one.
            </summary>
            <param name="available"></param>
            <param name="selected"></param>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Change(System.String)">
            <summary>
            Set the current environment.
            </summary>
            <param name="envName"></param>
        </member>
        <member name="E:ComLib.Environments.EnvDef.OnEnvironmentChange">
            <summary>
            Event handler when the active environment changes ( e.g. from Prod to Qa.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Name">
            <summary>
            Name of the environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.EnvType">
            <summary>
            Return the current environment type.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Selected">
            <summary>
            The Top most environment in the inheritance chain ).
            E.g. If Prod inherits from Qa, Qa inherits from Dev
            This is the selected environment among Prod, Qa, Dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsProd">
            <summary>
            Is production.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsQa">
            <summary>
            Is Qa
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsDev">
            <summary>
            Is development.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsUat">
            <summary>
            Is uat.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Count">
            <summary>
            Get the number of available envs.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Inheritance">
            <summary>
            List of the inherited environments that make up this environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Inherits">
            <summary>
            Get the inheritance path, e.g. prod;qa;dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.RefPath">
            <summary>
            Get the reference path.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Available">
            <summary>
            Provides list of names of available environments than can be selected by user.
            </summary>
        </member>
        <member name="T:ComLib.Diagnostics.DiagnosticGroup">
            <summary>
            List of different groups of diagnostic information.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.MachineInfo">
            <summary>
            Information about the machine.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.EnvUser">
            <summary>
            User level environment variables.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.EnvSys">
            <summary>
            System level environment variables.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.Drives">
            <summary>
            The drives available on the machine.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.AppDomain">
            <summary>
            Components loaded in the app-domain.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.Services">
            <summary>
            List of services that are running.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.Processes">
            <summary>
            List of processes loaded by the executing assembly.
            </summary>
        </member>
        <member name="F:ComLib.Diagnostics.DiagnosticGroup.Modules">
            <summary>
            Modules.
            </summary>
        </member>
        <member name="T:ComLib.Diagnostics.DiagnosticsService">
            <summary>
            Get diagnostic information about the machine and current process.
            This includes information for the following set of data:
            1. MachineInfo
            2. Env_System
            3. Env_User
            4. Drives
            5. AppDomain
            6. Services
            7. Processes
            8. Modules
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.#ctor">
            <summary>
            Initalizes a list representing a set of computer/application related data that can be diagnosed.
            This includes:
            1. Machine Information, 2. Environment variables. 3. Drives, 4. AppDomain ( dlls loaded )., etc.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.#ctor(System.Boolean,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Initalizes a list representing a set of computer/application related data that can be diagnosed.
            This includes:
            1. Machine Information, 2. Environment variables. 3. Drives, 4. AppDomain ( dlls loaded )., etc.
            </summary>
            <param name="include">True to include specified groups.</param>
            <param name="groups">Array with groups.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.#ctor(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Initalizes a list representing a set of computer/application related data that can be diagnosed.
            This includes:
            1. Machine Information, 2. Environment variables. 3. Drives, 4. AppDomain ( dlls loaded )., etc.
            </summary>
            <param name="include">True to include specified groups.</param>
            <param name="diagnosticGroups">List with groups.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.FilterOn(System.Boolean,System.String)">
            <summary>
            Filter the diagnostics on the supplied comma delimited list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="groupNamesDelimited">"MachineInfo,AppDomain,Drives"</param>
            <param name="include">Whether or the the groups supplied should be
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.FilterOn(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Filter the diagnostics on the list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="groupNames">"MachineInfo,AppDomain,Drives"</param>
            <param name="include">Whether or the the groups supplied should be
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.FilterOn(System.Boolean,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Filter the diagnostics on the supplied list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="include">Whether or the the groups supplied should be
            <param name="groups">Array with groups.</param>
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.GetDataTextual">
            <summary>
            Get all diagnostic information about currently running process
            and machine information.
            </summary>
            <returns>Diagnostic information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfo(System.String)">
            <summary>
            Write all the diagnostic info to file.
            </summary>
            <param name="filePath">Path to file.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfo(System.String,System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="path">Path of file to write information to.</param>
            <param name="referenceMessage">Reference message.</param>
            <param name="diagnosticGroups">String with comma-delimited list of groups.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfo(System.String,System.String,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="path">Path of file to write information to.</param>
            <param name="referenceMessage">Reference message.</param>
            <param name="groups">Array with groups.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.GetData">
            <summary>
            Get all diagnostic information about currently running process
            and machine information.
            </summary>
            <returns>Diagnostic information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.Init">
            <summary>
            Initializes internal variables.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfoInternal(System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="path">Path of file to write information to.</param>
            <param name="referenceMessage">Reference message.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.BuildDiagnostics(System.Text.StringBuilder,System.Collections.IDictionary)">
            <summary>
            Build a textual representation of all the diagnostics information.
            </summary>
            <param name="buffer">String builder to use when building diagnostics info.</param>
            <param name="diagnostics">Dictionary with diagnostic keys.</param>
            <returns>String with diagnostic information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.BuildSection(System.Text.StringBuilder,System.Collections.IDictionary,System.Object)">
            <summary>
            Builds a "INI" formatted represention of the diagnostic information
            for the group specified.
            </summary>
            <param name="buffer">String builder to use when building diagnostics info.</param>
            <param name="diagnostics">Dictionary with diagnostic keys.</param>
            <param name="sectionName">INI section.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.BuildProperties(System.Text.StringBuilder,System.Collections.IDictionary)">
            <summary>
            Recursively builds an ini formatted representation of all the diagnostic 
            information.
            </summary>
            <param name="buffer">String builder to use when building diagnostics info.</param>
            <param name="diagnostics">Dictionary with diagnostic keys.</param>
        </member>
        <member name="P:ComLib.Diagnostics.DiagnosticsService.GroupNames">
            <summary>
            The names of the groups representing what can be diagnosed.
            </summary>
        </member>
        <member name="P:ComLib.Diagnostics.DiagnosticsService.GroupNamesAll">
            <summary>
            The names of the groups representing what can be diagnosed.
            </summary>
        </member>
        <member name="T:ComLib.Data.DBSchema">
            <summary>
            TO_DO:
            Class containing various methods for discovering various objects in a database.
            eg.
            1. Find tables
            2. Find schemas
            3. Find stored procedures
            4. Find Views
            </summary>
        </member>
        <member name="M:ComLib.Data.DBSchema.#ctor">
            <summary>
            Default construction
            </summary>
        </member>
        <member name="M:ComLib.Data.DBSchema.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Data.DBSchema.DropTable(System.String)">
            <summary>
            Drop the table from the database.
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:ComLib.Data.DBSchema.GetDropTable(System.String,System.Boolean)">
            <summary>
            Creates a DROP TABLE statement preceeded
            by an optional corresponding IF EXISTS statement.
            </summary>
            <param name="tableName">Name of table to use.</param>
            <param name="includeGo">True to generate IF EXISTS statement.</param>
            <returns>Generated string.</returns>
        </member>
        <member name="M:ComLib.Data.DBSchema.GetDropProc(System.String,System.String)">
            <summary>
            Get the drop command for the procedure giving the table name and procedure name.
            </summary>
            <param name="tableName"></param>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBSchema.GetTables">
            <summary>
            Outputs all schemas to a file.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.RandomTextGeneratorSettings">
            <summary>
            Settings for the random text generator.
            </summary>
        </member>
        <member name="P:ComLib.CaptchaSupport.RandomTextGeneratorSettings.Length">
            <summary>
            Gets or sets the length of random charachters to generate
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.RandomTextGeneratorSettings.AllowedChars">
            <summary>
            Gets or sets the allowed chars.
            </summary>
            <value>The allowed chars.</value>
        </member>
        <member name="T:ComLib.BootStrapSupport.BootStrapper">
            <summary>
            BootStrapper for application startup.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.#ctor">
            <summary>
            Applies default values.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.Configure">
            <summary>
            Useful for derived classes that extend bootstrapper.
            use this method for adding startup and shutdown tasks.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStart(System.String,System.Boolean,System.Action{ComLib.BootStrapSupport.IAppContext})">
            <summary>
            Add a new startup task.
            </summary>
            <param name="name">Name of action.</param>
            <param name="continueOnFailure">Whether or not to proceed to next task on failure.</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStart(System.String,System.String,ComLib.BootStrapSupport.Task.Importance,System.Boolean,System.Action{ComLib.BootStrapSupport.IAppContext})">
            <summary>
            Add a new startup task.
            </summary>
            <param name="name">Name of action.</param>
            <param name="group">The group.</param>
            <param name="priority">The priority.</param>
            <param name="continueOnFailure">Whether or not to proceed to next task on failure.</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStart(System.String,System.String,ComLib.BootStrapSupport.Task.Importance,System.Boolean,System.Boolean,System.Action{ComLib.BootStrapSupport.IAppContext})">
            <summary>
            Add a new startup task.
            </summary>
            <param name="name">Name of action.</param>
            <param name="group">The group.</param>
            <param name="priority">The priority.</param>
            <param name="isEnabled">Whether or not the task is enabled.</param>
            <param name="continueOnFailure">Whether or not to proceed to next task on failure.</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStart(ComLib.BootStrapSupport.Task)">
            <summary>
            Add a new startup task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStop(System.String,System.String,ComLib.BootStrapSupport.Task.Importance,System.Boolean,System.Action{ComLib.BootStrapSupport.IAppContext})">
            <summary>
            Add a shutdown task.
            </summary>
            <param name="name">Name of the action.</param>
            <param name="group">The group.</param>
            <param name="priority">The priority.</param>
            <param name="continueOnFailure">Whether or not to proceed next shutdown task on failure.</param>
            <param name="action">Action to execute on shutdown</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStop(ComLib.BootStrapSupport.Task)">
            <summary>
            Add a shutdown task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.StartUp(ComLib.BootStrapSupport.IAppContext)">
            <summary>
            Run startup.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.StartUp(ComLib.BootStrapSupport.IAppContext,System.String[])">
            <summary>
            Run startup.
            </summary>
            <param name="context">The context.</param>
            <param name="taskNames">The task names to startup.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.ShutDown(ComLib.BootStrapSupport.IAppContext)">
            <summary>
            Run Shutdown.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.ShutDown(ComLib.BootStrapSupport.IAppContext,System.String[])">
            <summary>
            Run Shutdown.
            </summary>
            <param name="context">The context.</param>
            <param name="taskNames">The task names.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.GetStartupStatus">
            <summary>
            Gets the startup status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.InternalRun(System.Collections.Generic.IList{ComLib.BootStrapSupport.Task},ComLib.BootStrapSupport.IAppContext,System.Boolean,System.String[])">
            <summary>
            Run the tasks supplied.
            </summary>
            <param name="tasks"></param>
            <param name="context"></param>
            <param name="isStartup"></param>
            <param name="taskNames"></param>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootStrapper.LogErrors">
            <summary>
            Whether or not to log all errors to the default logger.
            </summary>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootStrapper.Logger">
            <summary>
            A lamda to call on errors.
            </summary>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootStrapper.PropagateException">
            <summary>
            If an exception occurrs in one of the tasks and that should prevent continuing,
            this indicates whether or catch the exception or propagate it up.
            </summary>
        </member>
        <member name="T:ComLib.PageRotator">
            <summary>
            Rotates the pages.
            </summary>
        </member>
        <member name="M:ComLib.PageRotator.#ctor">
            <summary>
            Consturctor.
            </summary>
        </member>
        <member name="M:ComLib.PageRotator.MoveNext(System.Int32)">
            <summary>
            Move to next page using new number of total records.
            </summary>
            <param name="totalRecords">Total number of records.</param>
            <returns>Record position after resetting the number of total records.</returns>
        </member>
        <member name="M:ComLib.PageRotator.MoveNext">
            <summary>
            Move to next page using existing total records.
            </summary>
            <returns>Current position.</returns>
        </member>
        <member name="P:ComLib.PageRotator.TotalRec">
            <summary>
            total records
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.TotalPages">
            <summary>
            Total pages.
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.HasPages">
            <summary>
            Are there any pages
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.RecPerPage">
            <summary>
            records per page
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.CurrentPage">
            <summary>
            Current page.
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.IsMultiplesEnabled">
            <summary>
            Get/set whether multiple pages are enabled.
            </summary>
        </member>
        <member name="T:ComLib.Lang.BinaryExpression">
            <summary>
            For loop Expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.BinaryExpression.#ctor(ComLib.Lang.Expression,ComLib.Lang.Operator,ComLib.Lang.Expression)">
            <summary>
            Initialize
            </summary>
            <param name="left">Left hand expression</param>
            <param name="op">Operator</param>
            <param name="right">Right expression</param>
        </member>
        <member name="F:ComLib.Lang.BinaryExpression.Left">
            <summary>
            Left hand expression
            </summary>
        </member>
        <member name="F:ComLib.Lang.BinaryExpression.Op">
            <summary>
            Operator * - / + % 
            </summary>
        </member>
        <member name="F:ComLib.Lang.BinaryExpression.Right">
            <summary>
            Right hand expression
            </summary>
        </member>
        <member name="M:ComLib.Lang.BinaryExpression.Evaluate">
            <summary>
            Evaluate * / + - % 
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.ScriptsSupport.ScriptsHolder">
            <summary>
            Script collection.
            </summary>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptsHolder.#ctor">
            <summary>
            Default initialization
            </summary>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptsHolder.#ctor(System.Boolean)">
            <summary>
            Initialize flag to use http context or in-memory.
            </summary>
            <param name="useHttp">True to use HTTP context.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptsHolder.AddJavascript(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the javascript to the scripts.
            </summary>
            <param name="name">Script name.</param>
            <param name="url">Script URL.</param>
            <param name="dependsOn">Script dependency.</param>
            <param name="version">Script version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptsHolder.AddCss(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the css to the scripts collection.
            </summary>
            <param name="name">CSS name.</param>
            <param name="url">CSS URL.</param>
            <param name="dependsOn">CSS dependency.</param>
            <param name="version">CSS version.</param>
        </member>
        <member name="M:ComLib.Web.ScriptsSupport.ScriptsHolder.ToHtml">
            <summary>
            Html representation of all the scripts, javascript followed by css.
            </summary>
            <returns>HTML representation of scripts.</returns>
        </member>
        <member name="T:ComLib.LocationSupport.LocationLookUpResult">
            <summary>
            Result when trying to search by a location.
            This is actually the result provided back from location service
            when parsing some location.
            
            e.g.
            
            zipcode    : "10465"
            state      : "ny"
            city/state : "bronx, ny"
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult._isValid">
            <summary>
            True if the location is valid/
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult._error">
            <summary>
            Validation error.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpResult.#cctor">
            <summary>
            Static constructor to build the null object "Empty"
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpResult.#ctor(ComLib.LocationSupport.LocationLookUpType,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="lookupType"></param>
            <param name="isValid"></param>
            <param name="error"></param>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.City">
            <summary>
            City name
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.CityId">
            <summary>
            City Id.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.State">
            <summary>
            State name
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.StateAbbr">
            <summary>
            State abbreviation
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.StateId">
            <summary>
            State id
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.Country">
            <summary>
            Country name
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.CountryId">
            <summary>
            Country id
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.Zip">
            <summary>
            Zip code
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.Empty">
            <summary>
            Null object. 
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByZip">
            <summary>
            Indicates if looking up by zip
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByState">
            <summary>
            Indicates if looking up by state name
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCountry">
            <summary>
            Searching by country
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByNotApplicable">
            <summary>
            Looking up by locatio not applicable.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCity">
            <summary>
            Indicates if looking up by city.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCityState">
            <summary>
            Indicates if looking up by city/state combination.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCityCountry">
            <summary>
            Indicates if looking up by City country combination.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.LookUpType">
            <summary>
            Get the lookup type.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsValid">
            <summary>
            Valid zip code?
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.Error">
            <summary>
            Error if invalid.
            </summary>
        </member>
        <member name="T:ComLib.Subs.Substitutor">
            <summary>
            Class to replace symbol names with actual values.
            Such as ${today}
            </summary>
        </member>
        <member name="M:ComLib.Subs.Substitutor.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Substitute(System.Collections.Generic.List{System.String})">
            <summary>
            Performs substitutions on all the string items in the list supplied.
            converts: List[0] = ${today} = 03/28/2009.
            </summary>
            <param name="names">List of strings for substitution.</param>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Substitute(System.String)">
            <summary>
            Get the interpreted value of the function call.
            e.g. 
            1. "${today}" will return today's date in MM/dd/YYYY format.
            2. "${T-1}"   will returns yesterdays date in MM/dd/YYYY format.
            3. "${Env.Var('PYTHON_HOME')} will return the value of the environment variable "PYTHON_PATH"
            4. "${Enc.Decode('28asd42=')} will decrypt the encrypted value supplied, 
                                          using the provider setup in the cryptography service.
            </summary>
            <param name="substitution">Substitution to use.</param>
            <returns>Interpreted value.</returns>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Register(System.String,System.Collections.Generic.IDictionary{System.String,System.Func{System.String,System.String}})">
            <summary>
            Register custom substitutions.
            </summary>
            <param name="group">Group to use.</param>
            <param name="interpretedVals">Custom substitutions.</param>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Register(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Add a single custom substitution interpretor for the respective group, key.
            </summary>
            <param name="group">Group to use.</param>
            <param name="replacement">String to substitute.</param>
            <param name="interpretor">Function to calculate substitution.</param>
        </member>
        <member name="T:ComLib.Subs.SubstitutionService">
            <summary>
            Class to replace symbol names with actual values.
            Such as ${today}
            </summary>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Substitute(System.Collections.Generic.List{System.String})">
            <summary>
            Performs substitutions on all the string items in the list supplied.
            converts: List[0] = ${today} = 03/28/2009.
            </summary>
            <param name="names">List of strings for substitution.</param>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Register(System.String,System.Collections.Generic.IDictionary{System.String,System.Func{System.String,System.String}})">
            <summary>
            Registers custom substitutions for the respective group.
            </summary>
            <param name="group">Substitution group.</param>
            <param name="interpretedVals">Custom substitutions.</param>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Register(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Registers custom substitution.
            </summary>
            <param name="group">Substitution group.</param>
            <param name="replacement">String to substitute.</param>
            <param name="interpretor">Function that calculates substitution value.</param>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Init">
            <summary>
            Sets up the default substitution name/values.
            </summary>
        </member>
        <member name="P:ComLib.Subs.SubstitutionService.Item(System.String)">
            <summary>
            Get the interpreted value of the function call.
            e.g. 
            1. "${today}" will return today's date in MM/dd/YYYY format.
            2. "${T-1}"   will returns yesterdays date in MM/dd/YYYY format.
            3. "${Env.Var('PYTHON_HOME')} will return the value of the environment variable "PYTHON_PATH"
            4. "${Enc.Decode('28asd42=')} will decrypt the encrypted value supplied, 
                                          using the provider setup in the cryptography service.
            </summary>
            <param name="funcCall">Function call.</param>
            <returns>Interpreted value.</returns>
        </member>
        <member name="T:ComLib.Subs.Substitution">
            <summary>
            Substitution.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.Empty">
            <summary>
            empty / null object.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.Groupname">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.FuncName">
            <summary>
            Func name to call.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.Args">
            <summary>
            Arguments passed to func.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.IsValid">
            <summary>
            Is valid.
            </summary>
        </member>
        <member name="M:ComLib.Subs.Substitution.#ctor">
            <summary>
            Default.
            </summary>
        </member>
        <member name="M:ComLib.Subs.Substitution.#ctor(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Initialize.
            </summary>
            <param name="group">Group of substitution.</param>
            <param name="func">Substitution function.</param>
            <param name="isValid">Valid flag.</param>
            <param name="args">Substitution arguments.</param>
        </member>
        <member name="T:ComLib.Entities.ILookUpMulti`1">
            <summary>
            Interface for looking up data by id or name.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="P:ComLib.Entities.ILookUpMulti`1.Item(System.Int32)">
            <summary>
            Get the item by an index.
            </summary>
            <param name="id">Index of item.</param>
            <returns>Item at supplied index.</returns>
        </member>
        <member name="P:ComLib.Entities.ILookUpMulti`1.Item(System.String)">
            <summary>
            Get the item by its name.
            </summary>
            <param name="name">Name of item.</param>
            <returns>Item with supplied name.</returns>
        </member>
        <member name="T:ComLib.Queue.QueueProcessState">
            <summary>
            State of the Queue Processor
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueProcessState.Idle">
            <summary>
            Queue processor is idle.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueProcessState.Busy">
            <summary>
            Queue processor is busy.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueProcessState.Stopped">
            <summary>
            Queue processor is stopped.
            </summary>
        </member>
        <member name="T:ComLib.Data.Query`1">
            <summary>
            This class implements a method to create queries.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.Query">
            <summary>
            Base class for Query.
            </summary>
        </member>
        <member name="F:ComLib.Data.Query._data">
            <summary>
            Query information.
            </summary>
        </member>
        <member name="F:ComLib.Data.Query._builder">
            <summary>
            Instance of query builder.
            </summary>
        </member>
        <member name="F:ComLib.Data.Query._lastCondition">
            <summary>
            Last condition used when creating the query.
            </summary>
        </member>
        <member name="M:ComLib.Data.Query.New">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Query.AddCondition(System.String,System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Adds a new AND condition to the query.
            </summary>
            <param name="field">Conditional field.</param>
            <param name="comparison">Comparison expression.</param>
            <param name="val">Value to check against.</param>
        </member>
        <member name="M:ComLib.Data.Query.Complete">
            <summary>
            Completes this condition construction.
            </summary>
        </member>
        <member name="M:ComLib.Data.Query.BuildCondition``1(System.String,System.Object[])">
            <summary>
            Builds a comparison condition. 
            </summary>
            <typeparam name="TParam">Type of parameter.</typeparam>
            <param name="comparison">Comparison operator.</param>
            <param name="vals">Values to compare against.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query.BuildCondition(System.String,System.Object)">
            <summary>
            Builds a comparison condition using a string.
            </summary>
            <param name="comparison">Comparison operator.</param>
            <param name="val">String value to compare against.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query.ConvertVal(System.Object)">
            <summary>
            Converts an object to an equivalent string value.
            </summary>
            <param name="val">Object to convert to string.</param>
            <returns>String equivalent of object.</returns>
        </member>
        <member name="M:ComLib.Data.Query.StartNewCondition(ComLib.Data.ConditionType,System.String)">
            <summary>
            Starts a new query condition after
            saving any previous one.
            </summary>
            <param name="condition">Condition to start.</param>
            <param name="fieldName">Name of field to operate on.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query.Encode(System.String)">
            <summary>
            Encode the text for single quotes.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Encoded text.</returns>
        </member>
        <member name="P:ComLib.Data.Query.Data">
            <summary>
            The data for the criteria, including select field, conditions, orderby etc.
            </summary>
        </member>
        <member name="P:ComLib.Data.Query.Builder">
            <summary>
            The data for the criteria, including select field, conditions, orderby etc.
            </summary>
        </member>
        <member name="M:ComLib.Data.Query`1.New">
            <summary>
            Creates a new instance.
            </summary>
            <returns>An empty string.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.New(System.String)">
            <summary>
            Creates new Query object for the specified db provider name.
            </summary>
            <param name="dbProviderName">Name of the db provider.</param>
            <returns>A new instance of Query.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Data.Query`1"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Data.Query`1.AddCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Adds a condition to the query.
            </summary>
            <param name="exp">Expression to extract field name.</param>
            <param name="comparison">Comparison expression.</param>
            <param name="val">Value to compare against.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Adds columns to a select statement.
            </summary>
            <param name="colExpressions">Expressions to retrieve column names.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds a WHERE clause to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an AND condition to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an OR condition to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an Order-By clause to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds a descending order clause to the query.
            </summary>
            <param name="exp">Expression to retrieve property name.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Select(System.String[])">
            <summary>
            Adds columns to a select statement.
            </summary>
            <param name="cols">Array with columns to add.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Select(System.String)">
            <summary>
            Adds a column to a select statement.
            </summary>
            <param name="col">Name of column to add.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.As(System.String)">
            <summary>
            Adds an AS clause to the query.
            </summary>
            <param name="columnAlias">Column alias to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.From(System.String)">
            <summary>
            Designates the table to operate on.
            </summary>
            <param name="tableName">Name of table.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Where(System.String)">
            <summary>
            Adds a WHERE condition to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.And(System.String)">
            <summary>
            Adds an AND operation to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Or(System.String)">
            <summary>
            Adds an OR operation to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Is(System.Object)">
            <summary>
            Adds an equality condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Not(System.Object)">
            <summary>
            Adds an inequality condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Null">
            <summary>
            Adds a null comparison condition to the query.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.NotNull">
            <summary>
            Adds a not-null comparison condition to the query.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.In``1(System.Object[])">
            <summary>
            Adds an IN condition to the query.
            </summary>
            <typeparam name="TParam">Type of parameter.</typeparam>
            <param name="vals">Array with values to check for.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.NotIn``1(System.Object[])">
            <summary>
            Adds a NOT-IN condition to the query.
            </summary>
            <typeparam name="TParam">Type of parameter.</typeparam>
            <param name="vals">Array with values to check for.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Like(System.String)">
            <summary>
            Adds a LIKE condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Like(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a LIKE condition to the query.
            </summary>
            <param name="val">Value to check for.</param>
            <param name="addWildcardPrefix">True to add a wildcard prefix.</param>
            <param name="addWildcardSuffix">True to add a wildcard suffix.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.MoreThan(System.Object)">
            <summary>
            Adds a greater-than comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.MoreEqual(System.Object)">
            <summary>
            Adds a greater-or-equal comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.LessThan(System.Object)">
            <summary>
            Adds a less-than comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.LessEqual(System.Object)">
            <summary>
            Adds a less-or-equal-than comparison to the query.
            </summary>
            <param name="val">Value to check against.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.OrderBy(System.String)">
            <summary>
            Adds an ascending order-by clause to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>this instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.OrderByDescending(System.String)">
            <summary>
            Adds a descending order-by clause to the query.
            </summary>
            <param name="field">Name of field to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.Limit(System.Int32)">
            <summary>
            Limits the query result to a number of records.
            </summary>
            <param name="maxRecords">Number of records to limit.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.End">
            <summary>
            Completes the query.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.BuildCondition``1(System.String,System.Object[])">
            <summary>
            Adds a condition to the query.
            </summary>
            <typeparam name="TParam">Type of parameter.</typeparam>
            <param name="comparison">Comparison operator.</param>
            <param name="vals">Values to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.BuildCondition(System.String,System.Object)">
            <summary>
            Adds a condition to the query.
            </summary>
            <param name="comparison">Comparison operator.</param>
            <param name="val">Value to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Data.Query`1.OrderByInternal(System.String,ComLib.Data.OrderByType)">
            <summary>
            Adds an order-by to the query.
            </summary>
            <param name="field">Name of field.</param>
            <param name="order">Type of ordering.</param>
            <returns>This instance.</returns>
        </member>
        <member name="T:ComLib.Logging.LogMulti">
            <summary>
            Logging class that will log to multiple loggers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.#ctor(System.String,ComLib.Logging.ILog)">
            <summary>
            Initalize a logger.
            </summary>
            <param name="logger">Logging object.</param>
            <param name="name">Name of application.</param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.#ctor(System.String,System.Collections.Generic.IList{ComLib.Logging.ILog})">
            <summary>
            Initalize multiple loggers.
            </summary>
            <param name="name">Name of application.</param>
            <param name="loggers">List of logging objects.</param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Init(System.String,System.Collections.Generic.IList{ComLib.Logging.ILog})">
            <summary>
            Initialize with loggers.
            </summary>
            <param name="name">Name of application.</param>
            <param name="loggers">List of logging objects.</param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Log(ComLib.Logging.LogEvent)">
            <summary>
            Log the event to each of the loggers.
            </summary>
            <param name="logEvent">Event to log.</param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Append(ComLib.Logging.ILog)">
            <summary>
            Append to the chain of loggers.
            </summary>
            <param name="logger">Logger.</param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Replace(ComLib.Logging.ILog)">
            <summary>
            Replaces all the existing loggers w/ the supplied logger.
            </summary>
            <param name="logger">Logger.</param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Clear">
            <summary>
            Clear all the exiting loggers and only add the console logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.IsEnabled(ComLib.Logging.LogLevel)">
            <summary>
            Whether or not the level specified is enabled.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the supplied level is enabled.</returns>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.ShutDown">
            <summary>
            Shutdown all loggers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.ActivateOptions">
            <summary>
            Determine the lowest level by getting the lowest level
            of all the loggers.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Count">
            <summary>
            Get the number of loggers that are part of this loggerMulti.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="loggerName">Name of logger.</param>
            <returns>Logger corresponding to supplied name.</returns>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Item(System.Int32)">
            <summary>
            Get a logger by it's index.
            </summary>
            <param name="logIndex">Index of logger.</param>
            <returns>Logger corresponding to supplied index.</returns>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Level">
            <summary>
            Get the level. ( This is the lowest level of all the loggers. ).
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationValidator">
            <summary>
            Validates the state/zip code combinations.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.#ctor(ComLib.LocationSupport.Address,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="address"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.#ctor(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="statesLookup"></param>
            <param name="countryLookup"></param>
            <param name="countryId"></param>
            <param name="stateId"></param>
            <param name="city"></param>
            <param name="zip"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.#ctor(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,ComLib.LocationSupport.Address,System.Boolean)">
            <summary>
            Initalize using the Address object.
            </summary>
            <param name="statesLookup"></param>
            <param name="countryLookup"></param>
            <param name="address"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.Init(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,ComLib.LocationSupport.Address,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="statesLookup"></param>
            <param name="countryLookup"></param>
            <param name="address"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validate the rule against the data.
            </summary>
        </member>
        <member name="T:ComLib.Calendars.CalanderDao">
            <summary>
            Data provider for holidays.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.#ctor">
            <summary>
            Allow default construction.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.#ctor(System.String,System.Collections.Generic.List{ComLib.Calendars.Holiday})">
            <summary>
            Initialize with calendar code and holidays list.
            </summary>
            <param name="calendarCode"></param>
            <param name="holidays"></param>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.Load(System.String,System.Collections.Generic.List{ComLib.Calendars.Holiday})">
            <summary>
            Interpret the holidays.
            </summary>
            <param name="calendarCode"></param>
            <param name="holidays"></param>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.Holidays(System.Int32,System.Int32)">
            <summary>
            Get the holidays.
            </summary>
            <param name="startyear"></param>
            <param name="endYear"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.CalanderDao.CalendarCode">
            <summary>
            Get /set the calendar code.
            </summary>
        </member>
        <member name="T:ComLib.Macros.MacroAttribute">
            <summary>
            Attribute used to define a widget.
            </summary>
        </member>
        <member name="P:ComLib.Macros.MacroAttribute.ExampleInnerContent">
            <summary>
            Example of the inner content.
            </summary>
        </member>
        <member name="P:ComLib.Macros.MacroAttribute.HasInnerContent">
            <summary>
            Whether or not this macro supports inner content.
            </summary>
        </member>
        <member name="T:ComLib.Information.InformationService">
            <summary>
            Information Service
            </summary>
        </member>
        <member name="M:ComLib.Information.InformationService.GetInfoTask(System.String,System.Boolean,System.Func{System.String,System.Boolean})">
            <summary>
            Gets the information task after validating that the user has access to it.
            </summary>
            <param name="name"></param>
            <param name="authenticate"></param>
            <param name="authenticator"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Environments.Env">
            <summary>
            Class to represent the currently selected environment.
            This is just a provider pattern.
            </summary>
        </member>
        <member name="M:ComLib.Environments.Env.Init(ComLib.Environments.IEnv)">
            <summary>
            Initialize with current environment.
            </summary>
            <param name="environment"></param>
        </member>
        <member name="M:ComLib.Environments.Env.Get(System.String)">
            <summary>
            Get the env entry associated with the name.
            </summary>
            <param name="envName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.Env.Change(System.String)">
            <summary>
            Change the environment set environment name e.g. ("ny.prod,uat,qa,dev").
            </summary>
            <param name="environmentName"></param>
        </member>
        <member name="M:ComLib.Environments.Env.Current_OnEnvironmentChange(System.Object,System.EventArgs)">
            <summary>
            Notifiy environment changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ComLib.Environments.Env.OnChange">
            <summary>
            Event handler for an environment change.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Name">
            <summary>
            Name of current envionment selected during initialization. e.g. "london.prod" or "prod | uat | qa | dev".
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.EnvType">
            <summary>
            The environment type (prod, qa, etc ) of current selected environment
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Inherits">
            <summary>
            Inheritance path of the currently selected environment.
            e.g. prod could inherit from qa->dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Inheritance">
            <summary>
            Inheritance list of environments.
            Prod->Qa->Dev
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Selected">
            <summary>
            The current environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.RefPath">
            <summary>
            Get the current reference path. Which could be the 
            paths to the config files.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Available">
            <summary>
            Provides list of names( "prod,uat,qa,dev") of available environments than can be selected by user.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsProd">
            <summary>
            Is current env type production.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsQa">
            <summary>
            Is current env type Qa
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsDev">
            <summary>
            Is current env type development.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsUat">
            <summary>
            Is current env type uat.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Count">
            <summary>
            Get the number of available envs.
            </summary>
        </member>
        <member name="T:ComLib.EmailSupport.NotificationMessage">
            <summary>
            Notification message.
            </summary>
        </member>
        <member name="F:ComLib.EmailSupport.NotificationMessage.To">
            <summary>
            Who the message is to
            </summary>
        </member>
        <member name="F:ComLib.EmailSupport.NotificationMessage.From">
            <summary>
            Who the message is from.
            </summary>
        </member>
        <member name="F:ComLib.EmailSupport.NotificationMessage.Subject">
            <summary>
            Subject of the message
            </summary>
        </member>
        <member name="F:ComLib.EmailSupport.NotificationMessage.Body">
            <summary>
            Body of the message
            </summary>
        </member>
        <member name="F:ComLib.EmailSupport.NotificationMessage.MessageTemplateId">
            <summary>
            Template id to link the message to the template for the message
            </summary>
        </member>
        <member name="F:ComLib.EmailSupport.NotificationMessage.IsHtml">
            <summary>
            Whether or not this message body contains html.
            </summary>
        </member>
        <member name="F:ComLib.EmailSupport.NotificationMessage.Values">
            <summary>
            String of values to supply to the message.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.NotificationMessage.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="values"></param>
            <param name="to"></param>
            <param name="from"></param>
            <param name="subject"></param>
            <param name="messageTemplateId"></param>
        </member>
        <member name="T:ComLib.EmailSupport.EmailMessage">
            <summary>
            Basic email message.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.From">
            <summary>
            From email address.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.To">
            <summary>
            To email address.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.Subject">
            <summary>
            Subject of email.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.Body">
            <summary>
            Body of email.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.IsHtml">
            <summary>
            Whether or not the body message contains html.
            </summary>
        </member>
        <member name="T:ComLib.Diagnostics.DiagnosticsHelper">
            <summary>
            Utility class for diagnostics.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetDrivesInfo">
            <summary>
            Returns a key value pair list of drives and available space.
            </summary>
            <returns>Dictionary with drive information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetMachineInfo">
            <summary>
            Get the machine level information.
            </summary>
            <returns>Dictionary with machine information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetServices">
            <summary>
            Get all the list of services.
            </summary>
            <returns>Dictionary with services information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetAppDomainInfo">
            <summary>
            Get information about the currently executing process.
            </summary>
            <returns>Dictionary with app domain information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetModules">
            <summary>
            Get all the loaded modules in the current process.
            </summary>
            <returns>Dictionary with modules information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetProcesses">
            <summary>
            Get information about the currently executing process.
            </summary>
            <returns>Dictionary with process information.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetSystemEnvVariables">
            <summary>
            System level environment levels.
            </summary>
            <returns>Dictionary with system level environmental variables.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetUserEnvVariables">
            <summary>
            User level environment variables.
            </summary>
            <returns>Dictionary with user level environmental variables.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetEnvVariables(System.Func{System.Collections.IDictionary})">
            <summary>
            Get the environment variables.
            </summary>
            <param name="envGetter">Function to get environment.</param>
            <returns>Dictionary with environmental variables.</returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.ConvertEnumGroupsToStringList(ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Converts an array of diagnostic groups
            to a list of diagnostic groups.
            </summary>
            <param name="groups">Array with diagnostic groups.</param>
            <returns>List with diagnostic groups.</returns>
        </member>
        <member name="T:ComLib.Diagnostics.LoadedModule">
            <summary>
            Stores the information about a loaded assembly/module.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.LoadedModule.ToString">
            <summary>
            Get formatted text.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Diagnostics.LoadedModule.Name">
            <summary>
            Get/set the module name.
            </summary>
        </member>
        <member name="P:ComLib.Diagnostics.LoadedModule.FullPath">
            <summary>
            Get/set the module path.
            </summary>
        </member>
        <member name="P:ComLib.Diagnostics.LoadedModule.Directory">
            <summary>
            Get/set the module directory.
            </summary>
        </member>
        <member name="P:ComLib.Diagnostics.LoadedModule.Version">
            <summary>
            Get/set the module version.
            </summary>
        </member>
        <member name="P:ComLib.Diagnostics.LoadedModule.TimeStamp">
            <summary>
            Get/set the module time stamp.
            </summary>
        </member>
        <member name="T:ComLib.CsvParse.CsvDoc">
            <summary>
            Csv document.
            Lexical parser that can parse.
            
            Id, Name,      Desc
            0,  Art,       Art classes
            1,  Painting,  Any type of painting
            2,  Sports,    Sports classes
            3.  Boxing,	   Boxing classes
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.#ctor(System.String,System.Boolean)">
            <summary>
            Loads a new csv document.
            </summary>
            <param name="contentOrFilePath"></param>
            <param name="isFilePath"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.#ctor(System.String,System.Boolean,ComLib.CsvParse.CsvConfig,System.Boolean)">
            <summary>
            Create using supplied settings.
            </summary>
            <param name="contentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="settings"></param>
            <param name="autoLoad"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Get``1(System.Int32,System.Int32)">
            <summary>
            Get the value at the row/column index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Get``1(System.Int32,System.String)">
            <summary>
            Get the value at the row/column name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.String,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column value using the column name.
            </summary>
            <param name="columnName"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.String,System.Int32,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column value.
            </summary>
            <param name="columnName"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.Int32,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column value.
            </summary>
            <param name="column"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column string values.
            </summary>
            <param name="column"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach``1(System.String,System.Int32,System.Action{System.Int32,System.Int32,``0})">
            <summary>
            Iterate over each column values.
            </summary>
            <param name="columnName"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach``1(System.Int32,System.Int32,System.Action{System.Int32,System.Int32,``0})">
            <summary>
            Iterate over each column values.
            </summary>
            <param name="column"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32,``0})">
            <summary>
            Iterate over each column values.
            </summary>
            <param name="column"></param>
            <param name="startingRow"></param>
            <param name="endingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable">
            <summary>
            Convert the document to a datatable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable(System.String)">
            <summary>
            Convert the document to a DataTable w/ the specified name.
            </summary>
            <param name="tableName">Name to apply to datatable.</param>
            <returns>System.DataTable</returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable(System.String,System.Int32,System.Int32)">
            <summary>
            Convert the document to a DataTable w/ the specified name.
            This starts at the specified row/column and includes all the rows/columns after it.
            </summary>
            <param name="tableName">Name to apply to table</param>
            <param name="startRow">Row to start at.</param>
            <param name="startCol">Column to start at.</param>
            <returns>System.DataTable</returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert the document to a DataTable w/ the specified name.
            This starts at the specified row/column and includes all the rows/columns after it.
            </summary>
            <param name="tableName">Name to apply to table</param>
            <param name="startRow">Row to start at.</param>
            <param name="endRow">Row to end at.</param>
            <param name="startCol">Column to start at.</param>
            <param name="endCol">Column to end at.</param>
            <returns>System.DataTable</returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ParseLists">
            <summary>
            Parse lists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ParseDict">
            <summary>
            Parse as list of records where each record is a dictionary.
            This should be used if the first column has headers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Parse">
            <summary>
            Returns all the records in the csv content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Write(System.String,System.String)">
            <summary>
            Write csv doc to the file in csv format.
            </summary>
            <param name="fileName"></param>
            <param name="delimeter"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Write(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Write csv doc to the filename.
            </summary>
            <param name="fileName">FileName</param>
            <param name="delimeter">Delimeter to use</param>
            <param name="quoteAll">Quote all fields</param>
            <param name="quoteChar">Character to use for strings when quoting.</param>
            <param name="newLine">New Line character to use.</param>
            <param name="append"></param>
        </member>
        <member name="P:ComLib.CsvParse.CsvDoc.Columns">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:ComLib.CsvParse.CsvDoc.Data">
            <summary>
            Records as a list of dictionaries.
            </summary>
        </member>
        <member name="T:ComLib.Samples.Example_Automation">
            <summary>
            Example for the automation component.
            </summary>
        </member>
        <member name="M:ComLib.Samples.Example_Automation.Execute">
            <summary>
            Execute the sample
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Samples.CommandHelloWorld">
            <summary>
            Sample command for showing the automation component.
            </summary>
        </member>
        <member name="M:ComLib.Samples.CommandHelloWorld.DoExecute(ComLib.Automation.CommandContext)">
            <summary>
            Execute the command.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.Scope">
            <summary>
            Used to store local variables.
            </summary>
        </member>
        <member name="M:ComLib.Lang.Scope.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Lang.Scope.Contains(System.String)">
            <summary>
            Whether or not the scope contains the supplied variable name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Scope.Get``1(System.String)">
            <summary>
            Get the variable value associated with name from the scope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Name of the varibale to get</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Scope.SetValue(System.String,System.Object)">
            <summary>
            Sets a value into the current scope.
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Lang.Scope.Push">
            <summary>
            Push another scope into the script.
            </summary>
        </member>
        <member name="M:ComLib.Lang.Scope.Pop">
            <summary>
            Remove the current scope from the script.
            </summary>
        </member>
        <member name="P:ComLib.Lang.Scope.Item(System.String)">
            <summary>
            Get the variable from the current scope.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.Lexer">
            <summary>
            Parses script in terms of tokens.
            Main method is NextToken();
            A script can be broken down into a sequence of tokens.
            e.g.
            
            1. var name = "kishore";
            Tokens:
            
            VALUE:         TYPE:
            1. var         keyword
            2. name        id
            3. =           operator
            4. "kishore"   literal
            5. ;           operator
            </summary>
        </member>
        <member name="M:ComLib.Lang.Lexer.#ctor(ComLib.Scanner)">
            <summary>
            Initialize
            </summary>
            <param name="scanner"></param>
        </member>
        <member name="M:ComLib.Lang.Lexer.Expect">
            <summary>
            Expect the token type supplied.
            </summary>
        </member>
        <member name="M:ComLib.Lang.Lexer.NextToken">
            <summary>
            Reads the next token from the reader.
            </summary>
            <returns> A token, or <c>null</c> if there are no more tokens. </returns>
        </member>
        <member name="M:ComLib.Lang.Lexer.ReadWord">
            <summary>
            Read word
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Lexer.ReadNumber">
            <summary>
            Read number
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Lexer.ReadOperator">
            <summary>
            Read an operator
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Lang.Lexer.ReadString">
            <summary>
            Reads a string either in quote or double quote format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Lang.Lexer.LineNumber">
            <summary>
            The current line number.
            </summary>
        </member>
        <member name="P:ComLib.Lang.Lexer.LineCharPos">
            <summary>
            The char position on the current line.
            </summary>
        </member>
        <member name="P:ComLib.Lang.Lexer.LastToken">
            <summary>
            The current token.
            </summary>
        </member>
        <member name="T:ComLib.Lang.Interpreter">
            <summary>
            Light version of javascript with some "sandbox" features coming up.
            Features include:
            1. var declarations
            2. if conditions
            3. while loops
            4. for loops
            5. func calls
            </summary>
        </member>
        <member name="M:ComLib.Lang.Interpreter.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Lang.Interpreter.ParseFile(System.String)">
            <summary>
            Parses the script but does not execute it.
            </summary>
            <param name="scriptPath">Path to the script</param>
        </member>
        <member name="M:ComLib.Lang.Interpreter.Parse(System.String)">
            <summary>
            Parses the script but does not execute it.
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:ComLib.Lang.Interpreter.ExecuteFile(System.String)">
            <summary>
            Executes the file.
            </summary>
            <param name="scriptPath">Path to the script</param>
        </member>
        <member name="M:ComLib.Lang.Interpreter.Execute(System.String)">
            <summary>
            Executes the script
            </summary>
            <param name="script">Script text</param>
        </member>
        <member name="P:ComLib.Lang.Interpreter.Scope">
            <summary>
            Scope of the script
            </summary>
        </member>
        <member name="T:ComLib.Lang.InterpreterSettings">
            <summary>
            Settings for the interpreter
            </summary>
        </member>
        <member name="F:ComLib.Lang.InterpreterSettings.EnableFunctionCallCallBacks">
            <summary>
            Whether or not to enable callbacks for function calls.
            </summary>
        </member>
        <member name="T:ComLib.Lang.UnaryExpression">
            <summary>
            Variable expression data
            </summary>
        </member>
        <member name="M:ComLib.Lang.UnaryExpression.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Lang.UnaryExpression.#ctor(System.String,System.Double,ComLib.Lang.Operator,ComLib.Lang.Scope)">
            <summary>
            Initialize
            </summary>
            <param name="scope">Scope containing objects</param>
            <param name="incValue">Value to increment</param>
            <param name="op">The unary operator</param>
            <param name="name">Variable name</param>
        </member>
        <member name="M:ComLib.Lang.UnaryExpression.#ctor(System.String,ComLib.Lang.Expression,ComLib.Lang.Operator,ComLib.Lang.Scope)">
            <summary>
            Initialize
            </summary>
            <param name="scope">Scope containing objects</param>
            <param name="exp">Expression representing value to increment by</param>
            <param name="op">The unary operator</param>
            <param name="name">Variable name</param>
        </member>
        <member name="M:ComLib.Lang.UnaryExpression.Evaluate">
            <summary>
            Evaluate
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Lang.CompareExpression">
            <summary>
            Condition expression less, less than equal, more, more than equal etc.
            </summary>
        </member>
        <member name="M:ComLib.Lang.CompareExpression.#ctor(ComLib.Lang.Expression,ComLib.Lang.Operator,ComLib.Lang.Expression)">
            <summary>
            Initialize
            </summary>
            <param name="left">Left hand expression</param>
            <param name="op">Operator</param>
            <param name="right">Right expression</param>
        </member>
        <member name="F:ComLib.Lang.CompareExpression.Left">
            <summary>
            Left hand expression
            </summary>
        </member>
        <member name="F:ComLib.Lang.CompareExpression.Op">
            <summary>
            Operator > >= == != less less than
            </summary>
        </member>
        <member name="F:ComLib.Lang.CompareExpression.Right">
            <summary>
            Right hand expression
            </summary>
        </member>
        <member name="M:ComLib.Lang.CompareExpression.Evaluate">
            <summary>
            Evaluate > >= != == less less than
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.DateParseResult">
            <summary>
            Time parse result.
            </summary>
        </member>
        <member name="F:ComLib.DateParseResult.IsValid">
            <summary>
            True if the date parse was valid.
            </summary>
        </member>
        <member name="F:ComLib.DateParseResult.Error">
            <summary>
            Error of parse.
            </summary>
        </member>
        <member name="F:ComLib.DateParseResult.Start">
            <summary>
            Start datetime.
            </summary>
        </member>
        <member name="F:ComLib.DateParseResult.End">
            <summary>
            End datetime.
            </summary>
        </member>
        <member name="M:ComLib.DateParseResult.#ctor(System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Constructor to initialize the results
            </summary>
            <param name="valid">Valid flag.</param>
            <param name="error">Validation result.</param>
            <param name="start">Start datetime.</param>
            <param name="end">End datetime.</param>
        </member>
        <member name="T:ComLib.DateParser">
            <summary>
            Parses the dates.
            </summary>
        </member>
        <member name="F:ComLib.DateParser.ErrorStartDateGreaterThanEnd">
            <summary>
            Error for confirming start date &lt;= end date.
            </summary>
        </member>
        <member name="M:ComLib.DateParser.ParseDateRange(System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Parses a string representing 2 dates.
            The dates must be separated by the word "to".
            </summary>
            <param name="val">String representing two dates.</param>
            <param name="errors">Parsing errors.</param>
            <param name="delimiter">Delimiter separating the dates.</param>
            <returns>Instance of date parse result with the result.</returns>
        </member>
        <member name="M:ComLib.DateParser.ParseTPlusMinusX(System.String)">
            <summary>
            Handle parsing of dates with T-1, T+2 etc.
            </summary>
            <param name="dateStr">Dates with operation.</param>
            <returns>Calculated date.</returns>
        </member>
        <member name="M:ComLib.DateParser.ParseTPlusMinusX(System.String,System.DateTime)">
            <summary>
            Handle parsing of dates with T-1, T+2 etc.
            </summary>
            <param name="dateStr">Dates with operation.</param>
            <param name="defaultVal">Default value.</param>
            <returns>Calculated date.</returns>
        </member>
        <member name="T:ComLib.Scheduling.Trigger">
            <summary>
            Trigger for schedule entry. Represents when / how often to run a task.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Trigger.Repeat">
            <summary>
            Whether or not to repeat
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Trigger.StartTime">
            <summary>
            The starting time of the trigger.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Trigger.EndTime">
            <summary>
            The ending time.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Trigger.Interval">
            <summary>
            Time duration between triggers.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Trigger.HasMaxIterations">
            <summary>
            Whether or not there is a limit to the number of times this should run.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Trigger.MaxIterations">
            <summary>
            Total number of times this should run.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Trigger.IsOnDemand">
            <summary>
            Whether or not this is an ondemand trigger.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.OnDemand">
            <summary>
            Indicate that the trigger is ondemand.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.MaxRuns(System.Int32)">
            <summary>
            Set the max runs
            </summary>
            <param name="maxRuns">The max runs.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.StopAt(System.DateTime)">
            <summary>
            Set the stop time.
            </summary>
            <param name="timeToStop">The time to stop.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.Every(System.TimeSpan)">
            <summary>
            Set up a repeating time.
            </summary>
            <param name="timespan">The timespan.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="T:ComLib.Scheduling.Task">
            <summary>
            Class representing the task to execute, it can either
            be a class that derives from ITask or a delegate.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Task.Name">
            <summary>
            The name of the task.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Task.OnTaskExecute">
            <summary>
            The action to execute.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Task.OnTaskCompleted">
            <summary>
            Action to be called when a task is completed.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Task.Trigger">
            <summary>
            Trigger for this task.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.Task.TimerInfo">
            <summary>
            Timer information for this task.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Task.#ctor(System.String,System.Action,ComLib.Scheduling.Trigger)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Scheduling.Task"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="executor">The executor.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:ComLib.Scheduling.Task.OnTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Callback from timer.
            </summary>
            <param name="sender">Object raising the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ComLib.Scheduling.Task.Run">
            <summary>
            Run the task.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Task.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns>Task status information.</returns>
        </member>
        <member name="M:ComLib.Scheduling.Task.Stop">
            <summary>
            Stop this timer and send notification that this task is complete.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Task.UpdateSummary">
            <summary>
            Updates the summary.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Task.Copy(ComLib.Scheduling.Task)">
            <summary>
            Copies the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns>A new copy of this instance.</returns>
        </member>
        <member name="P:ComLib.Scheduling.Task.IsOnDemand">
            <summary>
            Whether or not this is an on demand task.
            </summary>
            <returns>True if this is an on demand task.</returns>
        </member>
        <member name="T:ComLib.Scheduling.TaskSummary">
            <summary>
            Summary info for a task which indicates last run time etc.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.Description">
            <summary>
            Description of task.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.LastProcessDate">
            <summary>
            The last time the queue was processed.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.NumberOfTimesProcessed">
            <summary>
            Number of times the queue has been processed.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.ElapsedTimeSinceLastProcessDate">
            <summary>
            Amount of time since the last process date.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.IsActive">
            <summary>
            Whether or nor the task is still active to run.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.TaskSummary.#ctor(System.String,System.DateTime,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            INitialize new task summary.
            </summary>
            <param name="name">Name of task.</param>
            <param name="lastProcessDate">Last datetime it was processed.</param>
            <param name="numberOfTimesProcessed">Number of times it was processed.</param>
            <param name="elaspedTime">Time elapsed between tasks</param>
            <param name="isEnabled">Whether or not the task is enabled.</param>
        </member>
        <member name="T:ComLib.Scheduling.SchedulerService">
            <summary>
            Light-weight scheduler.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Schedule(System.String,ComLib.Scheduling.Trigger,System.Boolean,System.Action,System.Action{ComLib.Scheduling.Task})">
            <summary>
            Schedules the specified task via a delegate.
            </summary>
            <param name="name">Task name.</param>
            <param name="trigger">Task trigger.</param>
            <param name="start">True to start task.</param>
            <param name="executor">Action associated with task</param>
            <param name="onCompletedAction">Action to execute when task is completed.</param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Pause(System.String)">
            <summary>
            Pauses the task.
            </summary>
            <param name="name">Name of task to pause.</param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Run(System.String)">
            <summary>
            Run the task.
            </summary>
            <param name="name">Name of task to run.</param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Resume(System.String)">
            <summary>
            Resumes the task.
            </summary>
            <param name="name">Name of task to resume.</param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Delete(System.String)">
            <summary>
            Delete task.
            </summary>
            <param name="name">Name of task to delete.</param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.GetNames">
            <summary>
            Gets all the active tasks in the schedule.
            BUG: Currently does not return the task name that are associated 
            with the group name.
            </summary>
            <returns>Array with names of active tasks.</returns>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.PauseAll">
            <summary>
            Pause all tasks.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.ResumeAll">
            <summary>
            Resume all tasks.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.ShutDown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.GetStatus">
            <summary>
            Get the statuses of all tasks.
            </summary>
            <returns>List with statuses of all tasks.</returns>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.GetStatus(System.String)">
            <summary>
            Returns summary info for a task.
            </summary>
            <param name="name">Name of task.</param>
            <returns>Information of task.</returns>
        </member>
        <member name="P:ComLib.Scheduling.SchedulerService.IsStarted">
            <summary>
            Is started.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.SchedulerService.IsShutDown">
            <summary>
            Is shut down.
            </summary>
        </member>
        <member name="T:ComLib.Patterns.Factory`2">
            <summary>
            This interface can be used by classes
            that implement a factory pattern.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="T">Type of generated classes.</typeparam>
        </member>
        <member name="F:ComLib.Patterns.Factory`2._creators">
            <summary>
            Dictionary of creators for a specific key.
            </summary>
        </member>
        <member name="F:ComLib.Patterns.Factory`2._defaultCreator">
            <summary>
            Creation function.
            </summary>
        </member>
        <member name="F:ComLib.Patterns.Factory`2._default">
            <summary>
            Default node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Register(`0,`1)">
            <summary>
            Register a key to implementation.
            </summary>
            <param name="key">Key.</param>
            <param name="result">Result of key.</param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Register(`0,System.Func{`1})">
            <summary>
            Registers the default implementation.
            </summary>
            <param name="key">Key.</param>
            <param name="creator">Corresponding creation function.</param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.RegisterDefault(`1)">
            <summary>
            Registers the default implementation.
            </summary>
            <param name="result">Default result.</param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.RegisterDefault(System.Func{`1})">
            <summary>
            Register default implementation using creator func provided.
            </summary>
            <param name="creator">Default creation function.</param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Create(`0)">
            <summary>
            Create an instance of type T using the key.
            </summary>
            <param name="key">Key.</param>
            <returns>Created type.</returns>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Create">
            <summary>
            Create default instance.
            </summary>
            <returns>Created type.</returns>
        </member>
        <member name="T:ComLib.MediaSupport.ImageHelper">
            <summary>
            Helper class for graphics processing.
            </summary>
        </member>
        <member name="M:ComLib.MediaSupport.ImageHelper.ConvertToImage(System.Byte[])">
            <summary>
            Convert byte arry to an image object.
            </summary>
            <param name="content">The bytes representing the image.</param>
            <returns>Image created from bytes.</returns>
        </member>
        <member name="M:ComLib.MediaSupport.ImageHelper.ConvertToBytes(System.Drawing.Image)">
            <summary>
            Converts an image to a byte array.
            </summary>
            <param name="image">Image to convert.</param>
            <returns>Array of bytes with converted image.</returns>
        </member>
        <member name="M:ComLib.MediaSupport.ImageHelper.ConvertToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts an image to a byte array.
            </summary>
            <param name="image">Image to convert.</param>
            <param name="format">The format of the image.</param>
            <returns>Array of bytes with converted image.</returns>
        </member>
        <member name="M:ComLib.MediaSupport.ImageHelper.ConvertToThumbNail(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the image contents as a byte[] into a thumbnail represented by another byte[].
            </summary>
            <param name="imageContents">The byte[] for the original contents.</param>
            <param name="thumbNailHeigth">Height for thumbnail</param>
            <param name="thumbNailWidth">Width for thumbnail</param>
            <returns>Processing results.</returns>
        </member>
        <member name="M:ComLib.MediaSupport.ImageHelper.GetDimensions(System.Byte[])">
            <summary>
            Returns the height and width of the image.
            </summary>
            <param name="imageContents">Byte array with converted image.</param>
            <returns>Tuple with height and width.</returns>
        </member>
        <member name="T:ComLib.Entities.Management.EntityServiceSettings">
            <summary>
            Contains publicly accessible method names.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.CreateMethod">
            <summary>
            Method for Creating entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.UpdateMethod">
            <summary>
            Method for updating domain entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.DeleteMethod">
            <summary>
            Method for deleting domain entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.SaveMethod">
            <summary>
            Save method.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.RetrieveMethod">
            <summary>
            Method for retrieving domain entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.RetrieveAllMethod">
            <summary>
            Method for retrieving all domain entities.
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionaryReadOnly`2">
            <summary>
            Read only wrapper for generics based dictionary.
            Only provides lookup retrieval abilities.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="items"></param>
            <param name="throwOnWritableAction"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Add(`0,`1)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.CheckAndThrow(System.String)">
            <summary>
            Check and thrown based on flag.
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.CodeGeneration.ModelHandler">
            <summary>
            Handler for processing a specific model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.PropertyHandler">
            <summary>
            Handler for processing properties of the model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="prop"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.CompositionHandler">
            <summary>
            Handler for processing an composite model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="compositeModel"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.IncludeHandler">
            <summary>
            Handler for processing an included model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="includedModel"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.UIHandler">
            <summary>
            Handler for processing the UI for a model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="uiSpec"></param>
            <param name="prop"></param>
        </member>
    </members>
</doc>
